[
  {
    "question": "What is the current building key, building street address, city, state, and postal code of the history department?",
    "sql": "SELECT DISTINCT d.FCLT_BUILDING_KEY, e.BUILDING_STREET_ADDRESS, d.CITY, d.STATE, d.POSTAL_CODE FROM FCLT_BUILDING_ADDRESS d JOIN FCLT_ROOMS a ON a.FCLT_BUILDING_KEY = d.FCLT_BUILDING_KEY JOIN FCLT_ORG_DLC_KEY b ON a.FCLT_ORGANIZATION_KEY = b.FCLT_ORGANIZATION_KEY JOIN MASTER_DEPT_HIERARCHY c ON b.DLC_KEY = c.DLC_KEY JOIN BUILDINGS e ON e.BUILDING_KEY = d.FCLT_BUILDING_KEY WHERE lower(c.DLC_NAME) = lower('History') AND d.ADDRESS_PURPOSE = 'STREET';",
    "db_id": "dw",
    "mapping": {
      "building key": [
        "FCLT_BUILDING_ADDRESS.FCLT_BUILDING_KEY"
      ],
      "building street address": [
        "BUILDINGS.BUILDING_STREET_ADDRESS",
        "FCLT_BUILDING_ADDRESS.ADDRESS_PURPOSE"
      ],
      "city": [
        "FCLT_BUILDING_ADDRESS.CITY"
      ],
      "state": [
        "FCLT_BUILDING_ADDRESS.STATE"
      ],
      "postal code": [
        "FCLT_BUILDING_ADDRESS.POSTAL_CODE"
      ],
      "history department": [
        "MASTER_DEPT_HIERARCHY.DLC_NAME"
      ]
    },
    "join_keys": [
      [
        "FCLT_BUILDING_ADDRESS.FCLT_BUILDING_KEY",
        "FCLT_ROOMS.FCLT_BUILDING_KEY"
      ],
      [
        "FCLT_ROOMS.FCLT_ORGANIZATION_KEY",
        "FCLT_ORG_DLC_KEY.FCLT_ORGANIZATION_KEY"
      ],
      [
        "FCLT_ORG_DLC_KEY.DLC_KEY",
        "MASTER_DEPT_HIERARCHY.DLC_KEY"
      ],
      [
        "FCLT_BUILDING_ADDRESS.FCLT_BUILDING_KEY",
        "BUILDINGS.BUILDING_KEY"
      ]
    ]
  },
  {
    "question": "Show the unique activity titles, locations, term start date, and supervisor name for all independent activities, sorted by the ascending order of start date.",
    "sql": "SELECT DISTINCT a.activity_title, d.session_location, c.term_start_date, b.person_name AS Leader FROM iap_subject_detail a JOIN iap_subject_person b ON a.iap_subject_person_key = b.iap_subject_person_key JOIN academic_terms_all c ON c.term_code = a.term_code JOIN iap_subject_session d ON a.iap_subject_session_key = d.iap_subject_session_key WHERE b.person_role = 'Activity leader' ORDER BY term_start_date ASC;",
    "db_id": "dw",
    "mapping": {
      "activity titles": [
        "IAP_SUBJECT_DETAIL.ACTIVITY_TITLE"
      ],
      "locations": [
        "IAP_SUBJECT_SESSION.SESSION_LOCATION"
      ],
      "term start date": [
        "ACADEMIC_TERMS_ALL.TERM_START_DATE"
      ],
      "supervisor name": [
        "IAP_SUBJECT_PERSON.PERSON_NAME",
        "IAP_SUBJECT_PERSON.PERSON_ROLE"
      ]
    },
    "join_keys": [
      [
        "IAP_SUBJECT_PERSON.IAP_SUBJECT_PERSON_KEY",
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_PERSON_KEY"
      ],
      [
        "ACADEMIC_TERMS_ALL.TERM_CODE",
        "IAP_SUBJECT_DETAIL.TERM_CODE"
      ],
      [
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_SESSION_KEY",
        "IAP_SUBJECT_SESSION.IAP_SUBJECT_SESSION_KEY"
      ]
    ]
  },
  {
    "question": "List the unique course instructor names, course titles, and the amount of material for each course instructor key and the key of subject offered.",
    "sql": "SELECT DISTINCT LIBRARY_COURSE_INSTRUCTOR.instructor_name, LIBRARY_SUBJECT_OFFERED.subject_title, COUNT(LIBRARY_RESERVE_CATALOG.catalog_isbn) OVER (PARTITION BY LIBRARY_COURSE_INSTRUCTOR.LIBRARY_COURSE_INSTRUCTOR_KEY, LIBRARY_SUBJECT_OFFERED.LIBRARY_SUBJECT_OFFERED_KEY) FROM LIBRARY_COURSE_INSTRUCTOR JOIN LIBRARY_RESERVE_MATRL_DETAIL ON LIBRARY_COURSE_INSTRUCTOR.LIBRARY_COURSE_INSTRUCTOR_KEY = LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_COURSE_INSTRUCTOR_KEY JOIN LIBRARY_SUBJECT_OFFERED ON LIBRARY_SUBJECT_OFFERED.LIBRARY_SUBJECT_OFFERED_KEY = LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_SUBJECT_OFFERED_KEY JOIN LIBRARY_RESERVE_CATALOG ON LIBRARY_RESERVE_CATALOG.LIBRARY_RESERVE_CATALOG_KEY = LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_RESERVE_CATALOG_KEY;",
    "db_id": "dw",
    "mapping": {
      "course instructor names": [
        "LIBRARY_COURSE_INSTRUCTOR.INSTRUCTOR_NAME"
      ],
      "course titles": [
        "LIBRARY_SUBJECT_OFFERED.SUBJECT_TITLE"
      ],
      "amount of material": [
        "LIBRARY_RESERVE_CATALOG.CATALOG_ISBN"
      ],
      "course instructor key": [
        "LIBRARY_COURSE_INSTRUCTOR.LIBRARY_COURSE_INSTRUCTOR_KEY"
      ],
      "key of subject offered": [
        "LIBRARY_SUBJECT_OFFERED.LIBRARY_SUBJECT_OFFERED_KEY"
      ]
    },
    "join_keys": [
      [
        "LIBRARY_COURSE_INSTRUCTOR.LIBRARY_COURSE_INSTRUCTOR_KEY",
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_COURSE_INSTRUCTOR_KEY"
      ],
      [
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_SUBJECT_OFFERED_KEY",
        "LIBRARY_SUBJECT_OFFERED.LIBRARY_SUBJECT_OFFERED_KEY"
      ],
      [
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_RESERVE_CATALOG_KEY",
        "LIBRARY_RESERVE_CATALOG.LIBRARY_RESERVE_CATALOG_KEY"
      ]
    ]
  },
  {
    "question": "What is the room, floor, building key, building street address, city, state, and postal code of Professor Lily Wilkinson's office?",
    "sql": "SELECT fac_rooms.Room, fac_rooms.floor, fac_building_address.BUILDING_KEY, BUILDINGS.BUILDING_STREET_ADDRESS, fac_building_address.CITY, fac_building_address.STATE, fac_building_address.POSTAL_CODE FROM (SELECT office_location FROM employee_directory WHERE full_name = 'Wilkinson, Lily-Mae') JOIN fac_rooms on office_location = fac_room_key JOIN fac_building_address on fac_rooms.building_key = fac_building_address.BUILDING_KEY JOIN BUILDINGS ON BUILDINGS.BUILDING_KEY = fac_building_address.BUILDING_KEY where fac_building_address.ADDRESS_PURPOSE = 'STREET';",
    "db_id": "dw",
    "mapping": {
      "room": [
        "FAC_ROOMS.ROOM"
      ],
      "floor": [
        "FAC_ROOMS.FLOOR"
      ],
      "building key": [
        "FAC_BUILDING_ADDRESS.BUILDING_KEY"
      ],
      "building street address": [
        "BUILDINGS.BUILDING_STREET_ADDRESS",
        "FAC_BUILDING_ADDRESS.ADDRESS_PURPOSE"
      ],
      "city": [
        "FAC_BUILDING_ADDRESS.CITY"
      ],
      "state": [
        "FAC_BUILDING_ADDRESS.STATE"
      ],
      "postal code": [
        "FAC_BUILDING_ADDRESS.POSTAL_CODE"
      ],
      "office": [
        "EMPLOYEE_DIRECTORY.OFFICE_LOCATION"
      ],
      "Professor Lily Wilkinson": [
        "EMPLOYEE_DIRECTORY.FULL_NAME"
      ]
    },
    "join_keys": [
      [
        "EMPLOYEE_DIRECTORY.OFFICE_LOCATION",
        "FAC_ROOMS.FAC_ROOM_KEY"
      ],
      [
        "FAC_BUILDING_ADDRESS.BUILDING_KEY",
        "FAC_ROOMS.BUILDING_KEY"
      ],
      [
        "BUILDINGS.BUILDING_KEY",
        "FAC_BUILDING_ADDRESS.BUILDING_KEY"
      ]
    ]
  },
  {
    "question": "List the unique full room names, their corresponding building names, street addresses, cities, states, postal codes, and building heights for rooms associated with subjects that Computer Science students can enroll in.",
    "sql": "SELECT DISTINCT fr.ROOM_FULL_NAME, b.BUILDING_NAME, b.BUILDING_STREET_ADDRESS, fba.CITY, fba.STATE, fba.POSTAL_CODE, fb.BUILDING_HEIGHT FROM COURSE_CATALOG_SUBJECT_OFFERED JOIN FCLT_ROOMS fr ON MEET_PLACE = FCLT_ROOM_KEY JOIN FCLT_BUILDING_ADDRESS fba ON fba.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY JOIN BUILDINGS b ON b.BUILDING_KEY = fr.FCLT_BUILDING_KEY WHERE DEPARTMENT_NAME = 'Electrical Eng & Computer Sci' AND fba.ADDRESS_PURPOSE = 'STREET';",
    "db_id": "dw",
    "mapping": {
      "full room names": [
        "FCLT_ROOMS.ROOM_FULL_NAME"
      ],
      "building names": [
        "BUILDINGS.BUILDING_NAME"
      ],
      "street address": [
        "BUILDINGS.BUILDING_STREET_ADDRESS",
        "FCLT_BUILDING_ADDRESS.ADDRESS_PURPOSE"
      ],
      "city": [
        "FCLT_BUILDING_ADDRESS.CITY"
      ],
      "state": [
        "FCLT_BUILDING_ADDRESS.STATE"
      ],
      "postal code": [
        "FCLT_BUILDING_ADDRESS.POSTAL_CODE"
      ],
      "building height": [
        "FCLT_BUILDING.BUILDING_HEIGHT"
      ],
      "Computer Science": [
        "COURSE_CATALOG_SUBJECT_OFFERED.DEPARTMENT_NAME"
      ]
    },
    "join_keys": [
      [
        "COURSE_CATALOG_SUBJECT_OFFERED.MEET_PLACE",
        "FCLT_ROOMS.FCLT_ROOM_KEY"
      ],
      [
        "FCLT_BUILDING_ADDRESS.FCLT_BUILDING_KEY",
        "FCLT_ROOMS.FCLT_BUILDING_KEY"
      ],
      [
        "FCLT_BUILDING.FCLT_BUILDING_KEY",
        "FCLT_ROOMS.FCLT_BUILDING_KEY"
      ],
      [
        "BUILDINGS.BUILDING_KEY",
        "FCLT_ROOMS.FCLT_BUILDING_KEY"
      ]
    ]
  },
  {
    "question": "List the unique term code, subject title, room, floor, building key, building street address, city, state, and postal code, formats, and number of enrolled students for all courses with more than 300 attendees.",
    "sql": "SELECT DISTINCT s.TERM_CODE, s.subject_title, fr.room, fr.floor, b.BUILDING_KEY, b.BUILDING_STREET_ADDRESS, fba.CITY, fba.STATE, fba.POSTAL_CODE, s.form_type, s.num_enrolled_students FROM subject_offered s JOIN FCLT_ROOMS fr ON MEET_PLACE = FCLT_ROOM_KEY JOIN FCLT_BUILDING_ADDRESS fba ON fba.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY JOIN BUILDINGS b ON fr.FCLT_BUILDING_KEY = b.BUILDING_KEY WHERE s.num_enrolled_students > 300 AND fba.ADDRESS_PURPOSE = 'STREET';",
    "db_id": "dw",
    "mapping": {
      "term code": [
        "SUBJECT_OFFERED.TERM_CODE"
      ],
      "subject title": [
        "SUBJECT_OFFERED.SUBJECT_TITLE"
      ],
      "room": [
        "FCLT_ROOMS.ROOM"
      ],
      "floor": [
        "FCLT_ROOMS.FLOOR"
      ],
      "building key": [
        "BUILDINGS.BUILDING_KEY"
      ],
      "building street address": [
        "BUILDINGS.BUILDING_STREET_ADDRESS",
        "FCLT_BUILDING_ADDRESS.ADDRESS_PURPOSE"
      ],
      "city": [
        "FCLT_BUILDING_ADDRESS.CITY"
      ],
      "state": [
        "FCLT_BUILDING_ADDRESS.STATE"
      ],
      "postal code": [
        "FCLT_BUILDING_ADDRESS.POSTAL_CODE"
      ],
      "formats": [
        "SUBJECT_OFFERED.FORM_TYPE"
      ],
      "number of enrolled students": [
        "SUBJECT_OFFERED.NUM_ENROLLED_STUDENTS"
      ],
      "attendees": [
        "SUBJECT_OFFERED.NUM_ENROLLED_STUDENTS"
      ]
    },
    "join_keys": [
      [
        "FCLT_ROOMS.FCLT_ROOM_KEY",
        "SUBJECT_OFFERED.MEET_PLACE"
      ],
      [
        "FCLT_BUILDING_ADDRESS.FCLT_BUILDING_KEY",
        "FCLT_ROOMS.FCLT_BUILDING_KEY"
      ],
      [
        "FCLT_ROOMS.FCLT_BUILDING_KEY",
        "BUILDINGS.BUILDING_KEY"
      ]
    ]
  },
  {
    "question": "What are the subject titles, their material titles, ISBN numbers, new shelf prices, and total costs of new materials for each subject title, sorted by individual item prices in ascending order?",
    "sql": "SELECT DISTINCT tso.SUBJECT_TITLE, tm.title, tm.isbn, tm.new_shelf_price, SUM(tm.new_shelf_price) OVER(PARTITION BY tso.SUBJECT_TITLE) FROM tip_material tm JOIN TIP_DETAIL td ON tm.TIP_MATERIAL_KEY = td.TIP_MATERIAL_KEY JOIN TIP_SUBJECT_OFFERED tso ON tso.SUBJECT_ID = td.SUBJECT_ID ORDER BY tm.new_shelf_price ASC;",
    "db_id": "dw",
    "mapping": {
      "subject title": [
        "TIP_SUBJECT_OFFERED.SUBJECT_TITLE"
      ],
      "material title": [
        "TIP_MATERIAL.TITLE"
      ],
      "ISBN number": [
        "TIP_MATERIAL.ISBN"
      ],
      "new shelf price": [
        "TIP_MATERIAL.NEW_SHELF_PRICE"
      ],
      "cost of new materials": [
        "TIP_MATERIAL.NEW_SHELF_PRICE"
      ]
    },
    "join_keys": [
      [
        "TIP_MATERIAL.TIP_MATERIAL_KEY",
        "TIP_DETAIL.TIP_MATERIAL_KEY"
      ],
      [
        "TIP_SUBJECT_OFFERED.SUBJECT_ID",
        "TIP_DETAIL.SUBJECT_ID"
      ]
    ]
  },
  {
    "question": "List the long building names constructed before 1950 that have more than 100 employees and the built year and number of employees.",
    "sql": "SELECT * FROM (SELECT DISTINCT a.BUILDING_NAME_LONG, a.year_built, COUNT(distinct employee_directory.MIT_ID) OVER (PARTITION BY a.BUILDING_NAME_LONG, a.year_built) as num_employees FROM (SELECT * FROM (SELECT DISTINCT FCLT_BUILDING_KEY, BUILDING_NAME_LONG, extract(year FROM TO_DATE(date_built, 'MM/DD/YYYY')) as year_built FROM fclt_building_hist) WHERE year_built < 1950) a JOIN fclt_rooms ON fclt_rooms.FCLT_BUILDING_KEY = a.FCLT_BUILDING_KEY JOIN employee_directory ON employee_directory.OFFICE_LOCATION = fclt_rooms.BUILDING_ROOM ) WHERE num_employees > 100;",
    "db_id": "dw",
    "mapping": {
      "long building names": [
        "FCLT_BUILDING_HIST.BUILDING_NAME_LONG"
      ],
      "built year": [
        "FCLT_BUILDING_HIST.DATE_BUILT"
      ],
      "employees": [
        "EMPLOYEE_DIRECTORY.MIT_ID"
      ]
    },
    "join_keys": [
      [
        "EMPLOYEE_DIRECTORY.OFFICE_LOCATION",
        "FCLT_ROOMS.BUILDING_ROOM"
      ]
    ]
  },
  {
    "question": "For each building key, what is the building name and the number of courses offered by the Center for International Studies.",
    "sql": "SELECT fb.BUILDING_NAME, COUNT(DISTINCT ccc.subject_id) FROM cis_course_catalog ccc JOIN COURSE_CATALOG_SUBJECT_OFFERED ccso ON ccc.SUBJECT_ID = ccso.SUBJECT_ID JOIN FCLT_ROOMS fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY GROUP BY fb.FCLT_BUILDING_KEY, fb.BUILDING_NAME;",
    "db_id": "dw",
    "mapping": {
      "building key": [
        "FCLT_BUILDING.FCLT_BUILDING_KEY"
      ],
      "building name": [
        "FCLT_BUILDING.BUILDING_NAME"
      ],
      "courses offered by the Center for International Studies": [
        "CIS_COURSE_CATALOG.SUBJECT_ID"
      ]
    },
    "join_keys": [
      [
        "CIS_COURSE_CATALOG.SUBJECT_ID",
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_ID"
      ],
      [
        "COURSE_CATALOG_SUBJECT_OFFERED.MEET_PLACE",
        "FCLT_ROOMS.FCLT_ROOM_KEY"
      ],
      [
        "FCLT_ROOMS.FCLT_BUILDING_KEY",
        "FCLT_BUILDING.FCLT_BUILDING_KEY"
      ]
    ]
  },
  {
    "question": "What is the name of the building that accomodates the most students and the number of students this building accomodates?",
    "sql": "SELECT DISTINCT building_name, num_students FROM (SELECT fclt_building_key, COUNT(distinct full_name) as num_students FROM fclt_rooms JOIN mit_student_directory ON office_location=BUILDING_ROOM GROUP BY fclt_building_key) a JOIN fclt_building ON a.fclt_building_key = fclt_building.fclt_building_key JOIN (SELECT MAX(num_students) as max_num_students FROM (SELECT fclt_building_key, COUNT(distinct full_name) as num_students FROM fclt_rooms JOIN mit_student_directory ON office_location=BUILDING_ROOM GROUP BY fclt_building_key)) b ON a.num_students = b.max_num_students;",
    "db_id": "dw",
    "mapping": {
      "name of the building": [
        "FCLT_BUILDING.BUILDING_NAME"
      ],
      "students": [
        "MIT_STUDENT_DIRECTORY.FULL_NAME"
      ]
    },
    "join_keys": [
      [
        "FCLT_ROOMS.BUILDING_ROOM",
        "MIT_STUDENT_DIRECTORY.OFFICE_LOCATION"
      ],
      [
        "FCLT_ROOMS.BUILDING_ROOM",
        "MIT_STUDENT_DIRECTORY.OFFICE_LOCATION"
      ]
    ]
  },
  {
    "question": "List name and floor of the building with the largest floor number?",
    "sql": "SELECT DISTINCT B.BUILDING_NAME, A.FLOOR FROM FAC_FLOOR A JOIN FAC_BUILDING B ON A.BUILDING_KEY = B.FAC_BUILDING_KEY JOIN (SELECT max(f) as highest_floor FROM (SELECT CASE WHEN REGEXP_LIKE(FLOOR, '^\\d+$') THEN TO_NUMBER(FLOOR) ELSE NULL END AS f FROM fac_floor)) ON (CASE WHEN REGEXP_LIKE(A.FLOOR, '^\\d+$') THEN TO_NUMBER(FLOOR) ELSE NULL END) = highest_floor;",
    "db_id": "dw",
    "mapping": {
      "name": [
        "FAC_BUILDING.BUILDING_NAME"
      ],
      "floor": [
        "FAC_FLOOR.FLOOR"
      ]
    },
    "join_keys": [
      [
        "FAC_BUILDING.FAC_BUILDING_KEY",
        "FAC_FLOOR.BUILDING_KEY"
      ]
    ]
  },
  {
    "question": "For each IAP category and academic year, list the category name, academic year, total fee collected, total number of IAP subjects, and the minimum and maximum enrollment.",
    "sql": "SELECT isc.IAP_CATEGORY_NAME, td.ACADEMIC_YEAR, SUM(isd.FEE) AS Total_Fee, COUNT(distinct isd.ACTIVITY_TITLE) AS Total_Subjects, MIN(isd.MAX_ENROLLMENT) AS Min_Attendance, MAX(isd.MAX_ENROLLMENT) AS Max_Attendance FROM IAP_SUBJECT_DETAIL isd JOIN IAP_SUBJECT_CATEGORY isc ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY JOIN TIME_DAY td ON isd.TERM_CODE = td.ACADEMIC_TERM_CODE GROUP BY isc.IAP_CATEGORY_NAME, td.ACADEMIC_YEAR;",
    "db_id": "dw",
    "mapping": {
      "category name": [
        "IAP_SUBJECT_CATEGORY.IAP_CATEGORY_NAME"
      ],
      "academic year": [
        "TIME_DAY.ACADEMIC_YEAR"
      ],
      "fee collected": [
        "IAP_SUBJECT_DETAIL.FEE"
      ],
      "IAP subjects": [
        "IAP_SUBJECT_DETAIL.ACTIVITY_TITLE"
      ],
      "enrollment": [
        "IAP_SUBJECT_DETAIL.MAX_ENROLLMENT"
      ]
    },
    "join_keys": [
      [
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_CATEGORY_KEY",
        "IAP_SUBJECT_CATEGORY.IAP_SUBJECT_CATEGORY_KEY"
      ],
      [
        "TIME_DAY.ACADEMIC_TERM_CODE",
        "IAP_SUBJECT_DETAIL.TERM_CODE"
      ]
    ]
  },
  {
    "question": "For each sponsor of the independent activity periods, list the sponsor name, number of sessions held, the total number of enrollment, the minimum and maximum fee, the number of sessions with info, and the number of sessions without info.",
    "sql": "SELECT issr.SPONSOR_NAME, COUNT(DISTINCT iss.IAP_SUBJECT_SESSION_KEY) AS Total_Sessions, SUM(isd.MAX_ENROLLMENT), MIN(isd.FEE) AS Min_Fee, MAX(isd.FEE) AS Max_Fee, SUM(CASE WHEN iss.HAS_SESSION_INFO = 'Y' THEN 1 ELSE 0 END) AS Num_Sessions_With_Info, SUM(CASE WHEN iss.HAS_SESSION_INFO = 'N' THEN 1 ELSE 0 END) AS Num_Sessions_Without_Info FROM IAP_SUBJECT_SESSION iss JOIN IAP_SUBJECT_DETAIL isd ON iss.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN IAP_SUBJECT_SPONSOR issr ON isd.IAP_SUBJECT_SPONSOR_KEY = issr.IAP_SUBJECT_SPONSOR_KEY GROUP BY issr.SPONSOR_NAME;",
    "db_id": "dw",
    "mapping": {
      "sponsor name": [
        "IAP_SUBJECT_SPONSOR.SPONSOR_NAME"
      ],
      "sessions": [
        "IAP_SUBJECT_SESSION.IAP_SUBJECT_SESSION_KEY"
      ],
      "enrollment": [
        "IAP_SUBJECT_DETAIL.MAX_ENROLLMENT"
      ],
      "fee": [
        "IAP_SUBJECT_DETAIL.FEE"
      ],
      "info": [
        "IAP_SUBJECT_SESSION.HAS_SESSION_INFO"
      ]
    },
    "join_keys": [
      [
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_SESSION_KEY",
        "IAP_SUBJECT_SESSION.IAP_SUBJECT_SESSION_KEY"
      ],
      [
        "IAP_SUBJECT_SPONSOR.IAP_SUBJECT_SPONSOR_KEY",
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_SPONSOR_KEY"
      ]
    ]
  },
  {
    "question": "What is the person's email and name, academic year, total number of IAP subjects, the minimum and maximum fees, and the total course enrollment for each person involved and academic year?",
    "sql": "SELECT isp.PERSON_EMAIL, isp.PERSON_NAME, td.ACADEMIC_YEAR, COUNT(distinct isd.ACTIVITY_TITLE) AS Total_Subjects, MIN(isd.FEE) AS Min_Fee, MAX(isd.FEE) AS Max_Fee, SUM(isd.MAX_ENROLLMENT) FROM IAP_SUBJECT_PERSON isp JOIN IAP_SUBJECT_DETAIL isd ON isp.IAP_SUBJECT_PERSON_KEY = isd.IAP_SUBJECT_PERSON_KEY JOIN TIME_DAY td ON isd.TERM_CODE = td.ACADEMIC_TERM_CODE GROUP BY isp.PERSON_EMAIL, isp.PERSON_NAME, td.ACADEMIC_YEAR;",
    "db_id": "dw",
    "mapping": {
      "email": [
        "IAP_SUBJECT_PERSON.PERSON_EMAIL"
      ],
      "name": [
        "IAP_SUBJECT_PERSON.PERSON_NAME"
      ],
      "academic year": [
        "TIME_DAY.ACADEMIC_YEAR"
      ],
      "IAP subjects": [
        "IAP_SUBJECT_DETAIL.ACTIVITY_TITLE"
      ],
      "fees": [
        "IAP_SUBJECT_DETAIL.FEE"
      ],
      "course enrollment": [
        "IAP_SUBJECT_DETAIL.MAX_ENROLLMENT"
      ]
    },
    "join_keys": [
      [
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_PERSON_KEY",
        "IAP_SUBJECT_PERSON.IAP_SUBJECT_PERSON_KEY"
      ],
      [
        "TIME_DAY.ACADEMIC_TERM_CODE",
        "IAP_SUBJECT_DETAIL.TERM_CODE"
      ]
    ]
  },
  {
    "question": "What is the term code, term description, total number of IAP sessions, total fee collected, and minimum and maximum enrollment for each term code?",
    "sql": "SELECT isd.TERM_CODE, ata.TERM_DESCRIPTION, COUNT(distinct iss.IAP_SUBJECT_SESSION_KEY) AS Total_Sessions, SUM(isd.FEE) AS Total_Fee, MIN(isd.MAX_ENROLLMENT) AS Min_Enrollment, MAX(isd.MAX_ENROLLMENT) AS Max_Enrollment FROM IAP_SUBJECT_SESSION iss JOIN IAP_SUBJECT_DETAIL isd ON iss.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN ACADEMIC_TERMS_ALL ata ON isd.TERM_CODE = ata.TERM_CODE GROUP BY isd.TERM_CODE, ata.TERM_DESCRIPTION;",
    "db_id": "dw",
    "mapping": {
      "term code": [
        "IAP_SUBJECT_DETAIL.TERM_CODE"
      ],
      "term description": [
        "ACADEMIC_TERMS_ALL.TERM_DESCRIPTION"
      ],
      "IAP sessions": [
        "IAP_SUBJECT_SESSION.IAP_SUBJECT_SESSION_KEY"
      ],
      "fee": [
        "IAP_SUBJECT_DETAIL.FEE"
      ],
      "enrollment": [
        "IAP_SUBJECT_DETAIL.MAX_ENROLLMENT"
      ]
    },
    "join_keys": [
      [
        "IAP_SUBJECT_SESSION.IAP_SUBJECT_SESSION_KEY",
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_SESSION_KEY"
      ],
      [
        "ACADEMIC_TERMS_ALL.TERM_CODE",
        "IAP_SUBJECT_DETAIL.TERM_CODE"
      ]
    ]
  },
  {
    "question": "What is the name of the building, total number of subjects, total fee, and shortest and longest sessions for each physical IAP session location?",
    "sql": "SELECT b.BUILDING_NAME, COUNT(Distinct isd.ACTIVITY_TITLE) AS Total_Subjects, SUM(isd.FEE) AS Total_Fee, MIN((CASE WHEN TO_DATE(iss.SESSION_START_TIME, 'HH12:MIAM') > TO_DATE(iss.SESSION_END_TIME, 'HH12:MIAM') THEN TO_DATE('12:00PM', 'HH12:MIAM') ELSE TO_DATE(iss.SESSION_END_TIME, 'HH12:MIAM')END) - TO_DATE(iss.SESSION_START_TIME, 'HH12:MIAM') ) * 24 * 60 AS Min_Sessions, MAX((CASE WHEN TO_DATE(iss.SESSION_START_TIME, 'HH12:MIAM') > TO_DATE(iss.SESSION_END_TIME, 'HH12:MIAM') THEN TO_DATE('12:00PM', 'HH12:MIAM') ELSE TO_DATE(iss.SESSION_END_TIME, 'HH12:MIAM')END) - TO_DATE(iss.SESSION_START_TIME, 'HH12:MIAM') ) * 24 * 60 AS Max_Sessions FROM IAP_SUBJECT_SESSION iss JOIN IAP_SUBJECT_DETAIL isd ON iss.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN BUILDINGS b on b.BUILDING_NUMBER = iss.SESSION_LOCATION GROUP BY b.BUILDING_NAME;",
    "db_id": "dw",
    "mapping": {
      "name of the building": [
        "BUILDINGS.BUILDING_NAME"
      ],
      "subjects": [
        "IAP_SUBJECT_DETAIL.ACTIVITY_TITLE"
      ],
      "fee": [
        "IAP_SUBJECT_DETAIL.FEE"
      ],
      "sessions": [
        "IAP_SUBJECT_SESSION.SESSION_END_TIME",
        "IAP_SUBJECT_SESSION.SESSION_START_TIME"
      ]
    },
    "join_keys": [
      [
        "IAP_SUBJECT_SESSION.IAP_SUBJECT_SESSION_KEY",
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_SESSION_KEY"
      ],
      [
        "IAP_SUBJECT_SESSION.SESSION_LOCATION",
        "BUILDINGS.BUILDING_NUMBER"
      ]
    ]
  },
  {
    "question": "What is total number of subjects, the total fee, and the shortest and longest sessions, for all virtual IAP sessions?",
    "sql": "SELECT COUNT(DISTINCT isd.ACTIVITY_TITLE) AS Total_Subjects, SUM(isd.FEE) AS Total_Fee, MIN((CASE WHEN TO_DATE(iss.SESSION_START_TIME, 'HH12:MIAM') > TO_DATE(iss.SESSION_END_TIME, 'HH12:MIAM') THEN TO_DATE('12:00PM', 'HH12:MIAM') ELSE TO_DATE(iss.SESSION_END_TIME, 'HH12:MIAM')END) - TO_DATE(iss.SESSION_START_TIME, 'HH12:MIAM') ) * 24 * 60 AS Min_Sessions, MAX((CASE WHEN TO_DATE(iss.SESSION_START_TIME, 'HH12:MIAM') > TO_DATE(iss.SESSION_END_TIME, 'HH12:MIAM') THEN TO_DATE('12:00PM', 'HH12:MIAM') ELSE TO_DATE(iss.SESSION_END_TIME, 'HH12:MIAM')END) - TO_DATE(iss.SESSION_START_TIME, 'HH12:MIAM') ) * 24 * 60 AS Max_Sessions FROM IAP_SUBJECT_SESSION iss JOIN IAP_SUBJECT_DETAIL isd ON iss.IAP_SUBJECT_SESSION_KEY = isd.IAP_SUBJECT_SESSION_KEY JOIN BUILDINGS b on b.BUILDING_NUMBER != iss.SESSION_LOCATION;",
    "db_id": "dw",
    "mapping": {
      "subjects": [
        "IAP_SUBJECT_DETAIL.ACTIVITY_TITLE"
      ],
      "fee": [
        "IAP_SUBJECT_DETAIL.FEE"
      ],
      "sessions": [
        "IAP_SUBJECT_SESSION.SESSION_END_TIME",
        "IAP_SUBJECT_SESSION.SESSION_START_TIME"
      ]
    },
    "join_keys": [
      [
        "IAP_SUBJECT_SESSION.IAP_SUBJECT_SESSION_KEY",
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_SESSION_KEY"
      ],
      [
        "IAP_SUBJECT_SESSION.SESSION_LOCATION",
        "BUILDINGS.BUILDING_NUMBER"
      ]
    ]
  },
  {
    "question": "What is the school code, school name, full name of the department, course level, total number of courses, and total number of degree-granting courses for each school code, department, and course level?",
    "sql": "SELECT ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DEPARTMENT_FULL_NAME, scd.COURSE_LEVEL, COUNT(DISTINCT scd.COURSE) AS Total_Courses, SUM(CASE WHEN scd.IS_DEGREE_GRANTING = 'Y' THEN 1 ELSE 0 END) AS Total_Degree_Granting_Courses FROM SIS_COURSE_DESCRIPTION scd JOIN SIS_DEPARTMENT sd ON scd.DEPARTMENT = sd.DEPARTMENT_CODE JOIN SIS_SUBJECT_CODE ssc ON scd.COURSE = ssc.SUBJECT_CODE GROUP BY ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, scd.DEPARTMENT, sd.DEPARTMENT_FULL_NAME, scd.COURSE_LEVEL;",
    "db_id": "dw",
    "mapping": {
      "school code": [
        "SIS_SUBJECT_CODE.SCHOOL_CODE"
      ],
      "school name": [
        "SIS_SUBJECT_CODE.SCHOOL_NAME"
      ],
      "full name of the department": [
        "SIS_DEPARTMENT.DEPARTMENT_FULL_NAME"
      ],
      "course level": [
        "SIS_COURSE_DESCRIPTION.COURSE_LEVEL"
      ],
      "courses": [
        "SIS_COURSE_DESCRIPTION.COURSE"
      ],
      "degree-granting courses": [
        "SIS_COURSE_DESCRIPTION.IS_DEGREE_GRANTING"
      ]
    },
    "join_keys": [
      [
        "SIS_DEPARTMENT.DEPARTMENT_CODE",
        "SIS_COURSE_DESCRIPTION.DEPARTMENT"
      ],
      [
        "SIS_COURSE_DESCRIPTION.COURSE",
        "SIS_SUBJECT_CODE.SUBJECT_CODE"
      ]
    ]
  },
  {
    "question": "What are the different schools and departments that offer SIS courses? List their school code, school name, department code, department name, the total number of phone numbers, and the most common course level.",
    "sql": "SELECT ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DEPARTMENT_CODE, sad.SIS_ADMIN_DEPARTMENT_NAME, COUNT(DISTINCT sad.DEPARTMENT_PHONE_NUMBER) AS Total_Phone_Numbers, CASE WHEN SUM(CASE WHEN scd.COURSE_LEVEL = 'U' THEN 1 ELSE 0 END) >= SUM(CASE WHEN scd.COURSE_LEVEL = 'G' THEN 1 ELSE 0 END) THEN 'U' ELSE 'G' END AS Most_Common_Course_Level FROM SIS_ADMIN_DEPARTMENT sad JOIN SIS_DEPARTMENT sd ON sad.SIS_ADMIN_DEPARTMENT_CODE = sd.DEPARTMENT_CODE JOIN SIS_COURSE_DESCRIPTION scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT JOIN SIS_SUBJECT_CODE ssc ON scd.COURSE = ssc.SUBJECT_CODE GROUP BY ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DEPARTMENT_CODE, sad.SIS_ADMIN_DEPARTMENT_NAME;",
    "db_id": "dw",
    "mapping": {
      "school code": [
        "SIS_SUBJECT_CODE.SCHOOL_CODE"
      ],
      "school name": [
        "SIS_SUBJECT_CODE.SCHOOL_NAME"
      ],
      "department code": [
        "SIS_DEPARTMENT.DEPARTMENT_CODE"
      ],
      "department name": [
        "SIS_ADMIN_DEPARTMENT.SIS_ADMIN_DEPARTMENT_NAME"
      ],
      "phone numbers": [
        "SIS_ADMIN_DEPARTMENT.DEPARTMENT_PHONE_NUMBER"
      ],
      "course level": [
        "SIS_COURSE_DESCRIPTION.COURSE_LEVEL"
      ]
    },
    "join_keys": [
      [
        "SIS_ADMIN_DEPARTMENT.SIS_ADMIN_DEPARTMENT_CODE",
        "SIS_DEPARTMENT.DEPARTMENT_CODE"
      ],
      [
        "SIS_DEPARTMENT.DEPARTMENT_CODE",
        "SIS_COURSE_DESCRIPTION.DEPARTMENT"
      ],
      [
        "SIS_SUBJECT_CODE.SUBJECT_CODE",
        "SIS_COURSE_DESCRIPTION.COURSE"
      ]
    ]
  },
  {
    "question": "What is the school code, school name, DLC key, the graduate level, total number of SIS subjects, the minimum and maximum course numbers, and the total number of departments offering subjects for each school?",
    "sql": "SELECT ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DLC_KEY, GRADUATE_LEVEL, COUNT(DISTINCT ssc.SUBJECT_CODE) AS Total_Subjects, MIN(ssc.COURSE_NUMBER) AS Min_Course_Number, MAX(ssc.COURSE_NUMBER) AS Max_Course_Number, COUNT(DISTINCT sd.DEPARTMENT_CODE) AS Total_Departments FROM SIS_SUBJECT_CODE ssc JOIN SIS_COURSE_DESCRIPTION scd ON ssc.SUBJECT_CODE = scd.COURSE JOIN SIS_DEPARTMENT sd ON scd.DEPARTMENT = sd.DEPARTMENT_CODE GROUP BY ssc.SCHOOL_CODE, ssc.SCHOOL_NAME, sd.DLC_KEY,GRADUATE_LEVEL;",
    "db_id": "dw",
    "mapping": {
      "school code": [
        "SIS_SUBJECT_CODE.SCHOOL_CODE"
      ],
      "school name": [
        "SIS_SUBJECT_CODE.SCHOOL_NAME"
      ],
      "DLC key": [
        "SIS_DEPARTMENT.DLC_KEY"
      ],
      "graduate level": [
        "SIS_COURSE_DESCRIPTION.GRADUATE_LEVEL"
      ],
      "SIS subjects": [
        "SIS_SUBJECT_CODE.SUBJECT_CODE"
      ],
      "course numbers": [
        "SIS_SUBJECT_CODE.COURSE_NUMBER"
      ],
      "departments": [
        "SIS_DEPARTMENT.DEPARTMENT_CODE"
      ]
    },
    "join_keys": [
      [
        "SIS_SUBJECT_CODE.SUBJECT_CODE",
        "SIS_COURSE_DESCRIPTION.COURSE"
      ],
      [
        "SIS_COURSE_DESCRIPTION.DEPARTMENT",
        "SIS_DEPARTMENT.DEPARTMENT_CODE"
      ]
    ]
  },
  {
    "question": "What is the building component, name of the building, square footage for all rooms, total number of floors, total number of rooms, total number of facility organizations, total number of supervisors, and total number of supervisees for each building component?",
    "sql": "SELECT sd.BUILDING_COMPONENT, b.BUILDING_NAME, sd.Total_Square_Footage, COUNT(DISTINCT SF.FLOOR) AS Total_Number_Of_Floors, COUNT(DISTINCT sd.BUILDING_ROOM) AS Total_Rooms, COUNT(DISTINCT su.FCLT_ORGANIZATION_KEY) as Total_Number_FCLT, COUNT(DISTINCT ssu.MIT_ID) AS Total_Supervisors, SUM(ssu.NUM_OF_SUPERVISEES) AS Total_Supervisees FROM (SELECT SPACE_DETAIL.*, SUM(ROOM_SQUARE_FOOTAGE) OVER (PARTITION BY BUILDING_COMPONENT) AS Total_Square_Footage FROM SPACE_DETAIL) sd JOIN BUILDINGS b ON b.BUILDING_KEY = sd.BUILDING_KEY JOIN SPACE_FLOOR sf ON sd.FLOOR_KEY = sf.FLOOR_KEY JOIN SPACE_UNIT su ON sd.SPACE_UNIT_KEY = su.SPACE_UNIT_KEY JOIN SPACE_SUPERVISOR_USAGE ssu ON su.DLC_KEY = ssu.DEPT_NAMES GROUP BY sd.BUILDING_COMPONENT, b.BUILDING_NAME, sd.Total_Square_Footage;",
    "db_id": "dw",
    "mapping": {
      "building component": [
        "SPACE_DETAIL.BUILDING_COMPONENT"
      ],
      "name of the building": [
        "BUILDINGS.BUILDING_NAME"
      ],
      "square footage": [
        "SPACE_DETAIL.ROOM_SQUARE_FOOTAGE"
      ],
      "rooms": [
        "SPACE_DETAIL.BUILDING_ROOM"
      ],
      "floors": [
        "SPACE_FLOOR.FLOOR"
      ],
      "facility organizations": [
        "SPACE_UNIT.FCLT_ORGANIZATION_KEY"
      ],
      "supervisors": [
        "SPACE_SUPERVISOR_USAGE.MIT_ID"
      ],
      "supervisees": [
        "SPACE_SUPERVISOR_USAGE.NUM_OF_SUPERVISEES"
      ]
    },
    "join_keys": [
      [
        "SPACE_SUPERVISOR_USAGE.DEPT_NAMES",
        "SPACE_UNIT.DLC_KEY"
      ]
    ]
  },
  {
    "question": "What is the DLC key, name of the DLC, total number of floors, total square footage, total number of facility organizations, total number of supervisors, total number of supervisees, and total building heights for each DLC?",
    "sql": "SELECT su.DLC_KEY, fo.DLC_NAME, COUNT(DISTINCT sf.FLOOR) AS Total_Number_Of_Floors, sd.Total_Square_Footage, COUNT(DISTINCT su.FCLT_ORGANIZATION_KEY) AS Total_Number_Facility, COUNT(DISTINCT ssu.MIT_ID) AS Total_Supervisors, SUM(ssu.NUM_OF_SUPERVISEES) AS Total_Supervisees, SUM(fb.BUILDING_HEIGHT) AS Cumulative_Building_Height FROM (SELECT SPACE_DETAIL.*, SUM(ROOM_SQUARE_FOOTAGE) OVER (PARTITION BY BUILDING_COMPONENT) AS Total_Square_Footage FROM SPACE_DETAIL) sd JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = sd.BUILDING_KEY JOIN SPACE_FLOOR sf ON sd.FLOOR_KEY = sf.FLOOR_KEY JOIN SPACE_UNIT su ON sd.SPACE_UNIT_KEY = su.SPACE_UNIT_KEY JOIN SPACE_SUPERVISOR_USAGE ssu ON su.DLC_KEY = ssu.DEPT_NAMES JOIN (SELECT DISTINCT DLC_KEY, DLC_NAME FROM FCLT_ORGANIZATION) fo ON fo.DLC_KEY = su.DLC_KEY GROUP BY su.DLC_KEY, fo.DLC_NAME, sd.Total_Square_Footage;",
    "db_id": "dw",
    "mapping": {
      "DLC key": [
        "SPACE_UNIT.DLC_KEY"
      ],
      "name of the DLC": [
        "FCLT_ORGANIZATION.DLC_NAME"
      ],
      "floors": [
        "SPACE_FLOOR.FLOOR"
      ],
      "square footage": [
        "SPACE_DETAIL.ROOM_SQUARE_FOOTAGE"
      ],
      "facility organizations": [
        "SPACE_UNIT.FCLT_ORGANIZATION_KEY"
      ],
      "supervisors": [
        "SPACE_SUPERVISOR_USAGE.MIT_ID"
      ],
      "supervisees": [
        "SPACE_SUPERVISOR_USAGE.NUM_OF_SUPERVISEES"
      ],
      "building heights": [
        "FCLT_BUILDING.BUILDING_HEIGHT"
      ]
    },
    "join_keys": [
      [
        "SPACE_UNIT.DLC_KEY",
        "SPACE_SUPERVISOR_USAGE.DEPT_NAMES"
      ]
    ]
  },
  {
    "question": "What is the department name, total number of types of TIP subjects, total number of enrolled students, the minimum and maximum rental new price for each department?",
    "sql": "SELECT tso.OFFER_DEPT_NAME, COUNT(distinct tso.SUBJECT_ID) AS Total_Subjects, SUM(tso.NUM_ENROLLED_STUDENTS) AS Total_Enrolled_Students, MIN(tm.RENTAL_NEW_PRICE) AS Min_Rental_New_Price, MAX(tm.RENTAL_NEW_PRICE) AS Max_Rental_New_Price FROM TIP_SUBJECT_OFFERED tso JOIN TIP_DETAIL td ON tso.TIP_SUBJECT_OFFERED_KEY = td.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY GROUP BY tso.OFFER_DEPT_NAME;",
    "db_id": "dw",
    "mapping": {
      "department name": [
        "TIP_SUBJECT_OFFERED.OFFER_DEPT_NAME"
      ],
      "TIP subjects": [
        "TIP_SUBJECT_OFFERED.SUBJECT_ID"
      ],
      "enrolled students": [
        "TIP_SUBJECT_OFFERED.NUM_ENROLLED_STUDENTS"
      ],
      "rental new price": [
        "TIP_MATERIAL.RENTAL_NEW_PRICE"
      ]
    },
    "join_keys": [
      [
        "TIP_SUBJECT_OFFERED.TIP_SUBJECT_OFFERED_KEY",
        "TIP_DETAIL.TIP_SUBJECT_OFFERED_KEY"
      ],
      [
        "TIP_MATERIAL.TIP_MATERIAL_KEY",
        "TIP_DETAIL.TIP_MATERIAL_KEY"
      ]
    ]
  },
  {
    "question": "What are the details of courses offered in the current academic term, including the academic year, term code, hgn code, the total number of types of courses, the average number of units, the department name, the name and email address of the person in charge?",
    "sql": "SELECT CC.ACADEMIC_YEAR, CC.TERM_CODE, SO.HGN_CODE, COUNT(DISTINCT CC.SUBJECT_ID) AS TOTAL_COURSES, AVG(CC.TOTAL_UNITS) AS AVERAGE_UNITS, CC.DEPARTMENT_NAME, ED.FULL_NAME AS RESPONSIBLE_FACULTY_NAME, ED.EMAIL_ADDRESS AS RESPONSIBLE_FACULTY_EMAIL FROM COURSE_CATALOG_SUBJECT_OFFERED CC JOIN SUBJECT_OFFERED SO ON CC.SUBJECT_ID = SO.SUBJECT_ID JOIN ACADEMIC_TERMS AT ON CC.TERM_CODE = AT.TERM_CODE JOIN EMPLOYEE_DIRECTORY ED ON SO.RESPONSIBLE_FACULTY_MIT_ID = ED.MIT_ID WHERE AT.IS_CURRENT_TERM = 'Y' GROUP BY CC.ACADEMIC_YEAR, CC.TERM_CODE, SO.HGN_CODE, CC.DEPARTMENT_NAME, ED.FULL_NAME, ED.EMAIL_ADDRESS;",
    "db_id": "dw",
    "mapping": {
      "current academic term": [
        "ACADEMIC_TERMS.IS_CURRENT_TERM"
      ],
      "academic year": [
        "COURSE_CATALOG_SUBJECT_OFFERED.ACADEMIC_YEAR"
      ],
      "term code": [
        "COURSE_CATALOG_SUBJECT_OFFERED.TERM_CODE"
      ],
      "hgn code": [
        "SUBJECT_OFFERED.HGN_CODE"
      ],
      "courses": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_ID"
      ],
      "number of units": [
        "COURSE_CATALOG_SUBJECT_OFFERED.TOTAL_UNITS"
      ],
      "department name": [
        "COURSE_CATALOG_SUBJECT_OFFERED.DEPARTMENT_NAME"
      ],
      "name": [
        "EMPLOYEE_DIRECTORY.FULL_NAME"
      ],
      "email address": [
        "EMPLOYEE_DIRECTORY.EMAIL_ADDRESS"
      ]
    },
    "join_keys": [
      [
        "SUBJECT_OFFERED.SUBJECT_ID",
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_ID"
      ],
      [
        "COURSE_CATALOG_SUBJECT_OFFERED.TERM_CODE",
        "ACADEMIC_TERMS.TERM_CODE"
      ],
      [
        "EMPLOYEE_DIRECTORY.MIT_ID",
        "SUBJECT_OFFERED.RESPONSIBLE_FACULTY_MIT_ID"
      ]
    ]
  },
  {
    "question": "Retrieve information about the IAP subjects, including their titles, categories, session titles, session start and end time, sponsors, and total number of sessions.",
    "sql": "SELECT isd.ACTIVITY_TITLE, isc.IAP_CATEGORY_NAME, iss.SESSION_TITLE, iss.SESSION_START_TIME, iss.SESSION_END_TIME, isp.SPONSOR_NAME, COUNT(distinct iss.IAP_SUBJECT_SESSION_KEY) AS Total_Sessions FROM IAP_SUBJECT_DETAIL isd JOIN IAP_SUBJECT_CATEGORY isc ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY JOIN IAP_SUBJECT_SESSION iss ON isd.IAP_SUBJECT_SESSION_KEY = iss.IAP_SUBJECT_SESSION_KEY JOIN IAP_SUBJECT_SPONSOR isp ON isd.IAP_SUBJECT_SPONSOR_KEY = isp.IAP_SUBJECT_SPONSOR_KEY GROUP BY isd.ACTIVITY_TITLE, isc.IAP_CATEGORY_NAME, iss.SESSION_TITLE, iss.SESSION_START_TIME, iss.SESSION_END_TIME, isp.SPONSOR_NAME;",
    "db_id": "dw",
    "mapping": {
      "titles": [
        "IAP_SUBJECT_DETAIL.ACTIVITY_TITLE"
      ],
      "categories": [
        "IAP_SUBJECT_CATEGORY.IAP_CATEGORY_NAME"
      ],
      "session titles": [
        "IAP_SUBJECT_SESSION.SESSION_TITLE"
      ],
      "session start and end time": [
        "IAP_SUBJECT_SESSION.SESSION_START_TIME",
        "IAP_SUBJECT_SESSION.SESSION_END_TIME"
      ],
      "sponsors": [
        "IAP_SUBJECT_SPONSOR.SPONSOR_NAME"
      ],
      "sessions": [
        "IAP_SUBJECT_SESSION.IAP_SUBJECT_SESSION_KEY"
      ]
    },
    "join_keys": [
      [
        "IAP_SUBJECT_CATEGORY.IAP_SUBJECT_CATEGORY_KEY",
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_CATEGORY_KEY"
      ],
      [
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_SESSION_KEY",
        "IAP_SUBJECT_SESSION.IAP_SUBJECT_SESSION_KEY"
      ],
      [
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_SPONSOR_KEY",
        "IAP_SUBJECT_SPONSOR.IAP_SUBJECT_SPONSOR_KEY"
      ]
    ]
  },
  {
    "question": "Show the department names, the corresponding SIS subject code, subject code descriptions, graduate level, and the total number of courses per department.",
    "sql": "SELECT sd.DEPARTMENT_NAME, sc.SUBJECT_CODE, sc.SUBJECT_CODE_DESC, scd.GRADUATE_LEVEL, COUNT(DISTINCT sc.COURSE_NUMBER) OVER (PARTITION BY sd.DEPARTMENT_NAME) AS Total_Courses FROM SIS_DEPARTMENT sd JOIN SIS_COURSE_DESCRIPTION scd ON sd.DEPARTMENT_CODE = scd.DEPARTMENT JOIN SIS_SUBJECT_CODE sc ON scd.COURSE = sc.COURSE_NUMBER;",
    "db_id": "dw",
    "mapping": {
      "department names": [
        "SIS_DEPARTMENT.DEPARTMENT_NAME"
      ],
      "SIS subject code": [
        "SIS_SUBJECT_CODE.SUBJECT_CODE"
      ],
      "subject code descriptions": [
        "SIS_SUBJECT_CODE.SUBJECT_CODE_DESC"
      ],
      "graduate level": [
        "SIS_COURSE_DESCRIPTION.GRADUATE_LEVEL"
      ],
      "courses": [
        "SIS_SUBJECT_CODE.COURSE_NUMBER"
      ]
    },
    "join_keys": [
      [
        "SIS_COURSE_DESCRIPTION.DEPARTMENT",
        "SIS_DEPARTMENT.DEPARTMENT_CODE"
      ],
      [
        "SIS_SUBJECT_CODE.COURSE_NUMBER",
        "SIS_COURSE_DESCRIPTION.COURSE"
      ]
    ]
  },
  {
    "question": "For each term, list the term code, the term description, whether the term is current or not, and the total number of types of CIS courses.",
    "sql": "SELECT at.TERM_CODE, at.TERM_DESCRIPTION, at.IS_CURRENT_TERM2, COUNT(distinct at.SUBJECT_ID) AS Total_SUBJECTS FROM (SELECT at.*, SUBJECT_ID, CASE WHEN at.ACADEMIC_YEAR = EXTRACT(YEAR FROM SYSDATE) AND atp.IS_CURRENT_TERM = 'Y' THEN 'Y' ELSE 'N' END as IS_CURRENT_TERM2 FROM (SELECT ACADEMIC_TERMS_ALL.*, CASE WHEN TERM_CODE LIKE '%FA' THEN 'Y' END AS A ,CASE WHEN TERM_CODE LIKE '%JA' THEN 'Y' END AS B,CASE WHEN TERM_CODE LIKE '%SP' THEN 'Y' END AS C,CASE WHEN TERM_CODE LIKE '%SU' THEN 'Y' END AS D FROM ACADEMIC_TERMS_ALL) at LEFT OUTER JOIN ACADEMIC_TERM_PARAMETER atp ON at.TERM_CODE = atp.TERM_CODE LEFT OUTER JOIN CIS_COURSE_CATALOG ccc ON ccc.ACADEMIC_YEAR = at.ACADEMIC_YEAR AND (IS_OFFERED_FALL_TERM = at.A OR IS_OFFERED_IAP = at.B OR IS_OFFERED_SPRING_TERM = at.C OR IS_OFFERED_SPRING_TERM = at.C OR IS_OFFERED_SUMMER_TERM = at.D)) at GROUP BY at.TERM_CODE, at.TERM_DESCRIPTION, at.IS_CURRENT_TERM2;",
    "db_id": "dw",
    "mapping": {
      "term code": [
        "ACADEMIC_TERMS_ALL.TERM_CODE"
      ],
      "term description": [
        "ACADEMIC_TERMS_ALL.TERM_DESCRIPTION"
      ],
      "term is current or not": [
        "ACADEMIC_TERM_PARAMETER.IS_CURRENT_TERM"
      ],
      "CIS courses": [
        "CIS_COURSE_CATALOG.SUBJECT_ID"
      ]
    },
    "join_keys": []
  },
  {
    "question": "What is the author, school name, material status, total record counts, and total number of types of courses for each author and school?",
    "sql": "SELECT tm.AUTHOR, sd.SCHOOL_NAME, tms.TIP_MATERIAL_STATUS, SUM(td.RECORD_COUNT) AS Total_Record_Count , COUNT(distinct td.SUBJECT_ID) AS Total_Subject FROM TIP_DETAIL td JOIN (select TIP_MATERIAL_KEY, CASE WHEN INSTR(AUTHOR, ';') > 0 THEN SUBSTR(AUTHOR, 1, INSTR(AUTHOR, ';') - 1) ELSE AUTHOR END AS AUTHOR FROM TIP_MATERIAL) tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY JOIN TIP_SUBJECT_OFFERED tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN STUDENT_DEPARTMENT sd ON tso.OFFER_DEPT_CODE = sd.DEPARTMENT_CODE GROUP BY tm.AUTHOR, tms.TIP_MATERIAL_STATUS, sd.SCHOOL_NAME;",
    "db_id": "dw",
    "mapping": {
      "author": [
        "TIP_MATERIAL.AUTHOR"
      ],
      "school name": [
        "STUDENT_DEPARTMENT.SCHOOL_NAME"
      ],
      "material status": [
        "TIP_MATERIAL_STATUS.TIP_MATERIAL_STATUS"
      ],
      "record counts": [
        "TIP_DETAIL.RECORD_COUNT"
      ],
      "courses": [
        "TIP_DETAIL.SUBJECT_ID"
      ]
    },
    "join_keys": [
      [
        "TIP_MATERIAL_STATUS.TIP_MATERIAL_STATUS_KEY",
        "TIP_DETAIL.TIP_MATERIAL_STATUS_KEY"
      ],
      [
        "TIP_SUBJECT_OFFERED.TIP_SUBJECT_OFFERED_KEY",
        "TIP_DETAIL.TIP_SUBJECT_OFFERED_KEY"
      ],
      [
        "STUDENT_DEPARTMENT.DEPARTMENT_CODE",
        "TIP_SUBJECT_OFFERED.OFFER_DEPT_CODE"
      ]
    ]
  },
  {
    "question": "What is the course number, subject title, material status, the total, min, and max new shelf price, the total, min, and max used shelf price, total number of schools and the total number of materials for each TIP subject and material status?",
    "sql": "SELECT tso.COURSE_NUMBER, tso.SUBJECT_TITLE, tms.TIP_MATERIAL_STATUS, SUM(tm.NEW_SHELF_PRICE) as Total_New_Price, Min(tm.NEW_SHELF_PRICE) as Min_New_Price, Max(tm.NEW_SHELF_PRICE) as Max_New_Price, SUM(tm.USED_SHELF_PRICE) as Total_Used_Price, Min(tm.USED_SHELF_PRICE) as Min_Used_Price, Max(tm.USED_SHELF_PRICE) as Max_Used_Price, COUNT(DISTINCT OFFER_SCHOOL_NAME) AS Total_Num_Schools, COUNT(distinct td.TIP_MATERIAL_KEY) AS Total_Num_Materials FROM TIP_DETAIL td JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY JOIN TIP_SUBJECT_OFFERED tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY GROUP BY tso.COURSE_NUMBER, tso.SUBJECT_TITLE, tms.TIP_MATERIAL_STATUS;",
    "db_id": "dw",
    "mapping": {
      "course number": [
        "TIP_SUBJECT_OFFERED.COURSE_NUMBER"
      ],
      "subject title": [
        "TIP_SUBJECT_OFFERED.SUBJECT_TITLE"
      ],
      "material status": [
        "TIP_MATERIAL_STATUS.TIP_MATERIAL_STATUS"
      ],
      "new shelf price": [
        "TIP_MATERIAL.NEW_SHELF_PRICE"
      ],
      "used shelf price": [
        "TIP_MATERIAL.USED_SHELF_PRICE"
      ],
      "schools": [
        "TIP_SUBJECT_OFFERED.OFFER_SCHOOL_NAME"
      ],
      "materials": [
        "TIP_DETAIL.TIP_MATERIAL_KEY"
      ],
      "TIP subject": [
        "TIP_SUBJECT_OFFERED.SUBJECT_TITLE"
      ]
    },
    "join_keys": [
      [
        "TIP_DETAIL.TIP_MATERIAL_KEY",
        "TIP_MATERIAL.TIP_MATERIAL_KEY"
      ],
      [
        "TIP_DETAIL.TIP_MATERIAL_STATUS_KEY",
        "TIP_MATERIAL_STATUS.TIP_MATERIAL_STATUS_KEY"
      ],
      [
        "TIP_DETAIL.TIP_SUBJECT_OFFERED_KEY",
        "TIP_SUBJECT_OFFERED.TIP_SUBJECT_OFFERED_KEY"
      ]
    ]
  },
  {
    "question": "What is material status, the total number of materials, the total number of subjects, the total number of schools, and the most recent publication year for each material status?",
    "sql": "SELECT tms.TIP_MATERIAL_STATUS, COUNT(DISTINCT td.TIP_MATERIAL_KEY) AS Total_Materials, COUNT(DISTINCT td.SUBJECT_ID) AS Total_Subjects, COUNT(DISTINCT sd.SCHOOL_NAME) AS Total_Num_Schools, MAX(tm.YEAR) AS Most_Recent_Year FROM TIP_DETAIL td JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY JOIN TIP_SUBJECT_OFFERED tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN STUDENT_DEPARTMENT sd ON tso.OFFER_DEPT_CODE = sd.DEPARTMENT_CODE GROUP BY tms.TIP_MATERIAL_STATUS;",
    "db_id": "dw",
    "mapping": {
      "material status": [
        "TIP_MATERIAL_STATUS.TIP_MATERIAL_STATUS"
      ],
      "materials": [
        "TIP_DETAIL.TIP_MATERIAL_KEY"
      ],
      "subjects": [
        "TIP_DETAIL.SUBJECT_ID"
      ],
      "schools": [
        "STUDENT_DEPARTMENT.SCHOOL_NAME"
      ],
      "publication year": [
        "TIP_MATERIAL.YEAR"
      ]
    },
    "join_keys": [
      [
        "TIP_MATERIAL.TIP_MATERIAL_KEY",
        "TIP_DETAIL.TIP_MATERIAL_KEY"
      ],
      [
        "TIP_MATERIAL_STATUS.TIP_MATERIAL_STATUS_KEY",
        "TIP_DETAIL.TIP_MATERIAL_STATUS_KEY"
      ],
      [
        "TIP_DETAIL.TIP_SUBJECT_OFFERED_KEY",
        "TIP_SUBJECT_OFFERED.TIP_SUBJECT_OFFERED_KEY"
      ],
      [
        "STUDENT_DEPARTMENT.DEPARTMENT_CODE",
        "TIP_SUBJECT_OFFERED.OFFER_DEPT_CODE"
      ]
    ]
  },
  {
    "question": "What is the term description, whether the term is current or not, total number of types of TIP subjects offered and materials needed, the minimum and maximum number of enrolled students, the total number of schools offering subjects, and the total number of records for each term code?",
    "sql": "SELECT at.TERM_DESCRIPTION, at.IS_CURRENT_TERM, COUNT(DISTINCT tso.COURSE_NUMBER) AS Total_Courses, COUNT(DISTINCT tm.ISBN) AS Total_Materials, MIN(tso.NUM_ENROLLED_STUDENTS) AS Min_Enrolled_Students, MAX(tso.NUM_ENROLLED_STUDENTS) AS Max_Enrolled_Students, COUNT(DISTINCT OFFER_SCHOOL_NAME) AS Total_Num_Schools, SUM(td.RECORD_COUNT) AS Total_Records FROM ACADEMIC_TERMS_ALL at LEFT OUTER JOIN TIP_SUBJECT_OFFERED tso ON at.TERM_CODE = tso.TERM_CODE JOIN TIP_DETAIL td ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY GROUP BY at.TERM_CODE, at.TERM_DESCRIPTION, at.IS_CURRENT_TERM;",
    "db_id": "dw",
    "mapping": {
      "term description": [
        "ACADEMIC_TERMS_ALL.TERM_DESCRIPTION"
      ],
      "term is current or not": [
        "ACADEMIC_TERMS_ALL.IS_CURRENT_TERM"
      ],
      "TIP subjects": [
        "TIP_SUBJECT_OFFERED.COURSE_NUMBER"
      ],
      "materials": [
        "TIP_MATERIAL.ISBN"
      ],
      "enrolled students": [
        "TIP_SUBJECT_OFFERED.NUM_ENROLLED_STUDENTS"
      ],
      "schools": [
        "TIP_SUBJECT_OFFERED.OFFER_SCHOOL_NAME"
      ],
      "number of records": [
        "TIP_DETAIL.RECORD_COUNT"
      ],
      "term code": [
        "ACADEMIC_TERMS_ALL.TERM_CODE"
      ]
    },
    "join_keys": [
      [
        "ACADEMIC_TERMS_ALL.TERM_CODE",
        "TIP_SUBJECT_OFFERED.TERM_CODE"
      ],
      [
        "TIP_SUBJECT_OFFERED.TIP_SUBJECT_OFFERED_KEY",
        "TIP_DETAIL.TIP_SUBJECT_OFFERED_KEY"
      ],
      [
        "TIP_DETAIL.TIP_MATERIAL_KEY",
        "TIP_MATERIAL.TIP_MATERIAL_KEY"
      ],
      [
        "TIP_DETAIL.TIP_MATERIAL_STATUS_KEY",
        "TIP_MATERIAL_STATUS.TIP_MATERIAL_STATUS_KEY"
      ]
    ]
  },
  {
    "question": "List all buildings with their names, building numbers, building height, street address, city, state, HR department name, assignable square footage, total and average square footage, ordered in descending order of assignable, total, and average square footage.",
    "sql": "SELECT DISTINCT new.BUILDING_NAME, new.BUILDING_NUMBER, fb.BUILDING_HEIGHT, new.BUILDING_STREET_ADDRESS, fba.CITY, fba.STATE, new.HR_DEPARTMENT_NAME, new.BLDG_ASSIGNABLE_SQUARE_FOOTAGE, new.Total_Square_Footage, new.Avg_Square_Footage_Per_Room FROM (SELECT b.BUILDING_NAME, b.BUILDING_NUMBER, b.BUILDING_STREET_ADDRESS, fb.FAC_BUILDING_KEY, fo.HR_DEPARTMENT_NAME, b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE, SUM(fr.AREA) AS Total_Square_Footage, AVG(fr.AREA) AS Avg_Square_Footage_Per_Room FROM BUILDINGS b JOIN FAC_BUILDING fb ON b.BUILDING_KEY = fb.FAC_BUILDING_KEY JOIN FAC_ROOMS fr ON fb.FAC_BUILDING_KEY = fr.BUILDING_KEY JOIN FAC_ORGANIZATION fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY GROUP BY b.BUILDING_NAME, b.BUILDING_NUMBER, b.BUILDING_STREET_ADDRESS, fb.FAC_BUILDING_KEY, fo.HR_DEPARTMENT_NAME, b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE) new JOIN FAC_BUILDING_ADDRESS fba ON new.FAC_BUILDING_KEY = fba.BUILDING_KEY JOIN FAC_BUILDING fb ON new.FAC_BUILDING_KEY = fb.FAC_BUILDING_KEY WHERE fba.ADDRESS_PURPOSE = 'STREET' ORDER BY new.BLDG_ASSIGNABLE_SQUARE_FOOTAGE DESC, new.Total_Square_Footage DESC, new.Avg_Square_Footage_Per_Room DESC;",
    "db_id": "dw",
    "mapping": {
      "names": [
        "BUILDINGS.BUILDING_NAME"
      ],
      "building numbers": [
        "BUILDINGS.BUILDING_NUMBER"
      ],
      "building height": [
        "FAC_BUILDING.BUILDING_HEIGHT"
      ],
      "street address": [
        "BUILDINGS.BUILDING_STREET_ADDRESS"
      ],
      "city": [
        "FAC_BUILDING_ADDRESS.CITY"
      ],
      "state": [
        "FAC_BUILDING_ADDRESS.STATE"
      ],
      "HR department name": [
        "FAC_ORGANIZATION.HR_DEPARTMENT_NAME"
      ],
      "assignable square footage": [
        "BUILDINGS.BLDG_ASSIGNABLE_SQUARE_FOOTAGE"
      ],
      "square footage": [
        "FAC_ROOMS.AREA"
      ]
    },
    "join_keys": [
      [
        "FAC_BUILDING.FAC_BUILDING_KEY",
        "BUILDINGS.BUILDING_KEY"
      ],
      [
        "FAC_BUILDING.FAC_BUILDING_KEY",
        "FAC_ROOMS.BUILDING_KEY"
      ],
      [
        "FAC_ROOMS.ORGANIZATION_KEY",
        "FAC_ORGANIZATION.ORGANIZATION_KEY"
      ]
    ]
  },
  {
    "question": "For the 2023 Fall term, what are the unique term descriptions, subject titles along with their prerequisites, total number of types of subjects per term code, instructor of this course, and the number of types of courses ever taught by the instructor?",
    "sql": "SELECT DISTINCT at.TERM_DESCRIPTION, ccso.SUBJECT_TITLE, ccso.PREREQUISITES, COUNT(distinct ccso.SUBJECT_ID) OVER (PARTITION BY at.TERM_CODE) AS Total_Subjects, ccso.FALL_INSTRUCTORS, COUNT(distinct ccso.SUBJECT_ID) OVER (PARTITION BY ccso.FALL_INSTRUCTORS) AS Experience FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE WHERE ccso.TERM_CODE = '2023FA';",
    "db_id": "dw",
    "mapping": {
      "term descriptions": [
        "ACADEMIC_TERMS.TERM_DESCRIPTION"
      ],
      "subject titles": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_TITLE"
      ],
      "prerequisites": [
        "COURSE_CATALOG_SUBJECT_OFFERED.PREREQUISITES"
      ],
      "subjects": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_ID"
      ],
      "term code": [
        "ACADEMIC_TERMS.TERM_CODE",
        "COURSE_CATALOG_SUBJECT_OFFERED.TERM_CODE"
      ],
      "instructor": [
        "COURSE_CATALOG_SUBJECT_OFFERED.FALL_INSTRUCTORS"
      ],
      "courses": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_ID"
      ]
    },
    "join_keys": [
      [
        "COURSE_CATALOG_SUBJECT_OFFERED.TERM_CODE",
        "ACADEMIC_TERMS.TERM_CODE"
      ]
    ]
  },
  {
    "question": "Show the details of rooms including the full name of the rooms, the building names, floor numbers, the organizations occupying them, name of the departments occupying them, and the percentage of the room area over the assignable floor area and building.",
    "sql": "SELECT fr.ROOM_FULL_NAME, fb.BUILDING_NAME, ff.FLOOR, fo.ORGANIZATION_NAME, fo.HR_DEPARTMENT_NAME, CASE WHEN ff.ASSIGNABLE_AREA = 0 THEN 0 ELSE fr.AREA/ff.ASSIGNABLE_AREA END AS PERC_OF_ASG_FLOOR, CASE WHEN fb.ASSIGNABLE_AREA = 0 THEN 0 ELSE fr.AREA/fb.ASSIGNABLE_AREA END AS PERC_OF_ASG_BUILDING FROM FAC_ROOMS fr JOIN FAC_BUILDING fb ON fr.BUILDING_KEY = fb.FAC_BUILDING_KEY JOIN FAC_FLOOR ff ON fr.FLOOR_KEY = ff.FLOOR_KEY JOIN FAC_ORGANIZATION fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY;",
    "db_id": "dw",
    "mapping": {
      "full name of the rooms": [
        "FAC_ROOMS.ROOM_FULL_NAME"
      ],
      "building names": [
        "FAC_BUILDING.BUILDING_NAME"
      ],
      "floor numbers": [
        "FAC_FLOOR.FLOOR"
      ],
      "organizations": [
        "FAC_ORGANIZATION.ORGANIZATION_NAME"
      ],
      "name of the departments": [
        "FAC_ORGANIZATION.HR_DEPARTMENT_NAME"
      ],
      "room area": [
        "FAC_ROOMS.AREA"
      ],
      "assignable floor area": [
        "FAC_FLOOR.ASSIGNABLE_AREA"
      ]
    },
    "join_keys": [
      [
        "FAC_ROOMS.BUILDING_KEY",
        "FAC_BUILDING.FAC_BUILDING_KEY"
      ],
      [
        "FAC_ROOMS.FLOOR_KEY",
        "FAC_FLOOR.FLOOR_KEY"
      ],
      [
        "FAC_ROOMS.ORGANIZATION_KEY",
        "FAC_ORGANIZATION.ORGANIZATION_KEY"
      ]
    ]
  },
  {
    "question": "Show the details of rooms including the full name of the rooms, the building names, floor numbers, the organizations occupying them, name of the departments occupying them, and the percentage of the room area over the floor area and building.",
    "sql": "SELECT fr.ROOM_FULL_NAME, fb.BUILDING_NAME, ff.FLOOR, fo.ORGANIZATION_NAME, fo.HR_DEPARTMENT_NAME, CASE WHEN FLOOR_AREA = 0 THEN 0 ELSE fr.AREA/FLOOR_AREA END AS PERC_OF_FLOOR, CASE WHEN BUILDING_AREA = 0 THEN 0 ELSE fr.AREA/BUILDING_AREA END AS PERC_OF_BUILDING FROM (SELECT ROOM_FULL_NAME, BUILDING_KEY, FLOOR_KEY,ORGANIZATION_KEY, AREA, SUM(AREA) OVER (PARTITION BY FLOOR_KEY) AS FLOOR_AREA, SUM(AREA) OVER (PARTITION BY BUILDING_KEY) AS BUILDING_AREA FROM FAC_ROOMS) fr JOIN FAC_BUILDING fb ON fr.BUILDING_KEY = fb.FAC_BUILDING_KEY JOIN FAC_FLOOR ff ON fr.FLOOR_KEY = ff.FLOOR_KEY JOIN FAC_ORGANIZATION fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY;",
    "db_id": "dw",
    "mapping": {
      "full name": [
        "FAC_ROOMS.ROOM_FULL_NAME"
      ],
      "building names": [
        "FAC_BUILDING.BUILDING_NAME"
      ],
      "floor numbers": [
        "FAC_FLOOR.FLOOR"
      ],
      "organizations": [
        "FAC_ORGANIZATION.ORGANIZATION_NAME"
      ],
      "departments": [
        "FAC_ORGANIZATION.HR_DEPARTMENT_NAME"
      ],
      "room area": [
        "FAC_ROOMS.AREA"
      ],
      "floor area": [
        "FAC_ROOMS.AREA",
        "FAC_ROOMS.FLOOR_KEY"
      ]
    },
    "join_keys": []
  },
  {
    "question": "What are the academic year, and instructors names for courses offered in the academic year 2022, along with the total number of types of courses per instructor?",
    "sql": "SELECT ata.ACADEMIC_YEAR, ed.FULL_NAME, COUNT(distinct so.COURSE_NUMBER) AS Total_Courses FROM SUBJECT_OFFERED so JOIN ACADEMIC_TERMS_ALL ata ON so.TERM_CODE = ata.TERM_CODE JOIN EMPLOYEE_DIRECTORY ed ON so.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID WHERE ata.ACADEMIC_YEAR = 2022 GROUP BY ata.ACADEMIC_YEAR, ed.FULL_NAME;",
    "db_id": "dw",
    "mapping": {
      "academic year": [
        "ACADEMIC_TERMS_ALL.ACADEMIC_YEAR"
      ],
      "instructors names": [
        "EMPLOYEE_DIRECTORY.FULL_NAME"
      ],
      "courses": [
        "SUBJECT_OFFERED.COURSE_NUMBER"
      ]
    },
    "join_keys": [
      [
        "SUBJECT_OFFERED.TERM_CODE",
        "ACADEMIC_TERMS_ALL.TERM_CODE"
      ],
      [
        "SUBJECT_OFFERED.RESPONSIBLE_FACULTY_MIT_ID",
        "EMPLOYEE_DIRECTORY.MIT_ID"
      ]
    ]
  },
  {
    "question": "What are the building names, department names, organizations, their highest and lowest floor number, along with the total number of rooms per each building key?",
    "sql": "SELECT fb.BUILDING_NAME, fo.HR_DEPARTMENT_NAME, fo.ORGANIZATION, MAX(ff.LEVEL_ID) as MAX_FLOOR, MIN(ff.LEVEL_ID) as MIN_FLOOR, COUNT(distinct fr.FAC_ROOM_KEY) AS Total_Rooms FROM FAC_BUILDING fb JOIN FAC_ROOMS fr ON fb.FAC_BUILDING_KEY = fr.BUILDING_KEY JOIN FAC_FLOOR ff ON fr.FLOOR_KEY = ff.FLOOR_KEY JOIN FAC_ORGANIZATION fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY GROUP BY fb.FAC_BUILDING_KEY, fb.BUILDING_NAME, fo.HR_DEPARTMENT_NAME, fo.ORGANIZATION;",
    "db_id": "dw",
    "mapping": {
      "building names": [
        "FAC_BUILDING.BUILDING_NAME"
      ],
      "department names": [
        "FAC_ORGANIZATION.HR_DEPARTMENT_NAME"
      ],
      "organizations": [
        "FAC_ORGANIZATION.ORGANIZATION"
      ],
      "floor number": [
        "FAC_FLOOR.LEVEL_ID"
      ],
      "room": [
        "FAC_ROOMS.FAC_ROOM_KEY"
      ],
      "building key": [
        "FAC_BUILDING.FAC_BUILDING_KEY"
      ]
    },
    "join_keys": [
      [
        "FAC_BUILDING.FAC_BUILDING_KEY",
        "FAC_ROOMS.BUILDING_KEY"
      ],
      [
        "FAC_FLOOR.FLOOR_KEY",
        "FAC_ROOMS.FLOOR_KEY"
      ],
      [
        "FAC_ORGANIZATION.ORGANIZATION_KEY",
        "FAC_ROOMS.ORGANIZATION_KEY"
      ]
    ]
  },
  {
    "question": "What are the details of the students including their full names, emails, department names, department phone numbers, school names, and the total number of students per department and school?",
    "sql": "SELECT DISTINCT msd.FULL_NAME, msd.EMAIL_ADDRESS, sd.DEPARTMENT_NAME, sad.DEPARTMENT_PHONE_NUMBER, sd.SCHOOL_NAME, COUNT(distinct msd.EMAIL_ADDRESS) OVER (PARTITION BY sd.DEPARTMENT_CODE)AS Total_Students_DEPT, COUNT(distinct msd.EMAIL_ADDRESS) OVER (PARTITION BY sd.SCHOOL_CODE) AS Total_Students_SCHOOLS FROM MIT_STUDENT_DIRECTORY msd JOIN SIS_DEPARTMENT sd ON msd.DEPARTMENT = sd.DEPARTMENT_CODE JOIN SIS_ADMIN_DEPARTMENT sad ON sd.DEPARTMENT_CODE = sad.SIS_ADMIN_DEPARTMENT_CODE;",
    "db_id": "dw",
    "mapping": {
      "full names": [
        "MIT_STUDENT_DIRECTORY.FULL_NAME"
      ],
      "emails": [
        "MIT_STUDENT_DIRECTORY.EMAIL_ADDRESS"
      ],
      "department names": [
        "SIS_DEPARTMENT.DEPARTMENT_NAME"
      ],
      "department phone numbers": [
        "SIS_ADMIN_DEPARTMENT.DEPARTMENT_PHONE_NUMBER"
      ],
      "school names": [
        "SIS_DEPARTMENT.SCHOOL_NAME"
      ],
      "department": [
        "SIS_DEPARTMENT.DEPARTMENT_CODE"
      ],
      "school": [
        "SIS_DEPARTMENT.SCHOOL_CODE"
      ]
    },
    "join_keys": [
      [
        "MIT_STUDENT_DIRECTORY.DEPARTMENT",
        "SIS_DEPARTMENT.DEPARTMENT_CODE"
      ],
      [
        "SIS_ADMIN_DEPARTMENT.SIS_ADMIN_DEPARTMENT_CODE",
        "SIS_DEPARTMENT.DEPARTMENT_CODE"
      ]
    ]
  },
  {
    "question": "What are the unique titles of subjects offered in the fall term along with their instructor names, instructor emails, and the total number of types of subjects per instructor?",
    "sql": "SELECT DISTINCT ccso.SUBJECT_TITLE, e.FULL_NAME AS INSTRUCTOR, e.EMAIL_ADDRESS, COUNT(distinct ccso.SUBJECT_ID) OVER (PARTITION BY ccso.FALL_INSTRUCTORS) AS Total_Subjects FROM EMPLOYEE_DIRECTORY e JOIN COURSE_CATALOG_SUBJECT_OFFERED ccso ON ccso.RESPONSIBLE_FACULTY_MIT_ID = e.MIT_ID JOIN ACADEMIC_TERMS_ALL at ON ccso.TERM_CODE = at.TERM_CODE WHERE at.TERM_CODE LIKE '%FA';",
    "db_id": "dw",
    "mapping": {
      "titles": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_TITLE"
      ],
      "subjects": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_ID"
      ],
      "fall term": [
        "ACADEMIC_TERMS_ALL.TERM_CODE",
        "COURSE_CATALOG_SUBJECT_OFFERED.FALL_INSTRUCTORS"
      ],
      "instructor names": [
        "EMPLOYEE_DIRECTORY.FULL_NAME"
      ],
      "instructor emails": [
        "EMPLOYEE_DIRECTORY.EMAIL_ADDRESS"
      ]
    },
    "join_keys": [
      [
        "COURSE_CATALOG_SUBJECT_OFFERED.RESPONSIBLE_FACULTY_MIT_ID",
        "EMPLOYEE_DIRECTORY.MIT_ID"
      ],
      [
        "COURSE_CATALOG_SUBJECT_OFFERED.TERM_CODE",
        "ACADEMIC_TERMS_ALL.TERM_CODE"
      ]
    ]
  },
  {
    "question": "List the building names, names of HR departments occupying them, the total gross square footage, the total and average assignable square footage, and the built year per building key.",
    "sql": "SELECT b.BUILDING_NAME, fo.HR_DEPARTMENT_NAME, SUM(b.BLDG_GROSS_SQUARE_FOOTAGE) AS Total_Gross_Sq_Ft, SUM(b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE) AS Total_Assignable_Sq_Ft, AVG(b.BLDG_ASSIGNABLE_SQUARE_FOOTAGE) AS Avg_Assignable_Sq_Ft, EXTRACT(YEAR FROM TO_DATE(fb.DATE_BUILT, 'MM/DD/YYYY')) AS Year_Built FROM BUILDINGS b JOIN FAC_BUILDING fb ON b.BUILDING_KEY = fb.FAC_BUILDING_KEY JOIN FAC_ROOMS fr ON fb.FAC_BUILDING_KEY = fr.BUILDING_KEY JOIN FAC_ORGANIZATION fo ON fr.ORGANIZATION_KEY = fo.ORGANIZATION_KEY GROUP BY b.BUILDING_KEY, b.BUILDING_NAME, fo.HR_DEPARTMENT_NAME, fb.DATE_BUILT;",
    "db_id": "dw",
    "mapping": {
      "building names": [
        "BUILDINGS.BUILDING_NAME"
      ],
      "names of HR departments": [
        "FAC_ORGANIZATION.HR_DEPARTMENT_NAME"
      ],
      "gross square footage": [
        "BUILDINGS.BLDG_GROSS_SQUARE_FOOTAGE"
      ],
      "assignable square footage": [
        "BUILDINGS.BLDG_ASSIGNABLE_SQUARE_FOOTAGE"
      ],
      "built year": [
        "FAC_BUILDING.DATE_BUILT"
      ],
      "building key": [
        "BUILDINGS.BUILDING_KEY"
      ]
    },
    "join_keys": [
      [
        "BUILDINGS.BUILDING_KEY",
        "FAC_BUILDING.FAC_BUILDING_KEY"
      ],
      [
        "FAC_BUILDING.FAC_BUILDING_KEY",
        "FAC_ROOMS.BUILDING_KEY"
      ],
      [
        "FAC_ROOMS.ORGANIZATION_KEY",
        "FAC_ORGANIZATION.ORGANIZATION_KEY"
      ]
    ]
  },
  {
    "question": "Retrieve the titles of subjects offered in the summer term along with their descriptions, responsible faculty names, email address, building name, room name, floor level, building street address, and the total number of types of courses per departmnet.",
    "sql": "SELECT ccso.SUBJECT_TITLE, ccso.SUBJECT_DESCRIPTION, ccso.RESPONSIBLE_FACULTY_NAME, ed.EMAIL_ADDRESS, b.BUILDING_NAME, fr.ROOM_FULL_NAME, ff.LEVEL_ID, b.BUILDING_STREET_ADDRESS, COUNT(DISTINCT ccso.SUBJECT_ID) OVER (PARTITION BY ccso.DEPARTMENT_CODE) AS Total_Courses FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN EMPLOYEE_DIRECTORY ed ON ccso.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID JOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE JOIN FAC_ROOMS fr ON ccso.MEET_PLACE = fr.FAC_ROOM_KEY JOIN FAC_FLOOR ff ON ff.FLOOR_KEY = fr.FLOOR_KEY JOIN BUILDINGS b ON fr.BUILDING_KEY = b.BUILDING_KEY JOIN FAC_BUILDING_ADDRESS fba ON fba.BUILDING_KEY = fr.BUILDING_KEY WHERE at.TERM_CODE LIKE '%SU' AND fba.ADDRESS_PURPOSE = 'STREET';",
    "db_id": "dw",
    "mapping": {
      "titles of subjects": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_TITLE"
      ],
      "summer term": [
        "ACADEMIC_TERMS.TERM_CODE"
      ],
      "descriptions": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_DESCRIPTION"
      ],
      "responsible faculty names": [
        "COURSE_CATALOG_SUBJECT_OFFERED.RESPONSIBLE_FACULTY_NAME"
      ],
      "email address": [
        "EMPLOYEE_DIRECTORY.EMAIL_ADDRESS"
      ],
      "building name": [
        "BUILDINGS.BUILDING_NAME"
      ],
      "room name": [
        "FAC_ROOMS.ROOM_FULL_NAME"
      ],
      "floor level": [
        "FAC_FLOOR.LEVEL_ID"
      ],
      "building street address": [
        "BUILDINGS.BUILDING_STREET_ADDRESS",
        "FAC_BUILDING_ADDRESS.ADDRESS_PURPOSE"
      ],
      "courses": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_ID"
      ],
      "department": [
        "COURSE_CATALOG_SUBJECT_OFFERED.DEPARTMENT_CODE"
      ]
    },
    "join_keys": [
      [
        "COURSE_CATALOG_SUBJECT_OFFERED.RESPONSIBLE_FACULTY_MIT_ID",
        "EMPLOYEE_DIRECTORY.MIT_ID"
      ],
      [
        "ACADEMIC_TERMS.TERM_CODE",
        "COURSE_CATALOG_SUBJECT_OFFERED.TERM_CODE"
      ],
      [
        "COURSE_CATALOG_SUBJECT_OFFERED.MEET_PLACE",
        "FAC_ROOMS.FAC_ROOM_KEY"
      ],
      [
        "FAC_ROOMS.FLOOR_KEY",
        "FAC_FLOOR.FLOOR_KEY"
      ],
      [
        "FAC_ROOMS.BUILDING_KEY",
        "BUILDINGS.BUILDING_KEY"
      ],
      [
        "FAC_ROOMS.BUILDING_KEY",
        "FAC_BUILDING_ADDRESS.BUILDING_KEY"
      ]
    ]
  },
  {
    "question": "For each term code, list the term description, attribute desciption, department name, school name, and the number of subjects in the area of humanities, arts and social sciences.",
    "sql": "SELECT ata.TERM_DESCRIPTION, ccso.HASS_ATTRIBUTE_DESC, sd.DEPARTMENT_NAME, sd.SCHOOL_NAME, COUNT(distinct ccso.SUBJECT_ID) OVER (PARTITION BY ata.TERM_CODE, cha.CIS_ATTRIBUTE_GROUP) AS Total_Subjects FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN CIS_HASS_ATTRIBUTE cha ON ccso.HASS_ATTRIBUTE = cha.HASS_ATTRIBUTE JOIN SIS_DEPARTMENT sd ON ccso.DEPARTMENT_CODE = sd.DEPARTMENT_CODE JOIN ACADEMIC_TERMS_ALL ata ON ccso.TERM_CODE = ata.TERM_CODE WHERE cha.CIS_ATTRIBUTE_GROUP = 'H';",
    "db_id": "dw",
    "mapping": {
      "term code": [
        "ACADEMIC_TERMS_ALL.TERM_CODE"
      ],
      "term description": [
        "ACADEMIC_TERMS_ALL.TERM_DESCRIPTION"
      ],
      "attribute desciption": [
        "COURSE_CATALOG_SUBJECT_OFFERED.HASS_ATTRIBUTE_DESC"
      ],
      "department name": [
        "SIS_DEPARTMENT.DEPARTMENT_NAME"
      ],
      "school name": [
        "SIS_DEPARTMENT.SCHOOL_NAME"
      ],
      "subjects": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_ID"
      ],
      "area of humanities, arts and social studies": [
        "CIS_HASS_ATTRIBUTE.CIS_ATTRIBUTE_GROUP"
      ]
    },
    "join_keys": [
      [
        "CIS_HASS_ATTRIBUTE.HASS_ATTRIBUTE",
        "COURSE_CATALOG_SUBJECT_OFFERED.HASS_ATTRIBUTE"
      ],
      [
        "COURSE_CATALOG_SUBJECT_OFFERED.DEPARTMENT_CODE",
        "SIS_DEPARTMENT.DEPARTMENT_CODE"
      ],
      [
        "ACADEMIC_TERMS_ALL.TERM_CODE",
        "COURSE_CATALOG_SUBJECT_OFFERED.TERM_CODE"
      ]
    ]
  },
  {
    "question": "List building names, their height, street address, city, state, postal code, their gross and assignable square footage, the smallest and largest floor level and the total area of all rooms for each building key.",
    "sql": "SELECT fb.BUILDING_NAME, fb.BUILDING_HEIGHT, b.BUILDING_STREET_ADDRESS, fba.CITY, fba.STATE, fba.POSTAL_CODE, fb.EXT_GROSS_AREA, fb.ASSIGNABLE_AREA, MIN(ff.LEVEL_ID) as SMALLEST_FLOOR, MAX(LEVEL_ID) AS HIGHEST_FLOOR, SUM(fr.AREA) AS Total_Room_Area FROM FAC_BUILDING fb JOIN FAC_BUILDING_ADDRESS fba ON fb.FAC_BUILDING_KEY = fba.BUILDING_KEY JOIN FAC_FLOOR ff ON fb.FAC_BUILDING_KEY = ff.BUILDING_KEY JOIN FAC_ROOMS fr ON ff.FLOOR_KEY = fr.FLOOR_KEY JOIN BUILDINGS b ON b.BUILDING_KEY = fb.FAC_BUILDING_KEY WHERE fba.ADDRESS_PURPOSE = 'STREET' GROUP BY fb.FAC_BUILDING_KEY, fb.BUILDING_NAME, fb.BUILDING_HEIGHT, fba.CITY, fba.POSTAL_CODE, fba.STATE, b.BUILDING_STREET_ADDRESS, fb.EXT_GROSS_AREA, fb.ASSIGNABLE_AREA;",
    "db_id": "dw",
    "mapping": {
      "building names": [
        "FAC_BUILDING.BUILDING_NAME"
      ],
      "height": [
        "FAC_BUILDING.BUILDING_HEIGHT"
      ],
      "street address": [
        "BUILDINGS.BUILDING_STREET_ADDRESS",
        "FAC_BUILDING_ADDRESS.ADDRESS_PURPOSE"
      ],
      "city": [
        "FAC_BUILDING_ADDRESS.CITY"
      ],
      "state": [
        "FAC_BUILDING_ADDRESS.STATE"
      ],
      "postal code": [
        "FAC_BUILDING_ADDRESS.POSTAL_CODE"
      ],
      "gross square footage": [
        "FAC_BUILDING.EXT_GROSS_AREA"
      ],
      "assignable square footage": [
        "FAC_BUILDING.ASSIGNABLE_AREA"
      ],
      "floor level": [
        "FAC_FLOOR.LEVEL_ID"
      ],
      "area": [
        "FAC_ROOMS.AREA"
      ],
      "building key": [
        "FAC_BUILDING.FAC_BUILDING_KEY"
      ]
    },
    "join_keys": [
      [
        "FAC_BUILDING.FAC_BUILDING_KEY",
        "FAC_BUILDING_ADDRESS.BUILDING_KEY"
      ],
      [
        "FAC_BUILDING.FAC_BUILDING_KEY",
        "FAC_FLOOR.BUILDING_KEY"
      ],
      [
        "FAC_FLOOR.FLOOR_KEY",
        "FAC_ROOMS.FLOOR_KEY"
      ],
      [
        "FAC_BUILDING.FAC_BUILDING_KEY",
        "BUILDINGS.BUILDING_KEY"
      ]
    ]
  },
  {
    "question": "What is the category title, version, department name, school name, total number of courses for each course level, and the total number of degree-granting courses for each CIP category code?",
    "sql": "SELECT c.CATEGORY_TITLE, c.VERSION, sd.DEPARTMENT_NAME, sd.SCHOOL_NAME, SUM(CASE WHEN scd.COURSE_LEVEL = 'U' THEN 1 ELSE 0 END) AS Total_U_Courses, SUM(CASE WHEN scd.COURSE_LEVEL = 'G' THEN 1 ELSE 0 END) AS Total_G_Courses, SUM(CASE WHEN scd.IS_DEGREE_GRANTING = 'Y' THEN 1 ELSE 0 END) AS Total_Degree_Granting_Courses FROM CIP c JOIN SIS_COURSE_DESCRIPTION scd ON c.PROGRAM_CODE = scd.CIP_PROGRAM_CODE JOIN SIS_DEPARTMENT sd ON scd.DEPARTMENT = sd.DEPARTMENT_CODE GROUP BY c.CATEGORY_CODE, c.CATEGORY_TITLE, c.VERSION, sd.DEPARTMENT_NAME, sd.SCHOOL_NAME;",
    "db_id": "dw",
    "mapping": {
      "category title": [
        "CIP.CATEGORY_TITLE"
      ],
      "version": [
        "CIP.VERSION"
      ],
      "department name": [
        "SIS_DEPARTMENT.DEPARTMENT_NAME"
      ],
      "school name": [
        "SIS_DEPARTMENT.SCHOOL_NAME"
      ],
      "course level": [
        "SIS_COURSE_DESCRIPTION.COURSE_LEVEL"
      ],
      "degree-granting courses": [
        "SIS_COURSE_DESCRIPTION.IS_DEGREE_GRANTING"
      ],
      "CIP category code": [
        "CIP.CATEGORY_CODE"
      ]
    },
    "join_keys": [
      [
        "SIS_COURSE_DESCRIPTION.CIP_PROGRAM_CODE",
        "CIP.PROGRAM_CODE"
      ],
      [
        "SIS_COURSE_DESCRIPTION.DEPARTMENT",
        "SIS_DEPARTMENT.DEPARTMENT_CODE"
      ]
    ]
  },
  {
    "question": "What is the total number of library materials, the minimum and maximum publication years, and the total number of materials status for each course name?",
    "sql": "SELECT COUNT(distinct lrc.CATALOG_SYSTEM_NUMBER) AS Total_Materials, MIN(lrc.CATALOG_YEAR) AS Min_Publication_Year, MAX(lrc.CATALOG_YEAR) AS Max_Publication_Year, COUNT(DISTINCT lms.LIBRARY_MATERIAL_STATUS) AS Total_Statuses FROM LIBRARY_COURSE_INSTRUCTOR lci JOIN LIBRARY_RESERVE_MATRL_DETAIL lrmd ON lci.LIBRARY_COURSE_INSTRUCTOR_KEY = lrmd.LIBRARY_COURSE_INSTRUCTOR_KEY JOIN LIBRARY_RESERVE_CATALOG lrc ON lrmd.LIBRARY_RESERVE_CATALOG_KEY = lrc.LIBRARY_RESERVE_CATALOG_KEY JOIN LIBRARY_MATERIAL_STATUS lms ON lrmd.LIBRARY_MATERIAL_STATUS_KEY = lms.LIBRARY_MATERIAL_STATUS_KEY GROUP BY lci.COURSE_NAME;",
    "db_id": "dw",
    "mapping": {
      "library materials": [
        "LIBRARY_RESERVE_CATALOG.CATALOG_SYSTEM_NUMBER"
      ],
      "publication years": [
        "LIBRARY_RESERVE_CATALOG.CATALOG_YEAR"
      ],
      "materials status": [
        "LIBRARY_MATERIAL_STATUS.LIBRARY_MATERIAL_STATUS"
      ],
      "course name": [
        "LIBRARY_COURSE_INSTRUCTOR.COURSE_NAME"
      ]
    },
    "join_keys": [
      [
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_COURSE_INSTRUCTOR_KEY",
        "LIBRARY_COURSE_INSTRUCTOR.LIBRARY_COURSE_INSTRUCTOR_KEY"
      ],
      [
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_RESERVE_CATALOG_KEY",
        "LIBRARY_RESERVE_CATALOG.LIBRARY_RESERVE_CATALOG_KEY"
      ],
      [
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_MATERIAL_STATUS_KEY",
        "LIBRARY_MATERIAL_STATUS.LIBRARY_MATERIAL_STATUS_KEY"
      ]
    ]
  },
  {
    "question": "What is the total number of library reserve materials, the minimum and maximum publication years, and the total number of enrolled students for each course instructor?",
    "sql": "SELECT COUNT(distinct lrc.CATALOG_SYSTEM_NUMBER) AS Total_Materials, MIN(lrc.CATALOG_YEAR) AS Min_Publication_Year, MAX(lrc.CATALOG_YEAR) AS Max_Publication_Year, SUM(lso.NUM_ENROLLED_STUDENTS) AS Total_Enrolled_Students FROM LIBRARY_COURSE_INSTRUCTOR lci JOIN LIBRARY_RESERVE_MATRL_DETAIL lrmd ON lci.LIBRARY_COURSE_INSTRUCTOR_KEY = lrmd.LIBRARY_COURSE_INSTRUCTOR_KEY JOIN LIBRARY_RESERVE_CATALOG lrc ON lrmd.LIBRARY_RESERVE_CATALOG_KEY = lrc.LIBRARY_RESERVE_CATALOG_KEY JOIN LIBRARY_SUBJECT_OFFERED lso ON lrmd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY GROUP BY lci.INSTRUCTOR_NAME;",
    "db_id": "dw",
    "mapping": {
      "library reserve materials": [
        "LIBRARY_RESERVE_CATALOG.CATALOG_SYSTEM_NUMBER"
      ],
      "publication years": [
        "LIBRARY_RESERVE_CATALOG.CATALOG_YEAR"
      ],
      "enrolled students": [
        "LIBRARY_SUBJECT_OFFERED.NUM_ENROLLED_STUDENTS"
      ],
      "course instructor": [
        "LIBRARY_COURSE_INSTRUCTOR.INSTRUCTOR_NAME"
      ]
    },
    "join_keys": [
      [
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_COURSE_INSTRUCTOR_KEY",
        "LIBRARY_COURSE_INSTRUCTOR.LIBRARY_COURSE_INSTRUCTOR_KEY"
      ],
      [
        "LIBRARY_RESERVE_CATALOG.LIBRARY_RESERVE_CATALOG_KEY",
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_RESERVE_CATALOG_KEY"
      ],
      [
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_SUBJECT_OFFERED_KEY",
        "LIBRARY_SUBJECT_OFFERED.LIBRARY_SUBJECT_OFFERED_KEY"
      ]
    ]
  },
  {
    "question": "What is the material status, term description, total number of courses and materials, occurences in departments and school, and the total number of instructors for each library material status code and term code?",
    "sql": "SELECT lms.LIBRARY_MATERIAL_STATUS, ata.TERM_DESCRIPTION, COUNT(DISTINCT lso.COURSE_NUMBER) AS Total_Courses, COUNT(DISTINCT lrc.CATALOG_SYSTEM_NUMBER) AS Total_Materials, COUNT(DISTINCT lso.OFFER_DEPT_CODE), COUNT(DISTINCT lso.OFFER_SCHOOL_NAME), COUNT(DISTINCT lci.INSTRUCTOR_NAME) AS Total_Instructors FROM LIBRARY_MATERIAL_STATUS lms JOIN LIBRARY_RESERVE_MATRL_DETAIL lrmd ON lms.LIBRARY_MATERIAL_STATUS_KEY = lrmd.LIBRARY_MATERIAL_STATUS_KEY JOIN LIBRARY_SUBJECT_OFFERED lso ON lrmd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY JOIN LIBRARY_COURSE_INSTRUCTOR lci ON lrmd.LIBRARY_COURSE_INSTRUCTOR_KEY = lci.LIBRARY_COURSE_INSTRUCTOR_KEY JOIN LIBRARY_RESERVE_CATALOG lrc ON lrmd.LIBRARY_RESERVE_CATALOG_KEY = lrc.LIBRARY_RESERVE_CATALOG_KEY JOIN ACADEMIC_TERMS_ALL ata ON ata.TERM_CODE = lso.TERM_CODE GROUP BY lms.LIBRARY_MATERIAL_STATUS_CODE, lms.LIBRARY_MATERIAL_STATUS, lso.TERM_CODE, ata.TERM_DESCRIPTION;",
    "db_id": "dw",
    "mapping": {
      "material status": [
        "LIBRARY_MATERIAL_STATUS.LIBRARY_MATERIAL_STATUS"
      ],
      "term description": [
        "ACADEMIC_TERMS_ALL.TERM_DESCRIPTION"
      ],
      "courses": [
        "LIBRARY_SUBJECT_OFFERED.COURSE_NUMBER"
      ],
      "materials": [
        "LIBRARY_RESERVE_CATALOG.CATALOG_SYSTEM_NUMBER"
      ],
      "departments": [
        "LIBRARY_SUBJECT_OFFERED.OFFER_DEPT_CODE"
      ],
      "school": [
        "LIBRARY_SUBJECT_OFFERED.OFFER_SCHOOL_NAME"
      ],
      "instructors": [
        "LIBRARY_COURSE_INSTRUCTOR.INSTRUCTOR_NAME"
      ],
      "library material status code": [
        "LIBRARY_MATERIAL_STATUS.LIBRARY_MATERIAL_STATUS_CODE"
      ],
      "term code": [
        "LIBRARY_SUBJECT_OFFERED.TERM_CODE"
      ]
    },
    "join_keys": [
      [
        "LIBRARY_MATERIAL_STATUS.LIBRARY_MATERIAL_STATUS_KEY",
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_MATERIAL_STATUS_KEY"
      ],
      [
        "LIBRARY_SUBJECT_OFFERED.LIBRARY_SUBJECT_OFFERED_KEY",
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_SUBJECT_OFFERED_KEY"
      ],
      [
        "LIBRARY_COURSE_INSTRUCTOR.LIBRARY_COURSE_INSTRUCTOR_KEY",
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_COURSE_INSTRUCTOR_KEY"
      ],
      [
        "LIBRARY_RESERVE_CATALOG.LIBRARY_RESERVE_CATALOG_KEY",
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_RESERVE_CATALOG_KEY"
      ],
      [
        "ACADEMIC_TERMS_ALL.TERM_CODE",
        "LIBRARY_SUBJECT_OFFERED.TERM_CODE"
      ]
    ]
  },
  {
    "question": "List all space units, their floor and building name, building street address, their space usage, and the number of organizations and space units on the same building and floor.",
    "sql": "SELECT DISTINCT su.SPACE_UNIT, sf.FLOOR, b.BUILDING_NAME, b.BUILDING_STREET_ADDRESS, su2.SPACE_USAGE, COUNT(DISTINCT fo.FCLT_ORGANIZATION_KEY) OVER (PARTITION BY sd.FLOOR_KEY, sd.BUILDING_KEY) AS Total_Organizations, COUNT(DISTINCT su.SPACE_UNIT) OVER (PARTITION BY sd.FLOOR_KEY, sd.BUILDING_KEY) AS Total_Space_Units FROM SPACE_UNIT su JOIN SPACE_DETAIL sd ON su.SPACE_UNIT_KEY = sd.SPACE_UNIT_KEY JOIN SPACE_USAGE su2 ON su2.SPACE_USAGE_KEY = sd.SPACE_USAGE_KEY JOIN SPACE_FLOOR sf ON sd.FLOOR_KEY = sf.FLOOR_KEY JOIN BUILDINGS b ON b.BUILDING_KEY = sd.BUILDING_KEY JOIN FCLT_ORGANIZATION fo ON fo.FCLT_ORGANIZATION_KEY = su.FCLT_ORGANIZATION_KEY JOIN FCLT_BUILDING_ADDRESS fba ON fba.FCLT_BUILDING_KEY = b.BUILDING_KEY WHERE fba.ADDRESS_PURPOSE = 'STREET';",
    "db_id": "dw",
    "mapping": {
      "space units": [
        "SPACE_UNIT.SPACE_UNIT"
      ],
      "floor": [
        "SPACE_FLOOR.FLOOR"
      ],
      "building name": [
        "BUILDINGS.BUILDING_NAME"
      ],
      "building street address": [
        "BUILDINGS.BUILDING_STREET_ADDRESS",
        "FCLT_BUILDING_ADDRESS.ADDRESS_PURPOSE"
      ],
      "space usage": [
        "SPACE_USAGE.SPACE_USAGE"
      ],
      "organizations": [
        "FCLT_ORGANIZATION.FCLT_ORGANIZATION_KEY"
      ]
    },
    "join_keys": [
      [
        "SPACE_DETAIL.SPACE_UNIT_KEY",
        "SPACE_UNIT.SPACE_UNIT_KEY"
      ],
      [
        "SPACE_USAGE.SPACE_USAGE_KEY",
        "SPACE_DETAIL.SPACE_USAGE_KEY"
      ],
      [
        "SPACE_DETAIL.FLOOR_KEY",
        "SPACE_FLOOR.FLOOR_KEY"
      ],
      [
        "SPACE_DETAIL.BUILDING_KEY",
        "BUILDINGS.BUILDING_KEY"
      ],
      [
        "FCLT_ORGANIZATION.FCLT_ORGANIZATION_KEY",
        "SPACE_UNIT.FCLT_ORGANIZATION_KEY"
      ],
      [
        "BUILDINGS.BUILDING_KEY",
        "FCLT_BUILDING_ADDRESS.FCLT_BUILDING_KEY"
      ]
    ]
  },
  {
    "question": "For every distinct mailing list with more than 1000 people, provide its name, whether it is a mailing list, whether it is a moira group, whether it is a NFS group, the owner of the mailing list, and the number of people in the list.",
    "sql": "SELECT DISTINCT ml.MOIRA_LIST_NAME, ml.IS_MOIRA_MAILING_LIST, ml.IS_MOIRA_GROUP, ml.IS_NFS_GROUP, mlo.OWNER, COUNT(mld.MOIRA_LIST_MEMBER) AS occurrences FROM MOIRA_LIST_DETAIL mld JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY GROUP BY ml.MOIRA_LIST_NAME, ml.IS_MOIRA_MAILING_LIST, ml.IS_MOIRA_GROUP, ml.IS_NFS_GROUP, mlo.OWNER HAVING COUNT(mld.MOIRA_LIST_MEMBER) > 1000;",
    "db_id": "dw",
    "mapping": {
      "name": [
        "MOIRA_LIST.MOIRA_LIST_NAME"
      ],
      "mailing list": [
        "MOIRA_LIST.IS_MOIRA_MAILING_LIST"
      ],
      "moira group": [
        "MOIRA_LIST.IS_MOIRA_GROUP"
      ],
      "NFS group": [
        "MOIRA_LIST.IS_NFS_GROUP"
      ],
      "owner": [
        "MOIRA_LIST_OWNER.OWNER"
      ],
      "people": [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_MEMBER"
      ]
    },
    "join_keys": [
      [
        "MOIRA_LIST.MOIRA_LIST_KEY",
        "MOIRA_LIST_DETAIL.MOIRA_LIST_KEY"
      ],
      [
        "MOIRA_LIST_OWNER.MOIRA_LIST_OWNER_KEY",
        "MOIRA_LIST_DETAIL.MOIRA_LIST_OWNER_KEY"
      ]
    ]
  },
  {
    "question": "List the mailing lists with the largest number of members and the least number of members, their names, their respective owners, their public status, hidden status, and number of members in the list.",
    "sql": "WITH Occurrences AS ( SELECT ml.MOIRA_LIST_NAME, mlo.OWNER, ml.IS_PUBLIC, ml.IS_HIDDEN, COUNT(mld.MOIRA_LIST_MEMBER) AS occurrences FROM MOIRA_LIST_DETAIL mld JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY GROUP BY ml.MOIRA_LIST_NAME, ml.IS_PUBLIC, ml.IS_HIDDEN, mlo.OWNER ), MaxMinOccurrences AS ( SELECT MAX(occurrences) AS max_occurrences, MIN(occurrences) AS min_occurrences FROM Occurrences ) SELECT o.MOIRA_LIST_NAME, o.OWNER, o.IS_PUBLIC, o.IS_HIDDEN, o.occurrences FROM Occurrences o JOIN MaxMinOccurrences mm ON o.occurrences = mm.max_occurrences OR o.occurrences = mm.min_occurrences;",
    "db_id": "dw",
    "mapping": {
      "names": [
        "MOIRA_LIST.MOIRA_LIST_NAME"
      ],
      "owners": [
        "MOIRA_LIST_OWNER.OWNER"
      ],
      "public status": [
        "MOIRA_LIST.IS_PUBLIC"
      ],
      "hidden status": [
        "MOIRA_LIST.IS_HIDDEN"
      ],
      "members": [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_MEMBER"
      ]
    },
    "join_keys": [
      [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_KEY",
        "MOIRA_LIST.MOIRA_LIST_KEY"
      ],
      [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_OWNER_KEY",
        "MOIRA_LIST_OWNER.MOIRA_LIST_OWNER_KEY"
      ]
    ]
  },
  {
    "question": "For email lists containing faculty who teach courses in the summer in financial aid years after 2001, provide the name of the list, the number of people in the list, and the number of faculty in the list.",
    "sql": "SELECT DISTINCT ml.MOIRA_LIST_NAME AS Moira_List_Name, COUNT(mld.MOIRA_LIST_MEMBER) AS Member_Count, COUNT(DISTINCT ed.MIT_ID) AS Distinct_Faculty_Count FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN EMPLOYEE_DIRECTORY ed ON ccso.RESPONSIBLE_FACULTY_MIT_ID = ed.MIT_ID JOIN MOIRA_LIST_DETAIL mld ON upper(ed.KRB_NAME) = upper(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN ACADEMIC_TERMS at ON ccso.TERM_CODE = at.TERM_CODE WHERE at.TERM_CODE LIKE '%SU' AND CAST(at.FINANCIAL_AID_YEAR AS INT) > 2001 GROUP BY ml.MOIRA_LIST_NAME;",
    "db_id": "dw",
    "mapping": {
      "faculty": [
        "EMPLOYEE_DIRECTORY.MIT_ID"
      ],
      "courses in the summer": [
        "ACADEMIC_TERMS.TERM_CODE"
      ],
      "financial aid years": [
        "ACADEMIC_TERMS.FINANCIAL_AID_YEAR"
      ],
      "name": [
        "MOIRA_LIST.MOIRA_LIST_NAME"
      ],
      "people": [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_MEMBER"
      ]
    },
    "join_keys": [
      [
        "EMPLOYEE_DIRECTORY.MIT_ID",
        "COURSE_CATALOG_SUBJECT_OFFERED.RESPONSIBLE_FACULTY_MIT_ID"
      ],
      [
        "ACADEMIC_TERMS.TERM_CODE",
        "COURSE_CATALOG_SUBJECT_OFFERED.TERM_CODE"
      ]
    ]
  },
  {
    "question": "Regarding the mailing list about duo users, provide the number of students in this list, and the number of departments and schools associated with these students.",
    "sql": "SELECT COUNT(DISTINCT se.MIT_ID) AS Student_Count, COUNT(DISTINCT sd.DEPARTMENT_CODE) AS Department_Count, COUNT(DISTINCT sd.SCHOOL_CODE) AS School_Count FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN SE_PERSON se ON upper(mld.MOIRA_LIST_MEMBER) = upper(se.KRB_NAME) JOIN MIT_STUDENT_DIRECTORY msd ON msd.FULL_NAME = se.FULL_NAME JOIN SIS_DEPARTMENT sd ON msd.DEPARTMENT = sd.DEPARTMENT_CODE WHERE ml.MOIRA_LIST_NAME = 'candle-duo-users'",
    "db_id": "dw",
    "mapping": {
      "duo users": [
        "MOIRA_LIST.MOIRA_LIST_NAME"
      ],
      "students": [
        "SE_PERSON.MIT_ID"
      ],
      "departments": [
        "SIS_DEPARTMENT.DEPARTMENT_CODE"
      ],
      "schools": [
        "SIS_DEPARTMENT.SCHOOL_CODE"
      ]
    },
    "join_keys": [
      [
        "MOIRA_LIST.MOIRA_LIST_KEY",
        "MOIRA_LIST_DETAIL.MOIRA_LIST_KEY"
      ],
      [
        "MIT_STUDENT_DIRECTORY.DEPARTMENT",
        "SIS_DEPARTMENT.DEPARTMENT_CODE"
      ]
    ]
  },
  {
    "question": "For faculty who are responsible for courses in 2023 fall term, list the name of mailing lists they subscribe to, the number of people in these lists, the name of the faculty, and the number of courses associated with each faculty.",
    "sql": "WITH rel_lists AS (SELECT DISTINCT ml.MOIRA_LIST_KEY AS MOIRA_LIST_KEY, ccso.RESPONSIBLE_FACULTY_MIT_ID, ccso.RESPONSIBLE_FACULTY_NAME AS RESPONSIBLE_FACULTY_NAME FROM COURSE_CATALOG_SUBJECT_OFFERED ccso JOIN SE_PERSON se ON ccso.RESPONSIBLE_FACULTY_MIT_ID = se.MIT_ID JOIN MOIRA_LIST_DETAIL mld ON upper(se.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY WHERE ccso.TERM_CODE = '2023FA'), membership AS (SELECT ml.MOIRA_LIST_KEY AS moira_list_name, COUNT(*) AS membership_num FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN (SELECT DISTINCT MOIRA_LIST_KEY FROM rel_lists) rl ON rl.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY GROUP BY ml.MOIRA_LIST_KEY), course_count AS (SELECT ccso.RESPONSIBLE_FACULTY_MIT_ID, ccso.RESPONSIBLE_FACULTY_NAME AS RESPONSIBLE_FACULTY_NAME, COUNT(DISTINCT ccso.SUBJECT_TITLE) AS course_count FROM COURSE_CATALOG_SUBJECT_OFFERED ccso GROUP BY ccso.RESPONSIBLE_FACULTY_MIT_ID, ccso.RESPONSIBLE_FACULTY_NAME) SELECT m.moira_list_name, m.membership_num, cct.RESPONSIBLE_FACULTY_NAME, cct.course_count FROM membership m JOIN rel_lists rl ON rl.MOIRA_LIST_KEY = m.moira_list_name JOIN course_count cct ON rl.RESPONSIBLE_FACULTY_MIT_ID = cct.RESPONSIBLE_FACULTY_MIT_ID;",
    "db_id": "dw",
    "mapping": {
      "faculty": [
        "COURSE_CATALOG_SUBJECT_OFFERED.RESPONSIBLE_FACULTY_NAME",
        "COURSE_CATALOG_SUBJECT_OFFERED.RESPONSIBLE_FACULTY_MIT_ID"
      ],
      "2023 fall term": [
        "COURSE_CATALOG_SUBJECT_OFFERED.TERM_CODE"
      ],
      "name of mailing lists": [
        "MOIRA_LIST.MOIRA_LIST_NAME"
      ],
      "name of the faculty": [
        "COURSE_CATALOG_SUBJECT_OFFERED.RESPONSIBLE_FACULTY_NAME"
      ],
      "courses": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_TITLE"
      ]
    },
    "join_keys": [
      [
        "SE_PERSON.MIT_ID",
        "COURSE_CATALOG_SUBJECT_OFFERED.RESPONSIBLE_FACULTY_MIT_ID"
      ],
      [
        "MOIRA_LIST.MOIRA_LIST_KEY",
        "MOIRA_LIST_DETAIL.MOIRA_LIST_KEY"
      ]
    ]
  },
  {
    "question": "For each course instructor, provide the name of mailing lists they subscribe to, their name, earliest and latest publication years, and total number of enrolled students.",
    "sql": "SELECT ml.MOIRA_LIST_NAME, lci.INSTRUCTOR_NAME, MIN(lrc.CATALOG_YEAR) AS Min_Publication_Year, MAX(lrc.CATALOG_YEAR) AS Max_Publication_Year, SUM(lso.NUM_ENROLLED_STUDENTS) AS Total_Enrolled_Students FROM LIBRARY_COURSE_INSTRUCTOR lci JOIN LIBRARY_RESERVE_MATRL_DETAIL lrmd ON lci.LIBRARY_COURSE_INSTRUCTOR_KEY = lrmd.LIBRARY_COURSE_INSTRUCTOR_KEY JOIN LIBRARY_RESERVE_CATALOG lrc ON lrmd.LIBRARY_RESERVE_CATALOG_KEY = lrc.LIBRARY_RESERVE_CATALOG_KEY JOIN LIBRARY_SUBJECT_OFFERED lso ON lrmd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY JOIN SE_PERSON se ON lci.INSTRUCTOR_NAME = se.FULL_NAME JOIN MOIRA_LIST_DETAIL mld ON upper(se.KRB_NAME) = upper(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY GROUP BY ml.MOIRA_LIST_NAME,lci.INSTRUCTOR_NAME;",
    "db_id": "dw",
    "mapping": {
      "name of mailing lists": [
        "MOIRA_LIST.MOIRA_LIST_NAME"
      ],
      "name": [
        "LIBRARY_COURSE_INSTRUCTOR.INSTRUCTOR_NAME"
      ],
      "publication years": [
        "LIBRARY_RESERVE_CATALOG.CATALOG_YEAR"
      ],
      "enrolled students": [
        "LIBRARY_SUBJECT_OFFERED.NUM_ENROLLED_STUDENTS"
      ]
    },
    "join_keys": [
      [
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_COURSE_INSTRUCTOR_KEY",
        "LIBRARY_COURSE_INSTRUCTOR.LIBRARY_COURSE_INSTRUCTOR_KEY"
      ],
      [
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_RESERVE_CATALOG_KEY",
        "LIBRARY_RESERVE_CATALOG.LIBRARY_RESERVE_CATALOG_KEY"
      ],
      [
        "LIBRARY_SUBJECT_OFFERED.LIBRARY_SUBJECT_OFFERED_KEY",
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_SUBJECT_OFFERED_KEY"
      ],
      [
        "LIBRARY_COURSE_INSTRUCTOR.INSTRUCTOR_NAME",
        "SE_PERSON.FULL_NAME"
      ]
    ]
  },
  {
    "question": "For each mailing list that Professor Lily Wilkerson subscribes to, list its name, description, owner, number of people in the list, and number of tenured faculty in the list.",
    "sql": "WITH MemberCounts AS ( SELECT ml.MOIRA_LIST_NAME, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Member_Count FROM SE_PERSON se JOIN MOIRA_LIST_DETAIL mld ON upper(se.KRB_NAME) = upper(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY WHERE ml.MOIRA_LIST_NAME IN ( SELECT DISTINCT ml_sub.MOIRA_LIST_NAME FROM SE_PERSON se_sub JOIN MOIRA_LIST_DETAIL mld_sub ON upper(se_sub.KRB_NAME) = upper(mld_sub.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml_sub ON mld_sub.MOIRA_LIST_KEY = ml_sub.MOIRA_LIST_KEY WHERE se_sub.FULL_NAME = 'Wilkerson, Lily-Mae M.' ) GROUP BY ml.MOIRA_LIST_NAME ), FacultyTenuredCounts AS ( SELECT ml.MOIRA_LIST_NAME, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Faculty_Tenured_Count FROM SE_PERSON se JOIN MOIRA_LIST_DETAIL mld ON upper(se.KRB_NAME) = upper(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY WHERE ml.MOIRA_LIST_NAME IN ( SELECT DISTINCT ml_sub.MOIRA_LIST_NAME FROM SE_PERSON se_sub JOIN MOIRA_LIST_DETAIL mld_sub ON upper(se_sub.KRB_NAME) = upper(mld_sub.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml_sub ON mld_sub.MOIRA_LIST_KEY = ml_sub.MOIRA_LIST_KEY WHERE se_sub.FULL_NAME = 'Wilkerson, Lily-Mae M.' ) AND se.PAYROLL_RANK = 'Faculty Tenured' GROUP BY ml.MOIRA_LIST_NAME ) SELECT DISTINCT mc.MOIRA_LIST_NAME, ml.MOIRA_LIST_DESCRIPTION, mlo.OWNER, mc.Member_Count, COALESCE(ftc.Faculty_Tenured_Count, 0) AS Faculty_Tenured_Count FROM MemberCounts mc LEFT JOIN FacultyTenuredCounts ftc ON mc.MOIRA_LIST_NAME = ftc.MOIRA_LIST_NAME JOIN MOIRA_LIST ml ON mc.MOIRA_LIST_NAME = ml.MOIRA_LIST_NAME JOIN MOIRA_LIST_DETAIL mld ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mlo ON MLD.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY ORDER BY mc.Member_Count DESC;",
    "db_id": "dw",
    "mapping": {
      "Professor Lily Wilkerson": [
        "SE_PERSON.FULL_NAME"
      ],
      "name": [
        "MOIRA_LIST.MOIRA_LIST_NAME"
      ],
      "description": [
        "MOIRA_LIST.MOIRA_LIST_DESCRIPTION"
      ],
      "owner": [
        "MOIRA_LIST_OWNER.OWNER"
      ],
      "people": [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_MEMBER"
      ],
      "tenured faculty": [
        "SE_PERSON.PAYROLL_RANK",
        "MOIRA_LIST_DETAIL.MOIRA_LIST_MEMBER"
      ]
    },
    "join_keys": [
      [
        "MOIRA_LIST.MOIRA_LIST_KEY",
        "MOIRA_LIST_DETAIL.MOIRA_LIST_KEY"
      ],
      [
        "MOIRA_LIST_OWNER.MOIRA_LIST_OWNER_KEY",
        "MOIRA_LIST_DETAIL.MOIRA_LIST_OWNER_KEY"
      ]
    ]
  },
  {
    "question": "For email lists that include more than 75% computer science students, list the name of the list, owner, and the number of computer science students in the list.",
    "sql": "SELECT ml.MOIRA_LIST_NAME, mlo.OWNER, COUNT(CASE WHEN msd.DEPARTMENT = '6' THEN 1 ELSE NULL END) AS CS_STUDENT_COUNT FROM MIT_STUDENT_DIRECTORY msd JOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME JOIN MOIRA_LIST_DETAIL mld ON upper(se.KRB_NAME) = upper(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY GROUP BY ml.MOIRA_LIST_NAME, mlo.OWNER HAVING SUM(CASE WHEN msd.DEPARTMENT = '6' THEN 1 ELSE 0 END) > 0.75 * COUNT(mld.MOIRA_LIST_MEMBER);",
    "db_id": "dw",
    "mapping": {
      "computer science": [
        "MIT_STUDENT_DIRECTORY.DEPARTMENT"
      ],
      "students": [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_MEMBER"
      ],
      "name": [
        "MOIRA_LIST.MOIRA_LIST_NAME"
      ],
      "owner": [
        "MOIRA_LIST_OWNER.OWNER"
      ]
    },
    "join_keys": [
      [
        "SE_PERSON.FULL_NAME",
        "MIT_STUDENT_DIRECTORY.FULL_NAME"
      ]
    ]
  },
  {
    "question": "For the building with the most floors, list the building name and the names of the mailing lists that the building employees subscribe to.",
    "sql": "WITH FloorsWithLevels AS ( SELECT fb.BUILDING_NAME, e.FULL_NAME, ml.MOIRA_LIST_NAME, MAX(ff.LEVEL_ID) OVER (PARTITION BY ff.BUILDING_KEY) AS MAX_LEVEL, MIN(ff.LEVEL_ID) OVER (PARTITION BY ff.BUILDING_KEY) AS MIN_LEVEL FROM FAC_BUILDING fb JOIN FAC_ROOMS fr ON fb.FAC_BUILDING_KEY = fr.BUILDING_KEY JOIN FAC_FLOOR ff ON fr.FLOOR_KEY = ff.FLOOR_KEY JOIN EMPLOYEE_DIRECTORY e ON e.OFFICE_LOCATION = fr.FAC_ROOM_KEY JOIN MOIRA_LIST_DETAIL mld ON e.KRB_NAME = mld.MOIRA_LIST_MEMBER JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY ), FloorsPerBuilding AS ( SELECT BUILDING_NAME, FULL_NAME, MOIRA_LIST_NAME, MAX_LEVEL - MIN_LEVEL AS NUM_FLOORS FROM FloorsWithLevels GROUP BY BUILDING_NAME, FULL_NAME, MOIRA_LIST_NAME, MAX_LEVEL, MIN_LEVEL ), MaxFloors AS ( SELECT MAX(NUM_FLOORS) AS MAX_FLOORS FROM FloorsPerBuilding ) SELECT a.BUILDING_NAME, a.MOIRA_LIST_NAME FROM FloorsPerBuilding a JOIN MaxFloors b ON a.NUM_FLOORS = b.MAX_FLOORS;",
    "db_id": "dw",
    "mapping": {
      "floors": [
        "FAC_FLOOR.LEVEL_ID"
      ],
      "building name": [
        "FAC_BUILDING.BUILDING_NAME"
      ],
      "names of the mailing lists": [
        "MOIRA_LIST.MOIRA_LIST_NAME"
      ]
    },
    "join_keys": [
      [
        "FAC_ROOMS.BUILDING_KEY",
        "FAC_BUILDING.FAC_BUILDING_KEY"
      ],
      [
        "FAC_FLOOR.FLOOR_KEY",
        "FAC_ROOMS.FLOOR_KEY"
      ],
      [
        "FAC_ROOMS.FAC_ROOM_KEY",
        "EMPLOYEE_DIRECTORY.OFFICE_LOCATION"
      ],
      [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_MEMBER",
        "EMPLOYEE_DIRECTORY.KRB_NAME"
      ],
      [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_KEY",
        "MOIRA_LIST.MOIRA_LIST_KEY"
      ]
    ]
  },
  {
    "question": "For the email lists subscribed by faculty members with last names begin with Y, list the names of the lists, the total number of subjects managed by faculty in those mailing lists, and the number of such faculty in the lists.",
    "sql": "SELECT DISTINCT ml.MOIRA_LIST_NAME, COUNT(ccso.SUBJECT_ID) AS course_count, COUNT(DISTINCT ccso.RESPONSIBLE_FACULTY_NAME) AS distinct_faculty_count FROM COURSE_CATALOG_SUBJECT_OFFERED CCSO JOIN EMPLOYEE_DIRECTORY E ON ccso.RESPONSIBLE_FACULTY_MIT_ID = E.MIT_ID JOIN MOIRA_LIST_DETAIL mld ON upper(e.KRB_NAME_UPPERCASE) = upper(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY WHERE ccso.RESPONSIBLE_FACULTY_NAME LIKE 'Y%' GROUP BY ML.MOIRA_LIST_NAME",
    "db_id": "dw",
    "mapping": {
      "last names": [
        "COURSE_CATALOG_SUBJECT_OFFERED.RESPONSIBLE_FACULTY_NAME"
      ],
      "names of the lists": [
        "MOIRA_LIST.MOIRA_LIST_NAME"
      ],
      "subjects": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_ID"
      ],
      "faculty": [
        "COURSE_CATALOG_SUBJECT_OFFERED.RESPONSIBLE_FACULTY_NAME"
      ]
    },
    "join_keys": [
      [
        "COURSE_CATALOG_SUBJECT_OFFERED.RESPONSIBLE_FACULTY_MIT_ID",
        "EMPLOYEE_DIRECTORY.MIT_ID"
      ]
    ]
  },
  {
    "question": "For students whose last names begin with K, list their names, the phone numbers of departments they belong to, total number of mailing lists each student is in, and the average size of the mailing lists each student is in.",
    "sql": "WITH MailingListSizes AS (SELECT ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME, COUNT(mld.MOIRA_LIST_MEMBER) AS List_Size FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY GROUP BY ml.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME) SELECT msd.FULL_NAME AS Student_Name, sad.DEPARTMENT_PHONE_NUMBER, COUNT(ml.MOIRA_LIST_KEY) AS Total_Lists, AVG(MLS.List_Size) AS Avg_List_Size FROM MIT_STUDENT_DIRECTORY msd JOIN SIS_DEPARTMENT sd ON msd.DEPARTMENT = sd.DEPARTMENT_CODE JOIN SIS_ADMIN_DEPARTMENT sad ON sd.DEPARTMENT_CODE = sad.SIS_ADMIN_DEPARTMENT_CODE JOIN SE_PERSON se ON msd.FULL_NAME = se.FULL_NAME JOIN MOIRA_LIST_DETAIL mld ON upper(se.KRB_NAME) = UPPER(mld.MOIRA_LIST_MEMBER) JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN MailingListSizes MLS ON ml.MOIRA_LIST_KEY = MLS.MOIRA_LIST_KEY WHERE msd.LAST_NAME LIKE 'K%' GROUP BY msd.FULL_NAME, sad.DEPARTMENT_PHONE_NUMBER;",
    "db_id": "dw",
    "mapping": {
      "last names": [
        "MIT_STUDENT_DIRECTORY.LAST_NAME"
      ],
      "names": [
        "MIT_STUDENT_DIRECTORY.FULL_NAME"
      ],
      "phone numbers": [
        "SIS_ADMIN_DEPARTMENT.DEPARTMENT_PHONE_NUMBER"
      ],
      "mailing lists": [
        "MOIRA_LIST.MOIRA_LIST_KEY"
      ]
    },
    "join_keys": [
      [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_KEY",
        "MOIRA_LIST.MOIRA_LIST_KEY"
      ],
      [
        "MIT_STUDENT_DIRECTORY.DEPARTMENT",
        "SIS_DEPARTMENT.DEPARTMENT_CODE"
      ],
      [
        "SIS_DEPARTMENT.DEPARTMENT_CODE",
        "SIS_ADMIN_DEPARTMENT.SIS_ADMIN_DEPARTMENT_CODE"
      ],
      [
        "MIT_STUDENT_DIRECTORY.FULL_NAME",
        "SE_PERSON.FULL_NAME"
      ],
      [
        "MOIRA_LIST.MOIRA_LIST_KEY",
        "MOIRA_LIST_DETAIL.MOIRA_LIST_KEY"
      ]
    ]
  },
  {
    "question": "Provide the number of mailing lists whose name begin with B and have members in the department of Electrical Engineering and Computer Science, the name of the mailing list whose name begin with B and has the most number of members belonging to the department of Electrical Engineering and Computer Science as well as the the number of such members.",
    "sql": "WITH DistinctLists AS (SELECT ml.MOIRA_LIST_NAME, COUNT(DISTINCT se.MIT_ID) AS Member_Count FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mlo ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY JOIN SE_PERSON se ON UPPER(mld.MOIRA_LIST_MEMBER) = upper(se.KRB_NAME) WHERE UPPER(ml.MOIRA_LIST_NAME) LIKE 'B%' AND se.ORGANIZATION = 'Electrical Engineering-Computer Science' GROUP BY ml.MOIRA_LIST_NAME), Moira_List_With_Most_Members AS (SELECT MOIRA_LIST_NAME FROM DistinctLists WHERE Member_Count = (SELECT MAX(Member_Count) FROM DistinctLists)) SELECT COUNT(DISTINCT dl.MOIRA_LIST_NAME) AS Moira_Lists_Start_With_B, MAX(mll.MOIRA_LIST_NAME) AS Moira_List_With_Most_Members, MAX(dl.Member_Count) AS Most_Number_Of_Members FROM DistinctLists dl LEFT JOIN Moira_List_With_Most_Members mll ON dl.MOIRA_LIST_NAME = mll.MOIRA_LIST_NAME;",
    "db_id": "dw",
    "mapping": {
      "name of mailing list": [
        "MOIRA_LIST.MOIRA_LIST_NAME"
      ],
      "members": [
        "SE_PERSON.MIT_ID"
      ],
      "department": [
        "SE_PERSON.ORGANIZATION"
      ]
    },
    "join_keys": [
      [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_KEY",
        "MOIRA_LIST.MOIRA_LIST_KEY"
      ],
      [
        "MOIRA_LIST_OWNER.MOIRA_LIST_OWNER_KEY",
        "MOIRA_LIST_DETAIL.MOIRA_LIST_OWNER_KEY"
      ]
    ]
  },
  {
    "question": "From the 100 email lists with the most number of subscribers, list their names, their total number of subscribers, their public status, the name of the department with the most presence in the list, and the number of students from this department in the list.",
    "sql": "SELECT* FROM (WITH ListMemberCount AS ( SELECT ml.MOIRA_LIST_NAME, ml.IS_PUBLIC, COUNT(mld.MOIRA_LIST_MEMBER) AS Member_Count FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY GROUP BY ml.MOIRA_LIST_NAME, ml.IS_PUBLIC ), DepartmentCounts AS ( SELECT lmc.MOIRA_LIST_NAME, sd.DEPARTMENT_NAME, COUNT(msd.FULL_NAME) AS Student_Count, ROW_NUMBER() OVER ( PARTITION BY lmc.MOIRA_LIST_NAME ORDER BY COUNT(msd.FULL_NAME) DESC ) AS Rank FROM ListMemberCount lmc JOIN MOIRA_LIST ml ON lmc.MOIRA_LIST_NAME = ml.MOIRA_LIST_NAME JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN SE_PERSON se ON UPPER(mld.MOIRA_LIST_MEMBER) = upper(se.KRB_NAME) JOIN MIT_STUDENT_DIRECTORY msd ON msd.FULL_NAME = se.FULL_NAME JOIN SIS_DEPARTMENT sd ON msd.DEPARTMENT = sd.DEPARTMENT_CODE GROUP BY lmc.MOIRA_LIST_NAME, sd.DEPARTMENT_NAME ) SELECT lmc.MOIRA_LIST_NAME, lmc.Member_Count, lmc.IS_PUBLIC, dc.DEPARTMENT_NAME AS Most_Prominent_Department, dc.Student_Count FROM ListMemberCount lmc LEFT JOIN DepartmentCounts dc ON lmc.MOIRA_LIST_NAME = dc.MOIRA_LIST_NAME AND dc.Rank = 1 ORDER BY lmc.Member_Count DESC ) WHERE ROWNUM <= 100;",
    "db_id": "dw",
    "mapping": {
      "names": [
        "MOIRA_LIST.MOIRA_LIST_NAME"
      ],
      "subscribers": [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_MEMBER"
      ],
      "public status": [
        "MOIRA_LIST.IS_PUBLIC"
      ],
      "department": [
        "SIS_DEPARTMENT.DEPARTMENT_NAME"
      ],
      "students": [
        "MIT_STUDENT_DIRECTORY.FULL_NAME"
      ]
    },
    "join_keys": [
      [
        "MOIRA_LIST.MOIRA_LIST_KEY",
        "MOIRA_LIST_DETAIL.MOIRA_LIST_KEY"
      ],
      [
        "MOIRA_LIST.MOIRA_LIST_KEY",
        "MOIRA_LIST_DETAIL.MOIRA_LIST_KEY"
      ],
      [
        "SIS_DEPARTMENT.DEPARTMENT_CODE",
        "MIT_STUDENT_DIRECTORY.DEPARTMENT"
      ]
    ]
  },
  {
    "question": "Among the mailing lists subscribed by people with physical offices in building 24, provide the name of the most subscribed mailing list and the total number of subscribers.",
    "sql": "WITH MailingListStats AS ( SELECT ml.MOIRA_LIST_NAME, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS Total_Members FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN EMPLOYEE_DIRECTORY ed ON mld.MOIRA_LIST_MEMBER = ed.KRB_NAME WHERE ed.OFFICE_LOCATION LIKE '24%' GROUP BY ml.MOIRA_LIST_NAME ), Largest AS ( SELECT MOIRA_LIST_NAME, Total_Members, RANK() OVER (ORDER BY Total_Members DESC) AS Size_Rank FROM MailingListStats ) SELECT MAX(CASE WHEN Size_Rank = 1 THEN MOIRA_LIST_NAME END) AS Largest_Mailing_List, MAX(CASE WHEN Size_Rank = 1 THEN Total_Members END) AS Member_Count FROM Largest;",
    "db_id": "dw",
    "mapping": {
      "physical offices": [
        "EMPLOYEE_DIRECTORY.OFFICE_LOCATION"
      ],
      "name": [
        "MOIRA_LIST.MOIRA_LIST_NAME"
      ],
      "subscribers": [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_MEMBER"
      ]
    },
    "join_keys": [
      [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_KEY",
        "MOIRA_LIST.MOIRA_LIST_KEY"
      ],
      [
        "EMPLOYEE_DIRECTORY.KRB_NAME",
        "MOIRA_LIST_DETAIL.MOIRA_LIST_MEMBER"
      ]
    ]
  },
  {
    "question": "For email lists subscribed by either support staff or faculty, list its name, the number of subscribers that are support staff, the number of subscribers that are faculty, as well as its active status.",
    "sql": "SELECT ml.MOIRA_LIST_NAME, SUM(CASE WHEN se.EMPLOYEE_TYPE = 'Support Staff' THEN 1 ELSE 0 END) AS SUPPORT_COUNT, SUM(CASE WHEN se.EMPLOYEE_TYPE = 'Faculty' THEN 1 ELSE 0 END) AS FACULTY_COUNT, ml.IS_ACTIVE FROM MOIRA_LIST ml JOIN MOIRA_LIST_DETAIL mld ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN SE_PERSON se ON upper(mld.MOIRA_LIST_MEMBER) = upper(se.KRB_NAME) WHERE se.EMPLOYEE_TYPE IN ('Support Staff', 'Faculty') GROUP BY ml.MOIRA_LIST_NAME, ml.IS_ACTIVE;",
    "db_id": "dw",
    "mapping": {
      "name": [
        "MOIRA_LIST.MOIRA_LIST_NAME"
      ],
      "subscribers": [
        "SE_PERSON.EMPLOYEE_TYPE"
      ],
      "active status": [
        "MOIRA_LIST.IS_ACTIVE"
      ],
      "support staff or faculty": [
        "SE_PERSON.EMPLOYEE_TYPE"
      ]
    },
    "join_keys": [
      [
        "MOIRA_LIST.MOIRA_LIST_KEY",
        "MOIRA_LIST_DETAIL.MOIRA_LIST_KEY"
      ]
    ]
  },
  {
    "question": "For each active mailing list, list the owner, the name and phone number of the department that contributes the largest number of students to the list, and the total number of students subscribed to the mailing list from that department.",
    "sql": "WITH StudentMemberCounts AS ( SELECT mld.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME, mo.OWNER AS list_owner, ad.DEPARTMENT_PHONE_NUMBER AS department_phone, ad.SIS_ADMIN_DEPARTMENT_NAME AS department_name, COUNT(DISTINCT msd.FULL_NAME) AS student_members FROM MOIRA_LIST_DETAIL mld JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mo ON mld.MOIRA_LIST_OWNER_KEY = mo.MOIRA_LIST_OWNER_KEY JOIN SE_PERSON se ON upper(mld.MOIRA_LIST_MEMBER) = upper(se.KRB_NAME) JOIN MIT_STUDENT_DIRECTORY msd ON se.FULL_NAME = msd.FULL_NAME LEFT JOIN SIS_ADMIN_DEPARTMENT ad ON msd.DEPARTMENT = ad.SIS_ADMIN_DEPARTMENT_CODE WHERE ml.IS_ACTIVE = 'Y' AND ml.IS_MOIRA_MAILING_LIST = 'Y' GROUP BY mld.MOIRA_LIST_KEY, ml.MOIRA_LIST_NAME, mo.OWNER, ad.DEPARTMENT_PHONE_NUMBER, ad.SIS_ADMIN_DEPARTMENT_NAME ), RankedDepartments AS ( SELECT list_owner, department_name, department_phone, SUM(student_members) AS total_student_members, RANK() OVER (PARTITION BY list_owner ORDER BY SUM(student_members) DESC) AS department_rank FROM StudentMemberCounts GROUP BY list_owner, department_name, department_phone ) SELECT list_owner, department_name AS most_prominent_dpt, department_phone AS most_prominent_dpt_phone, total_student_members FROM RankedDepartments WHERE department_rank = 1 ORDER BY list_owner;",
    "db_id": "dw",
    "mapping": {
      "active": [
        "MOIRA_LIST.IS_ACTIVE"
      ],
      "owner": [
        "MOIRA_LIST_OWNER.OWNER"
      ],
      "name": [
        "SIS_ADMIN_DEPARTMENT.SIS_ADMIN_DEPARTMENT_NAME"
      ],
      "phone number": [
        "SIS_ADMIN_DEPARTMENT.DEPARTMENT_PHONE_NUMBER"
      ],
      "students": [
        "MIT_STUDENT_DIRECTORY.FULL_NAME"
      ]
    },
    "join_keys": [
      [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_KEY",
        "MOIRA_LIST.MOIRA_LIST_KEY"
      ],
      [
        "MOIRA_LIST_OWNER.MOIRA_LIST_OWNER_KEY",
        "MOIRA_LIST_DETAIL.MOIRA_LIST_OWNER_KEY"
      ],
      [
        "MIT_STUDENT_DIRECTORY.DEPARTMENT",
        "SIS_ADMIN_DEPARTMENT.SIS_ADMIN_DEPARTMENT_CODE"
      ]
    ]
  },
  {
    "question": "For each mailing list, list its owner, owner type, the member visibility ('Public Members' if public, and 'Hidden Members' otherwise), and the number of members of this type of visibility. For each owner and owner type, include a grand total for all members in the format of (owner, owner type, null, total members).",
    "sql": "WITH MemberVisibility AS ( SELECT mo.OWNER, mo.OWNER_TYPE, CASE WHEN ml.IS_PUBLIC = 'Y' THEN 'Public Members' WHEN ml.IS_PUBLIC = 'N' THEN 'Hidden Members' ELSE NULL END AS member_visibility, COUNT(DISTINCT mld.MOIRA_LIST_MEMBER) AS total_members FROM MOIRA_LIST_DETAIL mld JOIN MOIRA_LIST ml ON mld.MOIRA_LIST_KEY = ml.MOIRA_LIST_KEY JOIN MOIRA_LIST_OWNER mo ON mld.MOIRA_LIST_OWNER_KEY = mo.MOIRA_LIST_OWNER_KEY WHERE ml.IS_MOIRA_GROUP = 'Y' GROUP BY mo.OWNER, mo.OWNER_TYPE, ml.IS_PUBLIC ), RollupResults AS ( SELECT OWNER, member_visibility, SUM(total_members) AS total_members FROM MemberVisibility GROUP BY ROLLUP(OWNER, member_visibility) HAVING SUM(total_members) > 0 ) SELECT rr.OWNER, mv.OWNER_TYPE, rr.member_visibility, rr.total_members FROM RollupResults rr LEFT JOIN ( SELECT DISTINCT OWNER, OWNER_TYPE FROM MemberVisibility ) mv ON rr.OWNER = mv.OWNER ORDER BY rr.OWNER, rr.member_visibility;",
    "db_id": "dw",
    "mapping": {
      "members": [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_MEMBER"
      ],
      "owner": [
        "MOIRA_LIST_OWNER.OWNER"
      ],
      "owner type": [
        "MOIRA_LIST_OWNER.OWNER_TYPE"
      ],
      "member visibility": [
        "MOIRA_LIST.IS_PUBLIC"
      ]
    },
    "join_keys": [
      [
        "MOIRA_LIST.MOIRA_LIST_KEY",
        "MOIRA_LIST_DETAIL.MOIRA_LIST_KEY"
      ],
      [
        "MOIRA_LIST_OWNER.MOIRA_LIST_OWNER_KEY",
        "MOIRA_LIST_DETAIL.MOIRA_LIST_OWNER_KEY"
      ]
    ]
  },
  {
    "question": "Group biology courses by cluster type and course level. For each group, list the name of the department, the course title, cluster type, total enrollments, average enrollment within its cluster, course level, number of unique course materials, average new and used prices for TIP materials, total material record count for TIP materials, number of unique library titles, and number of unique library ISBNs.",
    "sql": "WITH EnrollmentWithAnalytics AS ( SELECT sos.SUBJECT_ID, sos.SUBJECT_TITLE, sos.OFFER_DEPT_NAME AS DEPARTMENT, sos.CLUSTER_TYPE, sos.NUM_ENROLLED_STUDENTS, AVG(sos.NUM_ENROLLED_STUDENTS) OVER (PARTITION BY sos.CLUSTER_TYPE) AS avg_enrollment_in_cluster, scd.COURSE_LEVEL FROM SUBJECT_OFFERED_SUMMARY sos LEFT JOIN SIS_COURSE_DESCRIPTION scd ON sos.COURSE_NUMBER = scd.COURSE WHERE sos.OFFER_DEPT_NAME = 'Biology' ), EnrollmentWithTIP AS ( SELECT ewa.SUBJECT_ID, ewa.SUBJECT_TITLE, ewa.DEPARTMENT, ewa.CLUSTER_TYPE, ewa.NUM_ENROLLED_STUDENTS, ewa.avg_enrollment_in_cluster, ewa.COURSE_LEVEL, tm.TITLE AS material_title, tm.NEW_SHELF_PRICE, tm.USED_SHELF_PRICE, td.RECORD_COUNT AS material_record_count FROM EnrollmentWithAnalytics ewa LEFT JOIN TIP_DETAIL td ON ewa.SUBJECT_ID = td.SUBJECT_ID LEFT JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY ), EnrollmentWithLibrary AS ( SELECT ewt.SUBJECT_ID, ewt.SUBJECT_TITLE, ewt.DEPARTMENT, ewt.CLUSTER_TYPE, ewt.NUM_ENROLLED_STUDENTS, ewt.avg_enrollment_in_cluster, ewt.COURSE_LEVEL, ewt.material_title, ewt.NEW_SHELF_PRICE, ewt.USED_SHELF_PRICE, ewt.material_record_count, lrc.CATALOG_TITLE AS library_title, lrc.CATALOG_AUTHOR_NAME AS library_author, lrc.CATALOG_ISBN AS library_isbn FROM EnrollmentWithTIP ewt LEFT JOIN LIBRARY_RESERVE_CATALOG lrc ON ewt.SUBJECT_ID = lrc.CATALOG_SYSTEM_NUMBER ) SELECT DEPARTMENT, SUBJECT_TITLE, CLUSTER_TYPE, SUM(NUM_ENROLLED_STUDENTS) AS total_enrollment, AVG(avg_enrollment_in_cluster) AS avg_enrollment_in_cluster, COURSE_LEVEL, COUNT(DISTINCT material_title) AS num_unique_materials, AVG(NEW_SHELF_PRICE) AS avg_new_material_price, AVG(USED_SHELF_PRICE) AS avg_used_material_price, SUM(material_record_count) AS total_material_records, COUNT(DISTINCT library_title) AS num_unique_library_titles, COUNT(DISTINCT library_isbn) AS num_unique_library_isbns FROM EnrollmentWithLibrary GROUP BY DEPARTMENT, SUBJECT_TITLE, CLUSTER_TYPE, COURSE_LEVEL ORDER BY DEPARTMENT, SUBJECT_TITLE, CLUSTER_TYPE;",
    "db_id": "dw",
    "mapping": {
      "cluster type": [
        "SUBJECT_OFFERED_SUMMARY.CLUSTER_TYPE"
      ],
      "course level": [
        "SIS_COURSE_DESCRIPTION.COURSE_LEVEL"
      ],
      "name of the department": [
        "SUBJECT_OFFERED_SUMMARY.OFFER_DEPT_NAME"
      ],
      "course title": [
        "SUBJECT_OFFERED_SUMMARY.SUBJECT_TITLE"
      ],
      "enrollment": [
        "SUBJECT_OFFERED_SUMMARY.NUM_ENROLLED_STUDENTS"
      ],
      "course materials": [
        "TIP_MATERIAL.TITLE"
      ],
      "new price": [
        "TIP_MATERIAL.NEW_SHELF_PRICE"
      ],
      "use price": [
        "TIP_MATERIAL.USED_SHELF_PRICE"
      ],
      "record count for TIP materials": [
        "TIP_DETAIL.RECORD_COUNT"
      ],
      "library titles": [
        "LIBRARY_RESERVE_CATALOG.CATALOG_TITLE"
      ],
      "library ISBNs": [
        "LIBRARY_RESERVE_CATALOG.CATALOG_ISBN"
      ]
    },
    "join_keys": [
      [
        "SUBJECT_OFFERED_SUMMARY.COURSE_NUMBER",
        "SIS_COURSE_DESCRIPTION.COURSE"
      ],
      [
        "TIP_MATERIAL.TIP_MATERIAL_KEY",
        "TIP_DETAIL.TIP_MATERIAL_KEY"
      ]
    ]
  },
  {
    "question": "For subjects offered this year in either the Fall or Spring term, list its department name, school name, subject ID, subject title, course level, total units, the term it is offered ('Spring' for Spring term and 'Fall' for Fall term), term description, the number of distinct instructors teaching in the Fall, and the number of distinct instructors teaching in the Spring.",
    "sql": "WITH SubjectsByTerm AS ( SELECT cc.SUBJECT_ID, cc.SUBJECT_TITLE, cc.TOTAL_UNITS, cc.DEPARTMENT_NAME, CASE WHEN cc.TERM_CODE LIKE '%FA' THEN 'Fall' WHEN cc.TERM_CODE LIKE '%SP' THEN 'Spring' END AS offered_term, at.TERM_DESCRIPTION AS term_description, sd.SCHOOL_NAME, scd.COURSE_LEVEL, cc.FALL_INSTRUCTORS, cc.SPRING_INSTRUCTORS FROM COURSE_CATALOG_SUBJECT_OFFERED cc JOIN ACADEMIC_TERMS at ON cc.TERM_CODE = at.TERM_CODE LEFT JOIN SIS_DEPARTMENT sd ON cc.DEPARTMENT_CODE = sd.DEPARTMENT_CODE LEFT JOIN SIS_COURSE_DESCRIPTION scd ON cc.SUBJECT_CODE = scd.COURSE WHERE cc.IS_OFFERED_THIS_YEAR = 'Y' AND (cc.TERM_CODE LIKE '%FA' OR cc.TERM_CODE LIKE '%SP') ), SubjectsAggregated AS ( SELECT SUBJECT_ID, SUBJECT_TITLE, DEPARTMENT_NAME, SCHOOL_NAME, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description, COUNT(DISTINCT FALL_INSTRUCTORS) AS num_fall_instructors, COUNT(DISTINCT SPRING_INSTRUCTORS) AS num_spring_instructors FROM SubjectsByTerm GROUP BY SUBJECT_ID, SUBJECT_TITLE, DEPARTMENT_NAME, SCHOOL_NAME, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description ) SELECT DEPARTMENT_NAME, SCHOOL_NAME, SUBJECT_ID, SUBJECT_TITLE, COURSE_LEVEL, TOTAL_UNITS, offered_term, term_description, num_fall_instructors, num_spring_instructors FROM SubjectsAggregated ORDER BY DEPARTMENT_NAME, SUBJECT_ID, SUBJECT_TITLE, offered_term;",
    "db_id": "dw",
    "mapping": {
      "subjects offered this year": [
        "COURSE_CATALOG_SUBJECT_OFFERED.IS_OFFERED_THIS_YEAR"
      ],
      "department name": [
        "COURSE_CATALOG_SUBJECT_OFFERED.DEPARTMENT_NAME"
      ],
      "school name": [
        "SIS_DEPARTMENT.SCHOOL_NAME"
      ],
      "subject ID": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_ID"
      ],
      "subject title": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_TITLE"
      ],
      "course level": [
        "SIS_COURSE_DESCRIPTION.COURSE_LEVEL"
      ],
      "total units": [
        "COURSE_CATALOG_SUBJECT_OFFERED.TOTAL_UNITS"
      ],
      "term": [
        "COURSE_CATALOG_SUBJECT_OFFERED.TERM_CODE"
      ],
      "term description": [
        "ACADEMIC_TERMS.TERM_DESCRIPTION"
      ],
      "instructors": [
        "COURSE_CATALOG_SUBJECT_OFFERED.FALL_INSTRUCTORS",
        "COURSE_CATALOG_SUBJECT_OFFERED.SPRING_INSTRUCTORS"
      ]
    },
    "join_keys": [
      [
        "COURSE_CATALOG_SUBJECT_OFFERED.TERM_CODE",
        "ACADEMIC_TERMS.TERM_CODE"
      ],
      [
        "COURSE_CATALOG_SUBJECT_OFFERED.DEPARTMENT_CODE",
        "SIS_DEPARTMENT.DEPARTMENT_CODE"
      ],
      [
        "SIS_COURSE_DESCRIPTION.COURSE",
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_CODE"
      ]
    ]
  },
  {
    "question": "For Political Science courses with HASS attributes, for each attribute, list the name and description of the attribute, the number of unique subjects, average units, the total enrollment, the number of departments that grant degrees, and the subject code description.",
    "sql": "WITH HASSAttributes AS (SELECT cc.HASS_ATTRIBUTE, cc.HASS_ATTRIBUTE_DESC, cc.SUBJECT_ID, cc.TOTAL_UNITS, sos.NUM_ENROLLED_STUDENTS, sd.DEPARTMENT_NAME, sd.IS_DEGREE_GRANTING, sc.SUBJECT_CODE_DESC FROM CIS_COURSE_CATALOG cc JOIN SIS_SUBJECT_CODE sc ON cc.SUBJECT_CODE = sc.SUBJECT_CODE JOIN SUBJECT_OFFERED_SUMMARY sos ON cc.SUBJECT_ID = sos.SUBJECT_ID LEFT JOIN SIS_DEPARTMENT sd ON sc.DEPARTMENT_CODE = sd.DEPARTMENT_CODE WHERE cc.HASS_ATTRIBUTE IS NOT NULL AND sd.DEPARTMENT_NAME = 'Political Science') SELECT HASS_ATTRIBUTE, HASS_ATTRIBUTE_DESC, COUNT(DISTINCT SUBJECT_ID) AS num_subjects, AVG(TOTAL_UNITS) AS avg_units, SUM(NUM_ENROLLED_STUDENTS) AS total_enrollment, COUNT(DISTINCT CASE WHEN IS_DEGREE_GRANTING = 'Y' THEN DEPARTMENT_NAME END) AS num_degree_granting, SUBJECT_CODE_DESC FROM HASSAttributes GROUP BY HASS_ATTRIBUTE, HASS_ATTRIBUTE_DESC, SUBJECT_CODE_DESC ORDER BY HASS_ATTRIBUTE, HASS_ATTRIBUTE_DESC, SUBJECT_CODE_DESC;",
    "db_id": "dw",
    "mapping": {
      "Political Science": [
        "SIS_DEPARTMENT.DEPARTMENT_NAME"
      ],
      "name": [
        "CIS_COURSE_CATALOG.HASS_ATTRIBUTE"
      ],
      "description": [
        "CIS_COURSE_CATALOG.HASS_ATTRIBUTE_DESC"
      ],
      "subjects": [
        "CIS_COURSE_CATALOG.SUBJECT_ID"
      ],
      "units": [
        "CIS_COURSE_CATALOG.TOTAL_UNITS"
      ],
      "enrollment": [
        "SUBJECT_OFFERED_SUMMARY.NUM_ENROLLED_STUDENTS"
      ],
      "departments that grant degrees": [
        "SIS_DEPARTMENT.IS_DEGREE_GRANTING"
      ],
      "subject code description": [
        "SIS_SUBJECT_CODE.SUBJECT_CODE_DESC"
      ]
    },
    "join_keys": [
      [
        "CIS_COURSE_CATALOG.SUBJECT_CODE",
        "SIS_SUBJECT_CODE.SUBJECT_CODE"
      ],
      [
        "SUBJECT_OFFERED_SUMMARY.SUBJECT_ID",
        "CIS_COURSE_CATALOG.SUBJECT_ID"
      ],
      [
        "SIS_DEPARTMENT.DEPARTMENT_CODE",
        "SIS_SUBJECT_CODE.DEPARTMENT_CODE"
      ]
    ]
  },
  {
    "question": "Group subjects by cluster type, department offering the subject, and the school name. For each group, list the cluster type, name of the department, school name, whether the department grants degrees, total number of subjects, total enrollment, and average enrollment. Exclude clusters or schools with no student data.",
    "sql": "WITH ClusterSummary AS (SELECT sos.CLUSTER_TYPE, sos.OFFER_DEPT_NAME AS DEPARTMENT, sd.SCHOOL_NAME, COUNT(DISTINCT sos.SUBJECT_ID) AS num_subjects, SUM(sos.NUM_ENROLLED_STUDENTS) AS total_enrollment, AVG(sos.NUM_ENROLLED_STUDENTS) AS avg_enrollment, sd.IS_DEGREE_GRANTING AS degree_granting_status FROM SUBJECT_OFFERED_SUMMARY sos LEFT JOIN SIS_COURSE_DESCRIPTION scd ON sos.COURSE_NUMBER = scd.COURSE LEFT JOIN SIS_DEPARTMENT sd ON sos.OFFER_DEPT_CODE = sd.DEPARTMENT_CODE WHERE sos.CLUSTER_TYPE IS NOT NULL AND sos.NUM_ENROLLED_STUDENTS > 0 AND sd.SCHOOL_NAME IS NOT NULL GROUP BY sos.CLUSTER_TYPE, sos.OFFER_DEPT_NAME, sd.SCHOOL_NAME, sd.IS_DEGREE_GRANTING) SELECT CLUSTER_TYPE, DEPARTMENT, SCHOOL_NAME, degree_granting_status, num_subjects, total_enrollment, avg_enrollment FROM ClusterSummary ORDER BY CLUSTER_TYPE, DEPARTMENT, SCHOOL_NAME;",
    "db_id": "dw",
    "mapping": {
      "cluster type": [
        "SUBJECT_OFFERED_SUMMARY.CLUSTER_TYPE"
      ],
      "name of the department": [
        "SUBJECT_OFFERED_SUMMARY.OFFER_DEPT_NAME"
      ],
      "school name": [
        "SIS_DEPARTMENT.SCHOOL_NAME"
      ],
      "whether the department grants degrees": [
        "SIS_DEPARTMENT.IS_DEGREE_GRANTING"
      ],
      "subjects": [
        "SUBJECT_OFFERED_SUMMARY.SUBJECT_ID"
      ],
      "enrollment": [
        "SUBJECT_OFFERED_SUMMARY.NUM_ENROLLED_STUDENTS"
      ]
    },
    "join_keys": [
      [
        "SUBJECT_OFFERED_SUMMARY.COURSE_NUMBER",
        "SIS_COURSE_DESCRIPTION.COURSE"
      ],
      [
        "SIS_DEPARTMENT.DEPARTMENT_CODE",
        "SUBJECT_OFFERED_SUMMARY.OFFER_DEPT_CODE"
      ]
    ]
  },
  {
    "question": "Group classes that take place in buildings at MIT by the building name and course level. For each group, provide the name of the building, the course level ('Graduate' or 'Undergraduate'), the total number of unique courses of such level, and total instructors for these courses. Include subtotals for each building and course level and a grand total across all buildings and course levels.",
    "sql": "WITH BuildingSubjectDetails AS (SELECT b.FAC_BUILDING_KEY, b.BUILDING_NAME, s.SUBJECT_ID, CASE WHEN scd.COURSE_LEVEL = 'G' THEN 'Graduate' WHEN scd.COURSE_LEVEL = 'U' THEN 'Undergraduate' ELSE 'Other' END AS course_level, COUNT(DISTINCT s.RESPONSIBLE_FACULTY_NAME) AS num_instructors FROM FAC_BUILDING b JOIN SUBJECT_OFFERED s ON b.FAC_BUILDING_KEY = s.MEET_PLACE JOIN SIS_COURSE_DESCRIPTION scd ON s.COURSE_NUMBER = scd.COURSE JOIN FAC_BUILDING_ADDRESS ba ON b.FAC_BUILDING_KEY = ba.BUILDING_KEY WHERE b.SITE = 'MIT' GROUP BY b.FAC_BUILDING_KEY, b.BUILDING_NAME, s.SUBJECT_ID, scd.COURSE_LEVEL), BuildingAggregates AS (SELECT BUILDING_NAME, course_level, COUNT(DISTINCT SUBJECT_ID) AS unique_courses, SUM(num_instructors) AS total_instructors FROM BuildingSubjectDetails GROUP BY ROLLUP(BUILDING_NAME, course_level)) SELECT BUILDING_NAME, course_level, unique_courses, total_instructors FROM BuildingAggregates ORDER BY unique_courses DESC, BUILDING_NAME;",
    "db_id": "dw",
    "mapping": {
      "name of the building": [
        "FAC_BUILDING.BUILDING_NAME"
      ],
      "course level": [
        "SIS_COURSE_DESCRIPTION.COURSE_LEVEL"
      ],
      "courses": [
        "SUBJECT_OFFERED_SUMMARY.SUBJECT_ID"
      ],
      "instructors": [
        "SUBJECT_OFFERED_SUMMARY.RESPONSIBLE_FACULTY_NAME"
      ]
    },
    "join_keys": [
      [
        "FAC_BUILDING.FAC_BUILDING_KEY",
        "SUBJECT_OFFERED.MEET_PLACE"
      ],
      [
        "SUBJECT_OFFERED.COURSE_NUMBER",
        "SIS_COURSE_DESCRIPTION.COURSE"
      ],
      [
        "FAC_BUILDING_ADDRESS.BUILDING_KEY",
        "FAC_BUILDING.FAC_BUILDING_KEY"
      ]
    ]
  },
  {
    "question": "For each course, provide the room number of course location, building name, building number, building city, building state, area, organization name, room usage, term code, course level, the total number of subjects, unique meeting times, and total units. Do not include meet place or meet times with NULL values.",
    "sql": "WITH MeetingPlaceDetails AS ( SELECT c.MEET_PLACE AS room_number, c.MEET_TIME, c.TERM_CODE, c.SUBJECT_ID, c.TOTAL_UNITS, b.BUILDING_NAME, b.BUILDING_NUMBER, ba.CITY AS building_city, ba.STATE AS building_state, fr.AREA, fr.ORGANIZATION_NAME, fmu.MAJOR_USE, scd.COURSE_LEVEL AS course_level, scd.COURSE_DESCRIPTION AS course_description FROM COURSE_CATALOG_SUBJECT_OFFERED c JOIN FAC_ROOMS fr ON c.MEET_PLACE = fr.ROOM JOIN FAC_BUILDING b ON fr.BUILDING_KEY = b.FAC_BUILDING_KEY JOIN FAC_MAJOR_USE fmu ON fr.MAJOR_USE_KEY = fmu.MAJOR_USE_KEY LEFT JOIN FAC_BUILDING_ADDRESS ba ON b.FAC_BUILDING_KEY = ba.BUILDING_KEY LEFT JOIN SIS_COURSE_DESCRIPTION scd ON c.SUBJECT_ID = scd.COURSE WHERE c.MEET_PLACE IS NOT NULL AND c.MEET_TIME IS NOT NULL ), MeetingPlaceAggregates AS ( SELECT room_number, BUILDING_NAME, BUILDING_NUMBER, building_city, building_state, AREA, ORGANIZATION_NAME, MAJOR_USE, TERM_CODE, course_level, COUNT(DISTINCT SUBJECT_ID) AS num_subjects, COUNT(DISTINCT MEET_TIME) AS unique_meet_times, SUM(TOTAL_UNITS) AS total_units FROM MeetingPlaceDetails GROUP BY room_number, BUILDING_NAME, BUILDING_NUMBER, building_city, building_state, AREA, ORGANIZATION_NAME, MAJOR_USE, TERM_CODE, course_level ) SELECT room_number, BUILDING_NAME, BUILDING_NUMBER, building_city, building_state, AREA, ORGANIZATION_NAME, MAJOR_USE, TERM_CODE, course_level, num_subjects, unique_meet_times, total_units FROM MeetingPlaceAggregates ORDER BY TERM_CODE, total_units DESC, room_number;",
    "db_id": "dw",
    "mapping": {
      "room number": [
        "COURSE_CATALOG_SUBJECT_OFFERED.MEET_PLACE"
      ],
      "building name": [
        "FAC_BUILDING.BUILDING_NAME"
      ],
      "building number": [
        "FAC_BUILDING.BUILDING_NUMBER"
      ],
      "building city": [
        "FAC_BUILDING_ADDRESS.CITY"
      ],
      "building state": [
        "FAC_BUILDING_ADDRESS.STATE"
      ],
      "area": [
        "FAC_ROOMS.AREA"
      ],
      "organization name": [
        "FAC_ROOMS.ORGANIZATION_NAME"
      ],
      "room usage": [
        "FAC_MAJOR_USE.MAJOR_USE"
      ],
      "term code": [
        "COURSE_CATALOG_SUBJECT_OFFERED.TERM_CODE"
      ],
      "course level": [
        "SIS_COURSE_DESCRIPTION.COURSE_LEVEL"
      ],
      "subjects": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_ID"
      ],
      "meeting times": [
        "COURSE_CATALOG_SUBJECT_OFFERED.MEET_TIME"
      ],
      "units": [
        "COURSE_CATALOG_SUBJECT_OFFERED.TOTAL_UNITS"
      ]
    },
    "join_keys": [
      [
        "FAC_ROOMS.ROOM",
        "COURSE_CATALOG_SUBJECT_OFFERED.MEET_PLACE"
      ],
      [
        "FAC_ROOMS.BUILDING_KEY",
        "FAC_BUILDING.FAC_BUILDING_KEY"
      ],
      [
        "FAC_ROOMS.MAJOR_USE_KEY",
        "FAC_MAJOR_USE.MAJOR_USE_KEY"
      ],
      [
        "FAC_BUILDING_ADDRESS.BUILDING_KEY",
        "FAC_BUILDING.FAC_BUILDING_KEY"
      ],
      [
        "SIS_COURSE_DESCRIPTION.COURSE",
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_ID"
      ]
    ]
  },
  {
    "question": "Consider only books cataloged on and after 2000. For each library material status and department, list the material status, department name, number of associated catalog items, and the total number of enrolled students in courses using those materials. Include subtotals for each material status and a grand total across all status (the corresponding status field is 'Grand Total').",
    "sql": "WITH MaterialUsage AS ( SELECT lms.LIBRARY_MATERIAL_STATUS, sc.DEPARTMENT_NAME AS department, COUNT(DISTINCT lrc.LIBRARY_RESERVE_CATALOG_KEY) AS num_catalog_items, SUM(lso.NUM_ENROLLED_STUDENTS) AS total_students FROM LIBRARY_RESERVE_MATRL_DETAIL lrd JOIN LIBRARY_MATERIAL_STATUS lms ON lrd.LIBRARY_MATERIAL_STATUS_KEY = lms.LIBRARY_MATERIAL_STATUS_KEY JOIN LIBRARY_RESERVE_CATALOG lrc ON lrd.LIBRARY_RESERVE_CATALOG_KEY = lrc.LIBRARY_RESERVE_CATALOG_KEY JOIN LIBRARY_SUBJECT_OFFERED lso ON lrd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY LEFT JOIN SIS_SUBJECT_CODE sc ON lso.COURSE_NUMBER = sc.COURSE_NUMBER WHERE lrc.CATALOG_YEAR >= 2000 GROUP BY lms.LIBRARY_MATERIAL_STATUS, sc.DEPARTMENT_NAME ), MaterialSubtotals AS ( SELECT LIBRARY_MATERIAL_STATUS, NULL AS department, SUM(num_catalog_items) AS total_catalog_items, SUM(total_students) AS total_students FROM MaterialUsage GROUP BY LIBRARY_MATERIAL_STATUS ), MaterialGrandTotal AS ( SELECT 'Grand Total' AS LIBRARY_MATERIAL_STATUS, NULL AS department, SUM(num_catalog_items) AS total_catalog_items, SUM(total_students) AS total_students FROM MaterialUsage ), MaterialCombined AS ( SELECT LIBRARY_MATERIAL_STATUS, department, num_catalog_items, total_students FROM MaterialUsage UNION ALL SELECT LIBRARY_MATERIAL_STATUS, department, total_catalog_items, total_students FROM MaterialSubtotals UNION ALL SELECT LIBRARY_MATERIAL_STATUS, department, total_catalog_items, total_students FROM MaterialGrandTotal ) SELECT COALESCE(LIBRARY_MATERIAL_STATUS, 'Subtotal') AS library_material_status, department, num_catalog_items, total_students FROM MaterialCombined ORDER BY CASE WHEN LIBRARY_MATERIAL_STATUS = 'Grand Total' THEN 1 WHEN department IS NULL THEN 2 ELSE 0 END, LIBRARY_MATERIAL_STATUS, department;",
    "db_id": "dw",
    "mapping": {
      "2000": [
        "LIBRARY_RESERVE_CATALOG.CATALOG_YEAR"
      ],
      "material status": [
        "LIBRARY_MATERIAL_STATUS.LIBRARY_MATERIAL_STATUS"
      ],
      "department name": [
        "SIS_SUBJECT_CODE.DEPARTMENT_NAME"
      ],
      "catalog items": [
        "LIBRARY_RESERVE_CATALOG.LIBRARY_RESERVE_CATALOG_KEY"
      ],
      "enrolled students": [
        "LIBRARY_SUBJECT_OFFERED.NUM_ENROLLED_STUDENTS"
      ]
    },
    "join_keys": [
      [
        "LIBRARY_MATERIAL_STATUS.LIBRARY_MATERIAL_STATUS_KEY",
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_MATERIAL_STATUS_KEY"
      ],
      [
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_RESERVE_CATALOG_KEY",
        "LIBRARY_RESERVE_CATALOG.LIBRARY_RESERVE_CATALOG_KEY"
      ],
      [
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_SUBJECT_OFFERED_KEY",
        "LIBRARY_SUBJECT_OFFERED.LIBRARY_SUBJECT_OFFERED_KEY"
      ],
      [
        "LIBRARY_SUBJECT_OFFERED.COURSE_NUMBER",
        "SIS_SUBJECT_CODE.COURSE_NUMBER"
      ]
    ]
  },
  {
    "question": "For each department in the library system, list the name of the department, total number of courses using library materials, the number of catalog items associated with those courses, and the average enrollment per course. Include a grand total across all departments (the corresponding department field should be 'Grand Total').",
    "sql": "WITH DepartmentLibraryUsage AS ( SELECT lci.DEPARTMENT, lci.COURSE_NAME, COUNT(DISTINCT lrc.LIBRARY_RESERVE_CATALOG_KEY) AS num_catalog_items, SUM(lso.NUM_ENROLLED_STUDENTS) AS total_students FROM LIBRARY_RESERVE_MATRL_DETAIL lrd JOIN LIBRARY_COURSE_INSTRUCTOR lci ON lrd.LIBRARY_COURSE_INSTRUCTOR_KEY = lci.LIBRARY_COURSE_INSTRUCTOR_KEY JOIN LIBRARY_RESERVE_CATALOG lrc ON lrd.LIBRARY_RESERVE_CATALOG_KEY = lrc.LIBRARY_RESERVE_CATALOG_KEY JOIN LIBRARY_SUBJECT_OFFERED lso ON lrd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY WHERE lso.NUM_ENROLLED_STUDENTS > 0 GROUP BY lci.DEPARTMENT, lci.COURSE_NAME ), DepartmentAggregates AS ( SELECT DEPARTMENT, COUNT(DISTINCT COURSE_NAME) AS total_courses, SUM(num_catalog_items) AS total_catalog_items, AVG(total_students) AS avg_students_per_course FROM DepartmentLibraryUsage GROUP BY DEPARTMENT ), GrandTotal AS ( SELECT 'Grand Total' AS DEPARTMENT, SUM(total_courses) AS total_courses, SUM(total_catalog_items) AS total_catalog_items, AVG(avg_students_per_course) AS avg_students_per_course FROM DepartmentAggregates ) SELECT * FROM ( SELECT * FROM GrandTotal UNION ALL SELECT * FROM DepartmentAggregates ) CombinedResults ORDER BY CASE WHEN DEPARTMENT = 'Grand Total' THEN 0 ELSE 1 END, DEPARTMENT;",
    "db_id": "dw",
    "mapping": {
      "name of the department": [
        "LIBRARY_COURSE_INSTRUCTOR.DEPARTMENT"
      ],
      "courses": [
        "LIBRARY_COURSE_INSTRUCTOR.COURSE_NAME"
      ],
      "catalog items": [
        "LIBRARY_RESERVE_CATALOG.LIBRARY_RESERVE_CATALOG_KEY"
      ],
      "enrollment": [
        "LIBRARY_SUBJECT_OFFERED.NUM_ENROLLED_STUDENTS"
      ]
    },
    "join_keys": [
      [
        "LIBRARY_COURSE_INSTRUCTOR.LIBRARY_COURSE_INSTRUCTOR_KEY",
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_COURSE_INSTRUCTOR_KEY"
      ],
      [
        "LIBRARY_RESERVE_CATALOG.LIBRARY_RESERVE_CATALOG_KEY",
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_RESERVE_CATALOG_KEY"
      ],
      [
        "LIBRARY_SUBJECT_OFFERED.LIBRARY_SUBJECT_OFFERED_KEY",
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_SUBJECT_OFFERED_KEY"
      ]
    ]
  },
  {
    "question": "For each department and school offering courses with materials, list the department name, school name, number of unique course materials, number of courses, average new and used shelf prices of materials, total material records, and number of distinct material statuses. Include a grand total across all schools and departments (the corresponding school and department fields should be null).",
    "sql": "WITH MaterialCostDetails AS ( SELECT tso.OFFER_DEPT_NAME AS department_name, tso.SUBJECT_TITLE, tm.TITLE AS material_title, tm.NEW_SHELF_PRICE, tm.USED_SHELF_PRICE, tms.TIP_MATERIAL_STATUS AS material_status, tms.TIP_MATERIAL_STATUS_CODE AS material_status_code, td.RECORD_COUNT AS material_record_count, ts.SCHOOL_NAME AS school_name FROM TIP_DETAIL td JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_SUBJECT_OFFERED tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY JOIN SIS_DEPARTMENT ts ON tso.OFFER_DEPT_CODE = ts.DEPARTMENT_CODE WHERE tso.IS_NO_COURSE_MATERIAL = 'N' ), MaterialCostAggregates AS ( SELECT department_name, school_name, COUNT(DISTINCT material_title) AS num_unique_materials, COUNT(DISTINCT SUBJECT_TITLE) AS num_courses, AVG(NEW_SHELF_PRICE) AS avg_new_price, AVG(USED_SHELF_PRICE) AS avg_used_price, SUM(material_record_count) AS total_material_records, COUNT(DISTINCT material_status) AS num_material_statuses FROM MaterialCostDetails GROUP BY department_name, school_name ), GrandTotal AS ( SELECT NULL AS department_name, NULL AS school_name, COUNT(DISTINCT material_title) AS num_unique_materials, COUNT(DISTINCT SUBJECT_TITLE) AS num_courses, AVG(NEW_SHELF_PRICE) AS avg_new_price, AVG(USED_SHELF_PRICE) AS avg_used_price, SUM(material_record_count) AS total_material_records, COUNT(DISTINCT material_status) AS num_material_statuses FROM MaterialCostDetails ) SELECT department_name, school_name, num_unique_materials, num_courses, avg_new_price, avg_used_price, total_material_records, num_material_statuses FROM MaterialCostAggregates UNION ALL SELECT department_name, school_name, num_unique_materials, num_courses, avg_new_price, avg_used_price, total_material_records, num_material_statuses FROM GrandTotal ORDER BY school_name, department_name;",
    "db_id": "dw",
    "mapping": {
      "courses with materials": [
        "TIP_SUBJECT_OFFERED.IS_NO_COURSE_MATERIAL"
      ],
      "department name": [
        "TIP_SUBJECT_OFFERED.OFFER_DEPT_NAME"
      ],
      "school name": [
        "SIS_DEPARTMENT.SCHOOL_NAME"
      ],
      "course materials": [
        "TIP_MATERIAL.TITLE"
      ],
      "courses": [
        "TIP_SUBJECT_OFFERED.SUBJECT_TITLE"
      ],
      "new": [
        "TIP_MATERIAL.NEW_SHELF_PRICE"
      ],
      "used": [
        "TIP_MATERIAL.USED_SHELF_PRICE"
      ],
      "material records": [
        "TIP_DETAIL.RECORD_COUNT"
      ],
      "material statuses": [
        "TIP_MATERIAL_STATUS.TIP_MATERIAL_STATUS"
      ]
    },
    "join_keys": [
      [
        "TIP_MATERIAL.TIP_MATERIAL_KEY",
        "TIP_DETAIL.TIP_MATERIAL_KEY"
      ],
      [
        "TIP_SUBJECT_OFFERED.TIP_SUBJECT_OFFERED_KEY",
        "TIP_DETAIL.TIP_SUBJECT_OFFERED_KEY"
      ],
      [
        "TIP_DETAIL.TIP_MATERIAL_STATUS_KEY",
        "TIP_MATERIAL_STATUS.TIP_MATERIAL_STATUS_KEY"
      ],
      [
        "SIS_DEPARTMENT.DEPARTMENT_CODE",
        "TIP_SUBJECT_OFFERED.OFFER_DEPT_CODE"
      ]
    ]
  },
  {
    "question": "For each TIP material status, list the total number of unique materials associated with the status, the total number of records associated with the status, and the total student enrollment associated with the status. Any material status with null values should be displayed as 'No material status'. Additionally, include a grand total across all material status (the material status for this row should be displayed as 'Grand Total').",
    "sql": "WITH MaterialStatusDetails AS ( SELECT tms.TIP_MATERIAL_STATUS AS material_status, tm.TITLE AS material_title, td.RECORD_COUNT, tso.NUM_ENROLLED_STUDENTS FROM TIP_DETAIL td JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY JOIN TIP_MATERIAL tm ON td.TIP_MATERIAL_KEY = tm.TIP_MATERIAL_KEY JOIN TIP_SUBJECT_OFFERED tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY WHERE td.RECORD_COUNT > 0 ), MaterialStatusAggregates AS ( SELECT CASE WHEN GROUPING(material_status) = 1 THEN NULL WHEN material_status IS NULL THEN 'No material status' ELSE material_status END AS material_status, COUNT(DISTINCT material_title) AS num_materials, SUM(RECORD_COUNT) AS total_record_count, SUM(NUM_ENROLLED_STUDENTS) AS total_enrollment FROM MaterialStatusDetails GROUP BY ROLLUP(material_status) ) SELECT COALESCE(material_status, 'Grand Total') AS material_status, num_materials, total_record_count, total_enrollment FROM MaterialStatusAggregates ORDER BY CASE WHEN material_status = 'Grand Total' THEN 1 ELSE 0 END, total_record_count DESC, material_status;",
    "db_id": "dw",
    "mapping": {
      "TIP material status": [
        "TIP_MATERIAL_STATUS.TIP_MATERIAL_STATUS"
      ],
      "materials": [
        "TIP_MATERIAL.TITLE"
      ],
      "records": [
        "TIP_DETAIL.RECORD_COUNT"
      ],
      "student enrollment": [
        "TIP_SUBJECT_OFFERED.NUM_ENROLLED_STUDENTS"
      ]
    },
    "join_keys": [
      [
        "TIP_DETAIL.TIP_MATERIAL_STATUS_KEY",
        "TIP_MATERIAL_STATUS.TIP_MATERIAL_STATUS_KEY"
      ],
      [
        "TIP_DETAIL.TIP_MATERIAL_KEY",
        "TIP_MATERIAL.TIP_MATERIAL_KEY"
      ],
      [
        "TIP_DETAIL.TIP_SUBJECT_OFFERED_KEY",
        "TIP_SUBJECT_OFFERED.TIP_SUBJECT_OFFERED_KEY"
      ]
    ]
  },
  {
    "question": "For each room, list its associated building name, floor number, room number, ownership type, organization name, number of rooms, area, and percentage of area relative to the building. Include subtotals across floors, subtotals across all floors for each building, and a grand total across all buildings. For the subtotal for each building and the grand total, the percentage of area should be relative to area of all buildings. All numeric values should be rounded to integers and formatted using commas as thousands separators except the relative percentages which should be rounded to two decimal places.",
    "sql": "WITH FloorStats AS (SELECT f.FCLT_BUILDING_KEY, b.BUILDING_NAME_LONG AS Building_Name, f.FLOOR, r.BUILDING_ROOM AS Room, COUNT(r.FCLT_ROOM_KEY) AS Room_Count, SUM(r.AREA) AS Total_Floor_Area, SUM(SUM(r.AREA)) OVER (PARTITION BY f.FCLT_BUILDING_KEY) AS Building_Total_Area, SUM(SUM(r.AREA)) OVER () AS Overall_Total_Area, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME AS Organization_Name FROM FCLT_FLOOR f LEFT JOIN FCLT_ROOMS r ON f.FCLT_FLOOR_KEY = r.FCLT_FLOOR_KEY LEFT JOIN FCLT_BUILDING b ON f.FCLT_BUILDING_KEY = b.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION o ON r.FCLT_ORGANIZATION_KEY = o.FCLT_ORGANIZATION_KEY GROUP BY f.FCLT_BUILDING_KEY, b.BUILDING_NAME_LONG, f.FLOOR, r.BUILDING_ROOM, b.OWNERSHIP_TYPE, o.ORGANIZATION_NAME), RollupWithPercentages AS (SELECT Building_Name, FLOOR, CASE WHEN GROUPING(Room) = 0 THEN Room ELSE NULL END AS Room, CASE WHEN GROUPING_ID(Building_Name, FLOOR, Room) > 0 THEN NULL ELSE OWNERSHIP_TYPE END AS OWNERSHIP_TYPE, MAX(Organization_Name) AS Organization_Name, SUM(Room_Count) AS Total_Rooms, SUM(Total_Floor_Area) AS Total_Area, MAX(Building_Total_Area) AS Building_Total_Area, MAX(Overall_Total_Area) AS Overall_Total_Area FROM FloorStats GROUP BY ROLLUP(Building_Name, FLOOR, Room), OWNERSHIP_TYPE, Organization_Name), GrandTotal AS (SELECT NULL AS Building_Name, NULL AS FLOOR, NULL AS Room, NULL AS OWNERSHIP_TYPE, NULL AS Organization_Name, SUM(Total_Rooms) AS Total_Rooms, SUM(Total_Area) AS Total_Area, NULL AS Building_Total_Area, MAX(Overall_Total_Area) AS Overall_Total_Area, 0 AS SortOrder, 100 AS Percent_Of_Total FROM RollupWithPercentages WHERE Building_Name IS NOT NULL), AllData AS (SELECT 0 AS SortOrder, Building_Name, FLOOR, Room, NULL AS OWNERSHIP_TYPE, NULL AS Organization_Name, Total_Rooms, Total_Area, Percent_Of_Total FROM GrandTotal UNION ALL SELECT 1 AS SortOrder, Building_Name, FLOOR, Room, CASE WHEN Building_Name IS NOT NULL THEN OWNERSHIP_TYPE ELSE NULL END AS OWNERSHIP_TYPE, Organization_Name, Total_Rooms, Total_Area, CASE WHEN FLOOR IS NOT NULL AND Building_Total_Area > 0 THEN ROUND(Total_Area * 100.0 / Building_Total_Area, 2) WHEN FLOOR IS NULL AND Building_Name IS NOT NULL AND Overall_Total_Area > 0 THEN ROUND(Total_Area * 100.0 / Overall_Total_Area, 2) ELSE NULL END AS Percent_Of_Total FROM RollupWithPercentages) SELECT Building_Name, FLOOR, Room, OWNERSHIP_TYPE, Organization_Name, TO_CHAR(Total_Rooms, '999,999') AS Total_Rooms, TO_CHAR(Total_Area, '999,999,999') AS Total_Area, Percent_Of_Total FROM AllData ORDER BY SortOrder, Building_Name, FLOOR, Room;",
    "db_id": "dw",
    "mapping": {
      "room": [
        "FCLT_ROOMS.FCLT_ROOM_KEY"
      ],
      "building name": [
        "FCLT_BUILDING.BUILDING_NAME_LONG"
      ],
      "floor number": [
        "FCLT_FLOOR.FLOOR"
      ],
      "room number": [
        "FCLT_ROOMS.BUILDING_ROOM"
      ],
      "ownership type": [
        "FCLT_BUILDING.OWNERSHIP_TYPE"
      ],
      "organization name": [
        "FCLT_ORGANIZATION.ORGANIZATION_NAME"
      ],
      "number of rooms": [
        "FCLT_ROOMS.FCLT_ROOM_KEY"
      ],
      "area": [
        "FCLT_ROOMS.AREA"
      ]
    },
    "join_keys": [
      [
        "FCLT_FLOOR.FCLT_FLOOR_KEY",
        "FCLT_ROOMS.FCLT_FLOOR_KEY"
      ],
      [
        "FCLT_BUILDING.FCLT_BUILDING_KEY",
        "FCLT_FLOOR.FCLT_BUILDING_KEY"
      ],
      [
        "FCLT_ORGANIZATION.FCLT_ORGANIZATION_KEY",
        "FCLT_ROOMS.FCLT_ORGANIZATION_KEY"
      ]
    ]
  },
  {
    "question": "For each financial aid year and academic year, list the number of fiscal periods, quarters, the first and last term date, and number of distinct department-level term parameters.",
    "sql": "WITH FinancialAidDetails AS ( SELECT at.TERM_CODE, at.TERM_DESCRIPTION, at.ACADEMIC_YEAR, at.FINANCIAL_AID_YEAR, td.START_DATE AS Term_Start_Date, td.END_DATE AS Term_End_Date, tm.FISCAL_PERIOD, tm.FISCAL_YEAR, tq.FY_QUARTER_CODE, tp.TERM_PARAMETER AS Dept_Term_Param FROM ACADEMIC_TERMS at JOIN TIME_DAY td ON at.TERM_START_DATE = td.CALENDAR_DATE JOIN TIME_MONTH tm ON td.FISCAL_PERIOD = tm.FISCAL_PERIOD AND td.FISCAL_YEAR = tm.FISCAL_YEAR JOIN TIME_QUARTER tq ON tm.FISCAL_YEAR = tq.FISCAL_YEAR AND tm.FY_QUARTER_CODE = tq.FY_QUARTER_CODE LEFT JOIN ACADEMIC_TERM_PARAMETER tp ON at.TERM_CODE = tp.TERM_CODE WHERE at.FINANCIAL_AID_YEAR IS NOT NULL ) SELECT FINANCIAL_AID_YEAR, ACADEMIC_YEAR, COUNT(DISTINCT FISCAL_PERIOD) AS Total_Fiscal_Periods, COUNT(DISTINCT FY_QUARTER_CODE) AS Total_Quarters, MIN(Term_Start_Date) AS First_Term_Start_Date, MAX(Term_End_Date) AS Last_Term_End_Date, COUNT(DISTINCT Dept_Term_Param) AS Distinct_Term_Params FROM FinancialAidDetails GROUP BY FINANCIAL_AID_YEAR, ACADEMIC_YEAR ORDER BY FINANCIAL_AID_YEAR DESC, ACADEMIC_YEAR ASC;",
    "db_id": "dw",
    "mapping": {
      "financial aid year": [
        "ACADEMIC_TERMS.FINANCIAL_AID_YEAR"
      ],
      "academic year": [
        "ACADEMIC_TERMS.ACADEMIC_YEAR"
      ],
      "fiscal periods": [
        "TIME_MONTH.FISCAL_PERIOD"
      ],
      "quarters": [
        "TIME_QUARTER.FY_QUARTER_CODE"
      ],
      "term date": [
        "TIME_DAY.START_DATE",
        "TIME_DAY.END_DATE"
      ],
      "department-level term parameters": [
        "ACADEMIC_TERM_PARAMETER.TERM_PARAMETER"
      ]
    },
    "join_keys": [
      [
        "ACADEMIC_TERMS.TERM_START_DATE",
        "TIME_DAY.CALENDAR_DATE"
      ],
      [
        "TIME_DAY.FISCAL_PERIOD",
        "TIME_MONTH.FISCAL_PERIOD"
      ],
      [
        "TIME_QUARTER.FISCAL_YEAR",
        "TIME_MONTH.FISCAL_YEAR"
      ],
      [
        "ACADEMIC_TERM_PARAMETER.TERM_CODE",
        "ACADEMIC_TERMS.TERM_CODE"
      ]
    ]
  },
  {
    "question": "Group buildings by campus sectors. For each group, list the campus sector, name of the building, city and state where the building is located, total number of floors, total assignable area, total number of rooms, total number of organizations, ownership type, and a rank column indicating the order (1-indexed) of this row within each sector based on the descending order of assignable area. Include subtotals for each sector and a grand total across all sectors. The subtotal and grand total only need to computed over the total number of floors and assignable area.",
    "sql": "WITH BuildingArea AS ( SELECT b.CAMPUS_SECTOR, b.BUILDING_NAME_LONG AS Building_Name, f.FLOOR AS Floor_Number, b.ASSIGNABLE_AREA, ba.CITY AS Building_City, ba.STATE AS Building_State FROM FCLT_BUILDING b LEFT JOIN FCLT_FLOOR f ON b.FCLT_BUILDING_KEY = f.FCLT_BUILDING_KEY LEFT JOIN FCLT_BUILDING_ADDRESS ba ON b.FCLT_BUILDING_KEY = ba.FCLT_BUILDING_KEY ), TotalRooms AS ( SELECT b.BUILDING_NAME_LONG AS Building_Name, COUNT(r.FCLT_ROOM_KEY) AS Total_Rooms FROM FCLT_BUILDING b LEFT JOIN FCLT_ROOMS r ON b.FCLT_BUILDING_KEY = r.FCLT_BUILDING_KEY GROUP BY b.BUILDING_NAME_LONG ), TotalOrganizations AS ( SELECT b.BUILDING_NAME_LONG AS Building_Name, COUNT(DISTINCT o.FCLT_ORGANIZATION_KEY) AS Total_Organizations FROM FCLT_BUILDING b LEFT JOIN FCLT_ROOMS r ON b.FCLT_BUILDING_KEY = r.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION o ON r.FCLT_ORGANIZATION_KEY = o.FCLT_ORGANIZATION_KEY GROUP BY b.BUILDING_NAME_LONG ), BuildingDetails AS ( SELECT b.BUILDING_NAME_LONG AS Building_Name, b.OWNERSHIP_TYPE AS Ownership_Type FROM FCLT_BUILDING b ), RollupRows AS ( SELECT CASE WHEN GROUPING(CAMPUS_SECTOR) = 1 THEN NULL ELSE CAMPUS_SECTOR END AS Campus_Sector, CASE WHEN GROUPING(Building_Name) = 1 THEN NULL ELSE Building_Name END AS Building_Name, CASE WHEN GROUPING(Building_Name) = 1 THEN NULL ELSE MAX(Building_City) END AS Building_City, CASE WHEN GROUPING(Building_Name) = 1 THEN NULL ELSE MAX(Building_State) END AS Building_State, COUNT(DISTINCT Floor_Number) AS Total_Floors, SUM(ASSIGNABLE_AREA) AS Assignable_Area FROM BuildingArea GROUP BY ROLLUP(CAMPUS_SECTOR, Building_Name) ), RankedRows AS ( SELECT rr.Campus_Sector, rr.Building_Name, rr.Building_City, rr.Building_State, rr.Total_Floors, rr.Assignable_Area, tr.Total_Rooms, toz.Total_Organizations, bd.Ownership_Type, CASE WHEN rr.Building_Name IS NOT NULL THEN RANK() OVER (PARTITION BY rr.Campus_Sector ORDER BY rr.Assignable_Area DESC) - 1 ELSE NULL END AS Adjusted_Sector_Rank FROM RollupRows rr LEFT JOIN TotalRooms tr ON rr.Building_Name = tr.Building_Name LEFT JOIN TotalOrganizations toz ON rr.Building_Name = toz.Building_Name LEFT JOIN BuildingDetails bd ON rr.Building_Name = bd.Building_Name WHERE rr.Campus_Sector IS NOT NULL ), GrandTotal AS ( SELECT NULL AS Campus_Sector, NULL AS Building_Name, NULL AS Building_City, NULL AS Building_State, SUM(Total_Floors) AS Total_Floors, SUM(Assignable_Area) AS Assignable_Area, NULL AS Total_Rooms, NULL AS Total_Organizations, NULL AS Ownership_Type, 1 AS Adjusted_Sector_Rank FROM RankedRows ) SELECT Campus_Sector, Building_Name, Building_City, Building_State, Total_Floors, TO_CHAR(Assignable_Area, '999,999,999') AS Assignable_Area, Total_Rooms, Total_Organizations, Ownership_Type, Adjusted_Sector_Rank FROM RankedRows UNION ALL SELECT Campus_Sector, Building_Name, NULL AS Building_City, NULL AS Building_State, Total_Floors, TO_CHAR(Assignable_Area, '999,999,999') AS Assignable_Area, NULL AS Total_Rooms, NULL AS Total_Organizations, Ownership_Type, Adjusted_Sector_Rank FROM GrandTotal ORDER BY Campus_Sector, Adjusted_Sector_Rank, Building_Name;",
    "db_id": "dw",
    "mapping": {
      "campus sector": [
        "FCLT_BUILDING.CAMPUS_SECTOR"
      ],
      "name of the building": [
        "FCLT_BUILDING.BUILDING_NAME_LONG"
      ],
      "city": [
        "FCLT_BUILDING_ADDRESS.CITY"
      ],
      "state": [
        "FCLT_BUILDING_ADDRESS.STATE"
      ],
      "floors": [
        "FCLT_FLOOR.FLOOR"
      ],
      "area": [
        "FCLT_BUILDING.ASSIGNABLE_AREA"
      ],
      "rooms": [
        "FCLT_ROOMS.FCLT_ROOM_KEY"
      ],
      "organizations": [
        "FCLT_ORGANIZATION.FCLT_ORGANIZATION_KEY"
      ],
      "ownership type": [
        "FCLT_BUILDING.OWNERSHIP_TYPE"
      ]
    },
    "join_keys": [
      [
        "FCLT_BUILDING.FCLT_BUILDING_KEY",
        "FCLT_FLOOR.FCLT_BUILDING_KEY"
      ],
      [
        "FCLT_BUILDING.FCLT_BUILDING_KEY",
        "FCLT_BUILDING_ADDRESS.FCLT_BUILDING_KEY"
      ],
      [
        "FCLT_BUILDING.FCLT_BUILDING_KEY",
        "FCLT_ROOMS.FCLT_BUILDING_KEY"
      ],
      [
        "FCLT_ROOMS.FCLT_BUILDING_KEY",
        "FCLT_BUILDING.FCLT_BUILDING_KEY"
      ],
      [
        "FCLT_ROOMS.FCLT_ORGANIZATION_KEY",
        "FCLT_ORGANIZATION.FCLT_ORGANIZATION_KEY"
      ]
    ]
  },
  {
    "question": "For each department, list the name of the department, the title of the TIP material associated with the department, author, ISBN, library term code, and whether it is available in the library reserves ('Available in Library' if yes and 'Not Available in Library' otherwise), the total number of instructors per library book for the department, the total number of materials available in the library for the department, and the total number of available materials across all departments.",
    "sql": "WITH TIPMaterials AS (SELECT tm.TITLE AS TIP_Title, tm.AUTHOR AS TIP_Author, tm.ISBN AS TIP_ISBN, tso.OFFER_DEPT_NAME AS TIP_Department FROM TIP_MATERIAL tm JOIN TIP_DETAIL td ON tm.TIP_MATERIAL_KEY = td.TIP_MATERIAL_KEY JOIN TIP_SUBJECT_OFFERED tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY), LibraryReserves AS (SELECT lrc.CATALOG_ISBN AS Library_ISBN, lso.OFFER_DEPT_NAME AS Library_Department, lrmd.TERM_CODE, lci.INSTRUCTOR_NAME AS Library_Instructor_Name FROM LIBRARY_RESERVE_CATALOG lrc JOIN LIBRARY_RESERVE_MATRL_DETAIL lrmd ON lrc.LIBRARY_RESERVE_CATALOG_KEY = lrmd.LIBRARY_RESERVE_CATALOG_KEY JOIN LIBRARY_SUBJECT_OFFERED lso ON lrmd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY JOIN LIBRARY_COURSE_INSTRUCTOR lci ON lrmd.LIBRARY_COURSE_INSTRUCTOR_KEY = lci.LIBRARY_COURSE_INSTRUCTOR_KEY), CombinedData AS (SELECT tm.TIP_Title, tm.TIP_Author, tm.TIP_ISBN, tm.TIP_Department, lr.TERM_CODE, CASE WHEN lr.Library_ISBN IS NOT NULL THEN 'Available in Library' ELSE 'Not Available in Library' END AS Availability_Status, COUNT(DISTINCT lr.Library_Instructor_Name) OVER (PARTITION BY lr.Library_Department) AS Num_Instructors_Per_Dept FROM TIPMaterials tm LEFT JOIN LibraryReserves lr ON tm.TIP_ISBN = lr.Library_ISBN) SELECT DISTINCT TIP_Department, TIP_Title, TIP_Author, TIP_ISBN, TERM_CODE, Availability_Status, Num_Instructors_Per_Dept, COUNT(CASE WHEN Availability_Status = 'Available in Library' THEN 1 END) OVER (PARTITION BY TIP_Department) AS Available_Materials_Per_Dept, COUNT(CASE WHEN Availability_Status = 'Available in Library' THEN 1 END) OVER () AS Total_Available_Materials FROM CombinedData ORDER BY TIP_Department, TIP_Title;",
    "db_id": "dw",
    "mapping": {
      "name of the department": [
        "TIP_SUBJECT_OFFERED.OFFER_DEPT_NAME",
        "LIBRARY_SUBJECT_OFFERED.OFFER_DEPT_NAME"
      ],
      "title of the TIP material": [
        "TIP_MATERIAL.TITLE"
      ],
      "author": [
        "TIP_MATERIAL.AUTHOR"
      ],
      "ISBN": [
        "TIP_MATERIAL.ISBN"
      ],
      "library term code": [
        "LIBRARY_RESERVE_MATRL_DETAIL.TERM_CODE"
      ],
      "available": [
        "LIBRARY_RESERVE_CATALOG.CATALOG_ISBN"
      ],
      "instructors": [
        "LIBRARY_COURSE_INSTRUCTOR.INSTRUCTOR_NAME"
      ]
    },
    "join_keys": [
      [
        "TIP_MATERIAL.TIP_MATERIAL_KEY",
        "TIP_DETAIL.TIP_MATERIAL_KEY"
      ],
      [
        "TIP_SUBJECT_OFFERED.TIP_SUBJECT_OFFERED_KEY",
        "TIP_DETAIL.TIP_SUBJECT_OFFERED_KEY"
      ],
      [
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_RESERVE_CATALOG_KEY",
        "LIBRARY_RESERVE_CATALOG.LIBRARY_RESERVE_CATALOG_KEY"
      ],
      [
        "LIBRARY_SUBJECT_OFFERED.LIBRARY_SUBJECT_OFFERED_KEY",
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_SUBJECT_OFFERED_KEY"
      ],
      [
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_COURSE_INSTRUCTOR_KEY",
        "LIBRARY_COURSE_INSTRUCTOR.LIBRARY_COURSE_INSTRUCTOR_KEY"
      ]
    ]
  },
  {
    "question": "For each department and material status, list the name of the department, the material status, the number of TIP materials associated with this department and status, the number of library materials associated with this department and status, the total number of TIP and library materials associated with this department and status. Include a subtotal for each department and a grand total across all departments.",
    "sql": "WITH TIPMaterialStatuses AS ( SELECT tso.OFFER_DEPT_NAME AS Department, tms.TIP_MATERIAL_STATUS AS Status, COUNT(td.TIP_MATERIAL_KEY) AS Total_TIP_Materials FROM TIP_DETAIL td JOIN TIP_SUBJECT_OFFERED tso ON td.TIP_SUBJECT_OFFERED_KEY = tso.TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL_STATUS tms ON td.TIP_MATERIAL_STATUS_KEY = tms.TIP_MATERIAL_STATUS_KEY GROUP BY tso.OFFER_DEPT_NAME, tms.TIP_MATERIAL_STATUS ), LibraryMaterialStatuses AS ( SELECT lso.OFFER_DEPT_NAME AS Department, lms.LIBRARY_MATERIAL_STATUS AS Status, COUNT(lrmd.LIBRARY_RESERVE_CATALOG_KEY) AS Total_Library_Materials FROM LIBRARY_RESERVE_MATRL_DETAIL lrmd JOIN LIBRARY_SUBJECT_OFFERED lso ON lrmd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY JOIN LIBRARY_MATERIAL_STATUS lms ON lrmd.LIBRARY_MATERIAL_STATUS_KEY = lms.LIBRARY_MATERIAL_STATUS_KEY GROUP BY lso.OFFER_DEPT_NAME, lms.LIBRARY_MATERIAL_STATUS ), CombinedStatuses AS ( SELECT COALESCE(tms.Department, lms.Department) AS Department, COALESCE(tms.Status, lms.Status) AS Status, COALESCE(tms.Total_TIP_Materials, 0) AS Total_TIP_Materials, COALESCE(lms.Total_Library_Materials, 0) AS Total_Library_Materials FROM TIPMaterialStatuses tms FULL OUTER JOIN LibraryMaterialStatuses lms ON tms.Department = lms.Department AND tms.Status = lms.Status ) SELECT Department, Status, SUM(Total_TIP_Materials) AS Total_TIP_Materials, SUM(Total_Library_Materials) AS Total_Library_Materials, SUM(Total_TIP_Materials + Total_Library_Materials) AS Total_All_Materials FROM CombinedStatuses GROUP BY ROLLUP(Department, Status) ORDER BY Department, Status;",
    "db_id": "dw",
    "mapping": {
      "name of the department": [
        "TIP_SUBJECT_OFFERED.OFFER_DEPT_NAME"
      ],
      "material status": [
        "TIP_MATERIAL_STATUS.TIP_MATERIAL_STATUS",
        "LIBRARY_MATERIAL_STATUS.LIBRARY_MATERIAL_STATUS"
      ],
      "TIP materials": [
        "TIP_DETAIL.TIP_MATERIAL_KEY"
      ],
      "library materials": [
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_RESERVE_CATALOG_KEY"
      ]
    },
    "join_keys": [
      [
        "TIP_DETAIL.TIP_SUBJECT_OFFERED_KEY",
        "TIP_SUBJECT_OFFERED.TIP_SUBJECT_OFFERED_KEY"
      ],
      [
        "TIP_MATERIAL_STATUS.TIP_MATERIAL_STATUS_KEY",
        "TIP_DETAIL.TIP_MATERIAL_STATUS_KEY"
      ],
      [
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_SUBJECT_OFFERED_KEY",
        "LIBRARY_SUBJECT_OFFERED.LIBRARY_SUBJECT_OFFERED_KEY"
      ],
      [
        "LIBRARY_MATERIAL_STATUS.LIBRARY_MATERIAL_STATUS_KEY",
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_MATERIAL_STATUS_KEY"
      ]
    ]
  },
  {
    "question": "For each building that is not a subdivision, list the building number, full name, street address, building type, occupancy date, ownership type, and site location. You should also include three rows at the end showing the number of owned, leased, all buildings at MIT that are not subdivisions, in the format of (null, #building Buildings, null, null, null, null, null).",
    "sql": "SELECT * FROM ( SELECT FAC_BUILDING.BUILDING_NUMBER AS BUILDING, FAC_BUILDING.BUILDING_NAME_LONG AS NAME, BUILDINGS.BUILDING_STREET_ADDRESS AS \"STREET ADDRESS\", FAC_BUILDING.BUILDING_TYPE AS TYPE, FAC_BUILDING.DATE_OCCUPIED, FAC_BUILDING.OWNERSHIP_TYPE AS OWNERSHIP, FAC_BUILDING.SITE AS SITE FROM FAC_BUILDING_ADDRESS JOIN FAC_BUILDING on FAC_BUILDING_ADDRESS.BUILDING_KEY = FAC_BUILDING.FAC_BUILDING_KEY JOIN BUILDINGS on FAC_BUILDING_ADDRESS.BUILDING_KEY = BUILDINGS.BUILDING_KEY WHERE FAC_BUILDING_ADDRESS.ADDRESS_PURPOSE = 'STREET' AND FAC_BUILDING.PARENT_BUILDING_NUMBER IS NULL ) UNION ALL SELECT null, TO_CHAR(COUNT(FAC_BUILDING.BUILDING_NUMBER)) || ' Buildings', null, null, null, null, null FROM FAC_BUILDING_ADDRESS JOIN FAC_BUILDING on FAC_BUILDING_ADDRESS.BUILDING_KEY = FAC_BUILDING.FAC_BUILDING_KEY WHERE FAC_BUILDING.OWNERSHIP_TYPE = 'OWNED' AND FAC_BUILDING_ADDRESS.ADDRESS_PURPOSE = 'STREET' AND FAC_BUILDING.PARENT_BUILDING_NUMBER IS NULL AND FAC_BUILDING.SITE = 'MIT' UNION ALL SELECT null, TO_CHAR(COUNT(FAC_BUILDING.BUILDING_NUMBER)) || ' Buildings', null, null, null, null, null FROM FAC_BUILDING_ADDRESS JOIN FAC_BUILDING ON FAC_BUILDING_ADDRESS.BUILDING_KEY = FAC_BUILDING.FAC_BUILDING_KEY WHERE FAC_BUILDING.OWNERSHIP_TYPE = 'LEASED' AND FAC_BUILDING_ADDRESS.ADDRESS_PURPOSE = 'STREET' AND FAC_BUILDING.PARENT_BUILDING_NUMBER IS NULL AND FAC_BUILDING.SITE = 'MIT' UNION ALL SELECT null, TO_CHAR(COUNT(FAC_BUILDING.BUILDING_NUMBER)) || ' Buildings', null, null, null, null, null FROM FAC_BUILDING_ADDRESS JOIN FAC_BUILDING ON FAC_BUILDING_ADDRESS.BUILDING_KEY = FAC_BUILDING.FAC_BUILDING_KEY WHERE FAC_BUILDING_ADDRESS.ADDRESS_PURPOSE = 'STREET' AND FAC_BUILDING.PARENT_BUILDING_NUMBER IS NULL AND FAC_BUILDING.SITE = 'MIT';",
    "db_id": "dw",
    "mapping": {
      "subdivision": [
        "FAC_BUILDING.PARENT_BUILDING_NUMBER"
      ],
      "building number": [
        "FAC_BUILDING.BUILDING_NUMBER"
      ],
      "full name": [
        "FAC_BUILDING.BUILDING_NAME_LONG"
      ],
      "street address": [
        "BUILDINGS.BUILDING_STREET_ADDRESS",
        "FAC_BUILDING_ADDRESS.ADDRESS_PURPOSE"
      ],
      "building type": [
        "FAC_BUILDING.BUILDING_TYPE"
      ],
      "occupancy date": [
        "FAC_BUILDING.DATE_OCCUPIED"
      ],
      "ownership type": [
        "FAC_BUILDING.OWNERSHIP_TYPE"
      ],
      "site location": [
        "FAC_BUILDING.SITE"
      ]
    },
    "join_keys": [
      [
        "FAC_BUILDING_ADDRESS.BUILDING_KEY",
        "FAC_BUILDING.FAC_BUILDING_KEY"
      ],
      [
        "BUILDINGS.BUILDING_KEY",
        "FAC_BUILDING_ADDRESS.BUILDING_KEY"
      ],
      [
        "FAC_BUILDING.FAC_BUILDING_KEY",
        "FAC_BUILDING_ADDRESS.BUILDING_KEY"
      ],
      [
        "FAC_BUILDING.FAC_BUILDING_KEY",
        "FAC_BUILDING_ADDRESS.BUILDING_KEY"
      ],
      [
        "FAC_BUILDING.FAC_BUILDING_KEY",
        "FAC_BUILDING_ADDRESS.BUILDING_KEY"
      ]
    ]
  },
  {
    "question": "For each owned building that is not a subdivision, list the construction start year, the building number, and the year of initial occupancy. Display the construction start year only if it differs from the previous row. If the year of initial occupancy or construction start year is unknown, display 'UNKNOWN'. You should also include a row at the end showing the total number of owned buildings that are not subdivisions, in the format of (null, #building Buildings, null).",
    "sql": "SELECT CASE WHEN LAG(year_construct_began) OVER (ORDER BY year_construct_began, building_sort, BUILDING_NUMBER) = year_construct_began THEN NULL WHEN BUILDING_NUMBER IS NULL THEN NULL ELSE year_construct_began END AS \"YEAR CONSTRUCT BEGAN\", BUILDING_NUMBER AS BUILDING, year_occupied AS \"YEAR INITIALLY OCCUPIED\" FROM ( SELECT year_construct_began, temp2.BUILDING_NUMBER, CASE WHEN FAC_BUILDING.BUILDING_NUMBER IS NOT NULL THEN NVL(TO_CHAR(TO_DATE(FAC_BUILDING.DATE_OCCUPIED, 'MM/DD/YYYY'), 'YYYY'), 'UNKNOWN') ELSE NULL END AS year_occupied, CASE WHEN FAC_BUILDING.BUILDING_NUMBER IS NOT NULL THEN building_sort ELSE NULL END AS building_sort FROM ( SELECT CASE WHEN BUILDING_NUMBER IS NOT NULL THEN year_construct_began ELSE year_construct_began || '*' END AS year_construct_began, BUILDING_NUMBER FROM ( SELECT NVL(TO_CHAR(TO_DATE(DATE_BUILT, 'MM/DD/YYYY'), 'YYYY'), 'UNKNOWN') AS year_construct_began, BUILDING_NUMBER FROM FAC_BUILDING WHERE ownership_type = 'OWNED' AND PARENT_BUILDING_NUMBER IS NULL ) temp1 GROUP BY year_construct_began, BUILDING_NUMBER HAVING year_construct_began IS NOT NULL ) temp2 LEFT JOIN FAC_BUILDING ON FAC_BUILDING.BUILDING_NUMBER = temp2.BUILDING_NUMBER ) temp3 UNION ALL SELECT NULL, TO_CHAR(COUNT(FAC_BUILDING.BUILDING_NUMBER)) || ' Buildings', NULL FROM FAC_BUILDING WHERE ownership_type = 'OWNED' AND PARENT_BUILDING_NUMBER IS NULL;",
    "db_id": "dw",
    "mapping": {
      "subdivision": [
        "FAC_BUILDING.PARENT_BUILDING_NUMBER"
      ],
      "building number": [
        "FAC_BUILDING.PARENT_BUILDING_NUMBER"
      ],
      "construction start year": [
        "FAC_BUILDING.DATE_BUILT"
      ],
      "year of initial occupancy": [
        "FAC_BUILDING.DATE_OCCUPIED"
      ]
    },
    "join_keys": []
  },
  {
    "question": "Group all buildings at MIT into either owned or leased. For each group, state the ownership type, usage type, number of buildings, gross square footage, number of rooms, and the number of associated organizations. Display the ownership type only if it differs from the previous row. Include subtotals for each group and a grand total across all groups. The subtotal and grand total rows should not include ownership type and usage type. Footage should be rounded to integers and formatted using commas as thousands separators.",
    "sql": "SELECT CASE WHEN LAG(OWNERSHIP) OVER (ORDER BY OWNERSHIP_TYPE DESC, TYPE) = OWNERSHIP THEN NULL ELSE OWNERSHIP END AS OWNERSHIP, TYPE, BUILDINGS, GROSS_SQFT, ROOM_COUNT, ORG_COUNT FROM ( SELECT CASE WHEN GROUPING(FLOOR.OWNERSHIP_TYPE) = 1 AND GROUPING(FLOOR.BUILDING_USE) = 0 THEN FLOOR.OWNERSHIP_TYPE || '1' ELSE FLOOR.OWNERSHIP_TYPE || '2' END AS OWNERSHIP_TYPE, CASE WHEN GROUPING(FLOOR.BUILDING_USE) = 1 AND GROUPING(FLOOR.OWNERSHIP_TYPE) = 0 THEN null WHEN GROUPING(FLOOR.BUILDING_USE) = 1 AND GROUPING(FLOOR.OWNERSHIP_TYPE) = 1 THEN null ELSE FLOOR.OWNERSHIP_TYPE END AS OWNERSHIP, FLOOR.BUILDING_USE AS TYPE, COUNT(DISTINCT NVL(FLOOR.PARENT_BUILDING_NUMBER, FLOOR.FCLT_BUILDING_KEY)) AS BUILDINGS, TO_CHAR(SUM(FLOOR.EXT_GROSS_AREA), '999,999,999,999') AS GROSS_SQFT, COUNT(DISTINCT rm.FCLT_ROOM_KEY) AS ROOM_COUNT, COUNT(DISTINCT org.FCLT_ORGANIZATION_KEY) AS ORG_COUNT FROM FCLT_BUILDING_HIST FLOOR LEFT JOIN FCLT_ROOMS rm ON FLOOR.FCLT_BUILDING_KEY = rm.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION org ON rm.FCLT_ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY WHERE FLOOR.SITE = 'MIT' GROUP BY ROLLUP(FLOOR.OWNERSHIP_TYPE, FLOOR.BUILDING_USE) ORDER BY FLOOR.OWNERSHIP_TYPE DESC, FLOOR.BUILDING_USE ) tbltmp;",
    "db_id": "dw",
    "mapping": {
      "ownership type": [
        "FCLT_BUILDING_HIST.OWNERSHIP_TYPE"
      ],
      "usage type": [
        "FCLT_BUILDING_HIST.BUILDING_USE"
      ],
      "buildings": [
        "FCLT_BUILDING_HIST.PARENT_BUILDING_NUMBER",
        "FCLT_BUILDING_HIST.FCLT_BUILDING_KEY"
      ],
      "gross square footage": [
        "FCLT_BUILDING_HIST.EXT_GROSS_AREA"
      ],
      "rooms": [
        "FCLT_ROOMS.FCLT_ROOM_KEY"
      ],
      "organizations": [
        "FCLT_ORGANIZATION.FCLT_ORGANIZATION_KEY"
      ]
    },
    "join_keys": [
      [
        "FCLT_ROOMS.FCLT_BUILDING_KEY",
        "FCLT_BUILDING_HIST.FCLT_BUILDING_KEY"
      ],
      [
        "FCLT_ORGANIZATION.FCLT_ORGANIZATION_KEY",
        "FCLT_ROOMS.FCLT_ORGANIZATION_KEY"
      ]
    ]
  },
  {
    "question": "For each building use, list the type, the number of distinct buildings (excluding subdivisions) of this use, the total gross square footage of these buildings, and the number of unique organizations associated with the rooms in these buildings. If the building is used as a residence, display the usage type as \"RESIDENTIAL.\" You should also include a row at the end showing the total number of buildings, the gross square footage, and the number of organizations across all types of building use. All numerical values should be rounded to integers and formatted using commas as thousands separators.",
    "sql": "SELECT * FROM ( SELECT CASE WHEN FLOOR.BUILDING_USE = 'RESIDENT' THEN 'RESIDENTIAL' ELSE FLOOR.BUILDING_USE END AS TYPE, COUNT(DISTINCT NVL(FLOOR.PARENT_BUILDING_NUMBER, FLOOR.FCLT_BUILDING_KEY)) AS BUILDINGS, TO_CHAR(SUM(FLOOR.EXT_GROSS_AREA), '999,999,999,999,999') AS GROSS_SQFT, COUNT(DISTINCT org.FCLT_ORGANIZATION_KEY) AS NUM_ORGANIZATIONS FROM FCLT_BUILDING FLOOR LEFT JOIN FCLT_ROOMS rm ON FLOOR.FCLT_BUILDING_KEY = rm.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION org ON rm.FCLT_ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY WHERE FLOOR.BUILDING_USE IS NOT NULL GROUP BY FLOOR.BUILDING_USE ) UNION ALL SELECT NULL AS TYPE, COUNT(DISTINCT NVL(FLOOR.PARENT_BUILDING_NUMBER, FLOOR.FCLT_BUILDING_KEY)) AS BUILDINGS, TO_CHAR(SUM(FLOOR.EXT_GROSS_AREA), '999,999,999,999,999') AS GROSS_SQFT, COUNT(DISTINCT org.FCLT_ORGANIZATION_KEY) AS NUM_ORGANIZATIONS FROM FCLT_BUILDING FLOOR LEFT JOIN FCLT_ROOMS rm ON FLOOR.FCLT_BUILDING_KEY = rm.FCLT_BUILDING_KEY LEFT JOIN FCLT_ORGANIZATION org ON rm.FCLT_ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY;",
    "db_id": "dw",
    "mapping": {
      "building use": [
        "FCLT_BUILDING.BUILDING_USE"
      ],
      "buildings": [
        "FCLT_BUILDING.PARENT_BUILDING_NUMBER",
        "FCLT_BUILDING.FCLT_BUILDING_KEY"
      ],
      "gross square footage": [
        "FCLT_BUILDING.EXT_GROSS_AREA"
      ],
      "organizations": [
        "FCLT_ORGANIZATION.FCLT_ORGANIZATION_KEY"
      ]
    },
    "join_keys": [
      [
        "FCLT_ROOMS.FCLT_BUILDING_KEY",
        "FCLT_BUILDING.FCLT_BUILDING_KEY"
      ],
      [
        "FCLT_ROOMS.FCLT_ORGANIZATION_KEY",
        "FCLT_ORGANIZATION.FCLT_ORGANIZATION_KEY"
      ],
      [
        "FCLT_ROOMS.FCLT_BUILDING_KEY",
        "FCLT_BUILDING.FCLT_BUILDING_KEY"
      ],
      [
        "FCLT_ROOMS.FCLT_ORGANIZATION_KEY",
        "FCLT_ORGANIZATION.FCLT_ORGANIZATION_KEY"
      ]
    ]
  },
  {
    "question": "For each organization except Cambridge-MIT Institute, list its ID, number, level, formatted name according to level (if level is 2, there should be 1 space before the name, if level is 3, there should be 2 space before the name, up to level 6), whether it is assignable ('ASSIGNABLE' if assignable, 'NON-ASSIGNABLE' otherwise), total area, number of rooms, and average room area. Area and number of rooms should be rounded to integers and formatted using commas as thousands separators.",
    "sql": "SELECT o1.organization_id, organization_number, organization_level, CASE WHEN organization_level = 2 THEN ' ' || organization_name WHEN organization_level = 3 THEN ' ' || organization_name WHEN organization_level = 4 THEN ' ' || organization_name WHEN organization_level = 5 THEN ' ' || organization_name WHEN organization_level = 6 THEN ' ' || organization_name ELSE organization_name END AS formatted_name, CASE WHEN ASSIGNABLE = 1 THEN 'ASSIGNABLE' ELSE 'NON-ASSIGNABLE' END AS assign, (SELECT TO_CHAR(SUM(area), '999,999,999') FROM FCLT_ROOMS r JOIN FCLT_ORGANIZATION o on r.FCLT_ORGANIZATION_KEY = o.FCLT_ORGANIZATION_KEY WHERE o.organization_id = o1.organization_id) AS area, (SELECT TO_CHAR(COUNT(ROOM), '999,999,999') FROM FCLT_ROOMS r JOIN FCLT_ORGANIZATION o on r.FCLT_ORGANIZATION_KEY = o.FCLT_ORGANIZATION_KEY WHERE o.organization_id = o1.organization_id) AS rmcnt, (SELECT TO_CHAR(AVG(area), '999,999,999') FROM FCLT_ROOMS r JOIN FCLT_ORGANIZATION o on r.FCLT_ORGANIZATION_KEY = o.FCLT_ORGANIZATION_KEY WHERE o.organization_id = o1.organization_id) AS area_avg FROM FCLT_ORGANIZATION o1 JOIN MASTER_DEPT_HIERARCHY ON o1.DLC_KEY = MASTER_DEPT_HIERARCHY.DLC_KEY WHERE o1.organization_name NOT IN ('CAMBRIDGE-MIT INST')",
    "db_id": "dw",
    "mapping": {
      "Cambridge-MIT Institute": [
        "FCLT_ORGANIZATION.ORGANIZATION_NAME"
      ],
      "ID": [
        "FCLT_ORGANIZATION.ORGANIZATION_ID"
      ],
      "number": [
        "FCLT_ORGANIZATION.ORGANIZATION_NUMBER"
      ],
      "level": [
        "FCLT_ORGANIZATION.ORGANIZATION_LEVEL"
      ],
      "name": [
        "FCLT_ORGANIZATION.ORGANIZATION_NAME"
      ],
      "assignable": [
        "FCLT_ORGANIZATION.ASSIGNABLE"
      ],
      "area": [
        "FCLT_ROOMS.AREA"
      ],
      "rooms": [
        "FCLT_ROOMS.ROOM"
      ],
      "room area": [
        "FCLT_ROOMS.AREA"
      ]
    },
    "join_keys": [
      [
        "FCLT_ORGANIZATION.FCLT_ORGANIZATION_KEY",
        "FCLT_ROOMS.FCLT_ORGANIZATION_KEY"
      ],
      [
        "FCLT_ROOMS.FCLT_ORGANIZATION_KEY",
        "FCLT_ORGANIZATION.FCLT_ORGANIZATION_KEY"
      ],
      [
        "FCLT_ROOMS.FCLT_ORGANIZATION_KEY",
        "FCLT_ORGANIZATION.FCLT_ORGANIZATION_KEY"
      ],
      [
        "FCLT_ORGANIZATION.DLC_KEY",
        "MASTER_DEPT_HIERARCHY.DLC_KEY"
      ]
    ]
  },
  {
    "question": "Group all rooms into whether or not they are assignable and the major use descriptions. For each group, state \"ASSIGNABLE\" if the room is assignable and \"NON-ASSIGNABLE\" otherwise, the major use description, the total number of rooms, total area, and average area. Include subtotals for each group and a grand total across all groups. The assignable status and major use descriptions should only be displayed when they differ from the previous row. Do not include rooms whose major use or major use description starts with 'ZUSE.' The results should be sorted by assignable status and major use description. The subtotal and grand total rows should not include assignable status or major use description.",
    "sql": "SELECT CASE WHEN LAG(assign) OVER (ORDER BY assign) = assign THEN NULL ELSE assign END AS assign, CASE WHEN LAG(muse) OVER (ORDER BY assign, muse_sort) = muse THEN NULL ELSE muse END AS muse, rmcnt, area, area_avg FROM (SELECT CASE WHEN GROUPING(ASSIGNABLE) = 1 THEN NULL ELSE CASE WHEN ASSIGNABLE = 1 THEN 'ASSIGNABLE' ELSE 'NON-ASSIGNABLE' END END AS assign, CASE WHEN GROUPING(FCLT_ROOMS.MAJOR_USE_DESC) = 1 AND GROUPING(ASSIGNABLE) = 0 THEN NULL ELSE FCLT_ROOMS.MAJOR_USE_DESC END AS muse, CASE WHEN GROUPING(FCLT_ROOMS.MAJOR_USE_DESC) = 1 AND GROUPING(ASSIGNABLE) = 0 THEN 'zzz' ELSE FCLT_ROOMS.MAJOR_USE_DESC END AS muse_sort, TO_CHAR(COUNT(ROOM), '999,999,999') AS rmcnt, TO_CHAR(SUM(FCLT_ROOMS.AREA), '999,999,999') AS area, TO_CHAR(AVG(FCLT_ROOMS.AREA), '999,999,999') AS area_avg FROM FCLT_ROOMS JOIN FCLT_MAJOR_USE ON FCLT_MAJOR_USE.FCLT_MAJOR_USE_KEY = FCLT_ROOMS.FCLT_MAJOR_USE_KEY WHERE FCLT_MAJOR_USE.MAJOR_USE NOT LIKE 'ZUSE%' AND FCLT_MAJOR_USE.DESCRIPTION NOT LIKE 'ZUSE%' GROUP BY ROLLUP(ASSIGNABLE, FCLT_ROOMS.MAJOR_USE_DESC) ORDER BY assign, muse_sort) tbltmp;",
    "db_id": "dw",
    "mapping": {
      "rooms": [
        "FCLT_ROOMS.ROOM"
      ],
      "assignable": [
        "FCLT_MAJOR_USE.ASSIGNABLE"
      ],
      "major use description": [
        "FCLT_MAJOR_USE.MAJOR_USE",
        "FCLT_ROOMS.MAJOR_USE_DESC",
        "FCLT_MAJOR_USE.DESCRIPTION"
      ],
      "area": [
        "FCLT_ROOMS.AREA"
      ]
    },
    "join_keys": [
      [
        "FCLT_ROOMS.FCLT_MAJOR_USE_KEY",
        "FCLT_MAJOR_USE.FCLT_MAJOR_USE_KEY"
      ]
    ]
  },
  {
    "question": "List each floor key and department name within the Stata building, as well as the number of rooms, total area, and average area per department on each floor. Include subtotals for each floor and a grand total across all floors. Sort the results by floor key and department name in ascending order. Exclude departments without any rooms in the building. Only the first row of each floor group should include the floor key, and the subtotal and grand total rows should not include floor key or department name. Number of rooms and area should be rounded to integers and formatted using commas as thousands separators.",
    "sql": "SELECT CASE WHEN LAG(FLOOR_KEY) OVER (ORDER BY NVL(FAC_FLOOR.FLOOR_SORT_SEQUENCE, 999), flsort, orgname) = FLOOR_KEY THEN NULL ELSE FLOOR_KEY END AS flid2, CASE WHEN orgname = 'zzz' THEN NULL ELSE orgname END AS dept, rmcnt, areasum, area_avg FROM ( SELECT CASE WHEN GROUPING(FLOOR_KEY) = 1 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'zzz' ELSE FLOOR_KEY END AS flsort, CASE WHEN GROUPING(FLOOR_KEY) = 0 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'SUBTOTAL' WHEN GROUPING(FLOOR_KEY) = 1 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'TOTAL' ELSE FLOOR_KEY END AS flid, CASE WHEN GROUPING(FLOOR_KEY) = 0 AND GROUPING(org.ORGANIZATION_NAME) = 1 THEN 'zzz' ELSE org.ORGANIZATION_NAME END AS orgname, TO_CHAR(COUNT(rm.FAC_ROOM_KEY), '999,999,999') AS rmcnt, TO_CHAR(SUM(rm.AREA), '999,999,999') AS areasum, TO_CHAR(AVG(rm.AREA), '999,999,999') AS area_avg FROM FAC_ROOMS rm JOIN FCLT_ORGANIZATION org ON rm.ORGANIZATION_KEY = org.FCLT_ORGANIZATION_KEY JOIN BUILDINGS bu ON rm.BUILDING_KEY = bu.BUILDING_KEY WHERE bu.BUILDING_NAME = 'Ray and Maria Stata Center' GROUP BY ROLLUP(FLOOR_KEY, org.ORGANIZATION_NAME) ORDER BY flsort, orgname ) tbltmp LEFT JOIN FAC_FLOOR ON FLOOR_KEY = flsort;",
    "db_id": "dw",
    "mapping": {
      "floor key": [
        "FAC_FLOOR.FLOOR_KEY"
      ],
      "department name": [
        "FCLT_ORGANIZATION.ORGANIZATION_NAME"
      ],
      "rooms": [
        "FAC_ROOMS.FAC_ROOM_KEY"
      ],
      "area": [
        "FAC_ROOMS.AREA"
      ]
    },
    "join_keys": [
      [
        "FCLT_ORGANIZATION.FCLT_ORGANIZATION_KEY",
        "FAC_ROOMS.ORGANIZATION_KEY"
      ],
      [
        "BUILDINGS.BUILDING_KEY",
        "FAC_ROOMS.BUILDING_KEY"
      ]
    ]
  },
  {
    "question": "List each building key and floor key within the department of facilities, the number of rooms, total area, average area per floor, building name, access level, zip code, and city. Include subtotals for each building and a grand total across all buildings. The subtotals and grand total should not include zip code or city. Numbers of rooms and area should be rounded to integers and formatted using commas as thousands separators.",
    "sql": "SELECT DISTINCT tbltmp.blsort AS building_id, tbltmp.flsort AS floor_id, tbltmp.rmcnt AS total_rooms, tbltmp.areasum AS total_area, tbltmp.area_avg AS avg_area, fb.BUILDING_NAME_LONG AS building_name, fb.ACCESS_LEVEL_NAME AS access_level, CASE WHEN tbltmp.flsort IS NULL THEN NULL ELSE fba.POSTAL_CODE END AS postal_code, CASE WHEN tbltmp.flsort IS NULL THEN NULL ELSE fba.CITY END AS city FROM ( SELECT CASE WHEN GROUPING(rm.BUILDING_KEY) = 1 THEN NULL ELSE rm.BUILDING_KEY END AS blsort, CASE WHEN GROUPING(rm.FLOOR_KEY) = 1 THEN NULL ELSE rm.FLOOR_KEY END AS flsort, TO_CHAR(COUNT(rm.FAC_ROOM_KEY), '999,999,999') AS rmcnt, TO_CHAR(SUM(rm.AREA), '999,999,999') AS areasum, TO_CHAR(AVG(rm.AREA), '999,999,999') AS area_avg FROM FAC_ROOMS rm JOIN FAC_ORGANIZATION fo ON rm.ORGANIZATION_KEY = fo.ORGANIZATION_KEY WHERE fo.ORGANIZATION_NAME = 'DP OF FACILITIES' GROUP BY ROLLUP(rm.BUILDING_KEY, rm.FLOOR_KEY) ) tbltmp LEFT JOIN FAC_FLOOR fl ON fl.BUILDING_KEY = tbltmp.blsort AND fl.FLOOR_KEY = tbltmp.flsort LEFT JOIN FAC_BUILDING fb ON tbltmp.blsort = fb.FAC_BUILDING_KEY LEFT JOIN FAC_BUILDING_ADDRESS fba ON tbltmp.blsort = fba.BUILDING_KEY ORDER BY building_id, floor_id, postal_code, city;",
    "db_id": "dw",
    "mapping": {
      "building key": [
        "FAC_ROOMS.BUILDING_KEY"
      ],
      "floor key": [
        "FAC_ROOMS.FLOOR_KEY"
      ],
      "department": [
        "FAC_ORGANIZATION.ORGANIZATION_NAME"
      ],
      "rooms": [
        "FAC_ROOMS.FAC_ROOM_KEY"
      ],
      "area": [
        "FAC_ROOMS.AREA"
      ],
      "building name": [
        "FAC_BUILDING.BUILDING_NAME_LONG"
      ],
      "access level": [
        "FAC_BUILDING.ACCESS_LEVEL_NAME"
      ],
      "zip code": [
        "FAC_BUILDING_ADDRESS.POSTAL_CODE"
      ],
      "city": [
        "FAC_BUILDING_ADDRESS.CITY"
      ]
    },
    "join_keys": [
      [
        "FAC_ORGANIZATION.ORGANIZATION_KEY",
        "FAC_ROOMS.ORGANIZATION_KEY"
      ]
    ]
  },
  {
    "question": "List the department, school, course number, subject title, total number of enrolled students, term code, and count of distinct catalog ISBNs. Add a summary row at the bottom showing the total number of students and distinct catalog ISBNs for the current term in the format of ('TOTAL:', null, null, null, total number of students, null, number of distinct catalog ISBNs).",
    "sql": "SELECT * FROM (SELECT OFFER_DEPT_NAME AS \"DEPT\", OFFER_SCHOOL_NAME AS \"SCHOOL\", COURSE_NUMBER AS COURSE_NR, SUBJECT_TITLE AS TITLE, SUM(NUM_ENROLLED_STUDENTS) AS TYPE, lso.TERM_CODE, COUNT(DISTINCT CATALOG_ISBN) AS OWNERSHIP FROM LIBRARY_SUBJECT_OFFERED lso JOIN LIBRARY_RESERVE_MATRL_DETAIL lrmd ON lrmd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY JOIN LIBRARY_RESERVE_CATALOG lrc ON lrc.LIBRARY_RESERVE_CATALOG_KEY = lrmd.LIBRARY_RESERVE_CATALOG_KEY GROUP BY OFFER_DEPT_NAME, OFFER_SCHOOL_NAME, COURSE_NUMBER, SUBJECT_TITLE, lso.TERM_CODE ORDER BY OFFER_DEPT_NAME, COURSE_NUMBER, SUBJECT_TITLE, lso.TERM_CODE) UNION ALL SELECT 'TOTAL:', NULL, NULL, NULL, SUM(NUM_ENROLLED_STUDENTS), NULL, COUNT(DISTINCT CATALOG_ISBN) FROM LIBRARY_SUBJECT_OFFERED lso JOIN LIBRARY_RESERVE_MATRL_DETAIL lrmd ON lrmd.LIBRARY_SUBJECT_OFFERED_KEY = lso.LIBRARY_SUBJECT_OFFERED_KEY JOIN LIBRARY_RESERVE_CATALOG lrc ON lrc.LIBRARY_RESERVE_CATALOG_KEY = lrmd.LIBRARY_RESERVE_CATALOG_KEY JOIN ACADEMIC_TERM_PARAMETER acp ON lso.TERM_CODE = acp.TERM_CODE WHERE IS_CURRENT_TERM = 'Y'",
    "db_id": "dw",
    "mapping": {
      "department": [
        "LIBRARY_SUBJECT_OFFERED.OFFER_DEPT_NAME"
      ],
      "school": [
        "LIBRARY_SUBJECT_OFFERED.OFFER_SCHOOL_NAME"
      ],
      "course number": [
        "LIBRARY_SUBJECT_OFFERED.COURSE_NUMBER"
      ],
      "subject title": [
        "LIBRARY_SUBJECT_OFFERED.SUBJECT_TITLE"
      ],
      "enrolled students": [
        "LIBRARY_SUBJECT_OFFERED.NUM_ENROLLED_STUDENTS"
      ],
      "term code": [
        "LIBRARY_SUBJECT_OFFERED.TERM_CODE"
      ],
      "catalog ISBNs": [
        "LIBRARY_RESERVE_CATALOG.CATALOG_ISBN"
      ]
    },
    "join_keys": [
      [
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_SUBJECT_OFFERED_KEY",
        "LIBRARY_SUBJECT_OFFERED.LIBRARY_SUBJECT_OFFERED_KEY"
      ],
      [
        "LIBRARY_RESERVE_CATALOG.LIBRARY_RESERVE_CATALOG_KEY",
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_RESERVE_CATALOG_KEY"
      ],
      [
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_SUBJECT_OFFERED_KEY",
        "LIBRARY_SUBJECT_OFFERED.LIBRARY_SUBJECT_OFFERED_KEY"
      ],
      [
        "LIBRARY_RESERVE_CATALOG.LIBRARY_RESERVE_CATALOG_KEY",
        "LIBRARY_RESERVE_MATRL_DETAIL.LIBRARY_RESERVE_CATALOG_KEY"
      ],
      [
        "ACADEMIC_TERM_PARAMETER.TERM_CODE",
        "LIBRARY_SUBJECT_OFFERED.TERM_CODE"
      ]
    ]
  },
  {
    "question": "For each mailing list that involves subscribers that work in departments that have names starting with 'Computer Science', state the ownership type, the list name, the number of owners, and the number of subscribers. Display the ownership type only if it differs from the previous entry. Include subtotals (the corresponding type field shoud be 'SUBTOTAL') for each ownership type and a grand total (the corresponding type field shoud be 'TOTAL') across all ownership types.",
    "sql": "SELECT CASE WHEN LAG(OWNERSHIP_TYPE) OVER (ORDER BY OWNERSHIP_TYPE_gr DESC, ML) = OWNERSHIP_TYPE THEN NULL ELSE OWNERSHIP_TYPE END AS OWNERSHIP_TYPE, ML, nr_owner, nr_member FROM (SELECT CASE WHEN GROUPING(OWNER_TYPE) = 1 AND GROUPING(MOIRA_LIST_NAME) = 0 THEN OWNER_TYPE || '1' ELSE OWNER_TYPE || '2' END AS OWNERSHIP_TYPE_gr, CASE WHEN GROUPING(MOIRA_LIST_NAME) = 1 AND GROUPING(OWNER_TYPE) = 0 THEN 'SUBTOTAL' WHEN GROUPING(MOIRA_LIST_NAME) = 1 AND GROUPING(OWNER_TYPE) = 1 THEN 'TOTAL' ELSE OWNER_TYPE END AS OWNERSHIP_TYPE, MOIRA_LIST_NAME AS ML, COUNT(DISTINCT OWNER) AS nr_owner, COUNT(DISTINCT MOIRA_LIST_MEMBER_MIT_ID) AS nr_member FROM MOIRA_LIST_OWNER mlo JOIN MOIRA_LIST_DETAIL mld ON mld.MOIRA_LIST_OWNER_KEY = mlo.MOIRA_LIST_OWNER_KEY JOIN MOIRA_LIST ml ON ml.MOIRA_LIST_KEY = mld.MOIRA_LIST_KEY JOIN EMPLOYEE_DIRECTORY ON MIT_ID = MOIRA_LIST_MEMBER_MIT_ID WHERE department_name LIKE 'Computer Science%' GROUP BY ROLLUP(OWNER_TYPE, MOIRA_LIST_NAME) ORDER BY OWNER_TYPE DESC, MOIRA_LIST_NAME) tbltmp",
    "db_id": "dw",
    "mapping": {
      "departments": [
        "EMPLOYEE_DIRECTORY.DEPARTMENT_NAME"
      ],
      "ownership type": [
        "MOIRA_LIST_OWNER.OWNER_TYPE"
      ],
      "list name": [
        "MOIRA_LIST.MOIRA_LIST_NAME"
      ],
      "owners": [
        "MOIRA_LIST_OWNER.OWNER"
      ],
      "subscribers": [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_MEMBER_MIT_ID"
      ]
    },
    "join_keys": [
      [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_OWNER_KEY",
        "MOIRA_LIST_OWNER.MOIRA_LIST_OWNER_KEY"
      ],
      [
        "MOIRA_LIST_DETAIL.MOIRA_LIST_KEY",
        "MOIRA_LIST.MOIRA_LIST_KEY"
      ],
      [
        "EMPLOYEE_DIRECTORY.MIT_ID",
        "MOIRA_LIST_DETAIL.MOIRA_LIST_MEMBER_MIT_ID"
      ]
    ]
  },
  {
    "question": "For each IAP category, list its name, number of unique sessions, total number of attendees, active period (in the format of 'beginning term code-end term code'), the most common sponsor name, and the most common session start time. Include a grand total row showing the total number of sessions and attendees across all categories in the format of ('TOTAL', number of sessions, number of attendees, null, null, null).",
    "sql": "WITH SponsorAndStartTime AS ( SELECT isc.IAP_CATEGORY_NAME, isp.SPONSOR_NAME, iss.SESSION_START_TIME, COUNT(isp.SPONSOR_NAME) AS sponsor_count, COUNT(iss.SESSION_START_TIME) AS start_time_count FROM IAP_SUBJECT_CATEGORY isc JOIN IAP_SUBJECT_DETAIL isd ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY LEFT JOIN IAP_SUBJECT_SESSION iss ON isd.IAP_SUBJECT_SESSION_KEY = iss.IAP_SUBJECT_SESSION_KEY LEFT JOIN IAP_SUBJECT_SPONSOR isp ON isd.IAP_SUBJECT_SPONSOR_KEY = isp.IAP_SUBJECT_SPONSOR_KEY GROUP BY isc.IAP_CATEGORY_NAME, isp.SPONSOR_NAME, iss.SESSION_START_TIME ), MostCommonDetails AS ( SELECT IAP_CATEGORY_NAME, MAX(SPONSOR_NAME) KEEP (DENSE_RANK FIRST ORDER BY sponsor_count DESC) AS most_common_sponsor, MAX(SESSION_START_TIME) KEEP (DENSE_RANK FIRST ORDER BY start_time_count DESC) AS most_common_start_time FROM SponsorAndStartTime GROUP BY IAP_CATEGORY_NAME ), CategorySummary AS ( SELECT isc.IAP_CATEGORY_NAME AS TYPE, COUNT(DISTINCT isd.IAP_SUBJECT_SESSION_KEY) AS nr_sessions, TO_CHAR(SUM(isd.MAX_ENROLLMENT), '999,999,999,999') AS total_attend, MIN(isd.TERM_CODE) AS first_active_year, MAX(isd.TERM_CODE) AS last_active_year, mcd.most_common_sponsor, mcd.most_common_start_time FROM IAP_SUBJECT_CATEGORY isc JOIN IAP_SUBJECT_DETAIL isd ON isd.IAP_SUBJECT_CATEGORY_KEY = isc.IAP_SUBJECT_CATEGORY_KEY LEFT JOIN MostCommonDetails mcd ON isc.IAP_CATEGORY_NAME = mcd.IAP_CATEGORY_NAME GROUP BY isc.IAP_CATEGORY_NAME, mcd.most_common_sponsor, mcd.most_common_start_time ) SELECT TYPE, nr_sessions, total_attend, first_active_year || '-' || last_active_year AS active_years, most_common_sponsor, most_common_start_time FROM CategorySummary UNION ALL SELECT 'TOTAL', COUNT(DISTINCT IAP_SUBJECT_SESSION_KEY), TO_CHAR(SUM(MAX_ENROLLMENT), '999,999,999,999'), NULL, NULL, NULL FROM IAP_SUBJECT_DETAIL ORDER BY TYPE;",
    "db_id": "dw",
    "mapping": {
      "name": [
        "IAP_SUBJECT_CATEGORY.IAP_CATEGORY_NAME"
      ],
      "sessions": [
        "IAP_SUBJECT_SESSION.IAP_SUBJECT_SESSION_KEY"
      ],
      "attendees": [
        "IAP_SUBJECT_DETAIL.MAX_ENROLLMENT"
      ],
      "active period": [
        "IAP_SUBJECT_DETAIL.TERM_CODE"
      ],
      "sponsor name": [
        "IAP_SUBJECT_SPONSOR.SPONSOR_NAME"
      ],
      "start time": [
        "IAP_SUBJECT_SESSION.SESSION_START_TIME"
      ]
    },
    "join_keys": [
      [
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_CATEGORY_KEY",
        "IAP_SUBJECT_CATEGORY.IAP_SUBJECT_CATEGORY_KEY"
      ],
      [
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_SESSION_KEY",
        "IAP_SUBJECT_SESSION.IAP_SUBJECT_SESSION_KEY"
      ],
      [
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_SPONSOR_KEY",
        "IAP_SUBJECT_SPONSOR.IAP_SUBJECT_SPONSOR_KEY"
      ],
      [
        "IAP_SUBJECT_CATEGORY.IAP_SUBJECT_CATEGORY_KEY",
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_CATEGORY_KEY"
      ]
    ]
  },
  {
    "question": "For each building type, list the name of the building type, the number of buildings that are not subdivisions, number of employees, number of unique building street address, number of unique city, number of unique state, number of unique postal code, and average gross square footage per employee. For building type of 'resident', display it as 'RESIDENTIAL'. Include a grand total across all building types (the corresponding type field is 'TOTAL').",
    "sql": "SELECT * FROM (SELECT CASE WHEN BUILDING_TYPE = 'RESIDENT' THEN 'RESIDENTIAL' ELSE BUILDING_TYPE END AS TYPE, COUNT(DISTINCT NVL(PARENT_BUILDING_NUMBER, FCLT_BUILDING_KEY)) AS BUILDINGS,count(distinct MIT_ID),count(distinct BUILDINGS.BUILDING_STREET_ADDRESS), count(distinct fac_building_address.CITY), count(distinct fac_building_address.STATE), count(distinct fac_building_address.POSTAL_CODE),SUM(FLOOR.EXT_GROSS_AREA)/count(distinct MIT_ID) FROM FCLT_BUILDING_HIST FLOOR JOIN fac_building_address ON FLOOR.fclt_building_key = fac_building_address.BUILDING_KEY JOIN BUILDINGS ON BUILDINGS.BUILDING_KEY = fac_building_address.BUILDING_KEY JOIN FAC_ROOMS fr ON fr.BUILDING_KEY = BUILDINGS.BUILDING_KEY JOIN EMPLOYEE_DIRECTORY e ON e.OFFICE_LOCATION = fr.FAC_ROOM_KEY WHERE fac_building_address.ADDRESS_PURPOSE = 'STREET' GROUP BY BUILDING_TYPE ORDER BY BUILDING_TYPE ASC) UNION ALL SELECT 'TOTAL', COUNT(DISTINCT NVL(PARENT_BUILDING_NUMBER, FCLT_BUILDING_KEY)), count(distinct MIT_ID), count(distinct BUILDINGS.BUILDING_STREET_ADDRESS), count(distinct fac_building_address.CITY), count(distinct fac_building_address.STATE), count(distinct fac_building_address.POSTAL_CODE),SUM(FLOOR.EXT_GROSS_AREA)/count(distinct MIT_ID) FROM FCLT_BUILDING_HIST FLOOR JOIN fac_building_address ON FLOOR.fclt_building_key = fac_building_address.BUILDING_KEY JOIN BUILDINGS ON BUILDINGS.BUILDING_KEY = fac_building_address.BUILDING_KEY JOIN FAC_ROOMS fr ON fr.BUILDING_KEY = BUILDINGS.BUILDING_KEY JOIN EMPLOYEE_DIRECTORY e ON e.OFFICE_LOCATION = fr.FAC_ROOM_KEY WHERE fac_building_address.ADDRESS_PURPOSE = 'STREET'",
    "db_id": "dw",
    "mapping": {
      "name of the building type": [
        "FCLT_BUILDING_HIST.BUILDING_TYPE"
      ],
      "buildings that are not subdivisions": [
        "FCLT_BUILDING_HIST.FCLT_BUILDING_KEY",
        "FCLT_BUILDING_HIST.PARENT_BUILDING_NUMBER"
      ],
      "employees": [
        "EMPLOYEE_DIRECTORY.MIT_ID"
      ],
      "street address": [
        "BUILDINGS.BUILDING_STREET_ADDRESS",
        "FAC_BUILDING_ADDRESS.ADDRESS_PURPOSE"
      ],
      "city": [
        "FAC_BUILDING_ADDRESS.CITY"
      ],
      "state": [
        "FAC_BUILDING_ADDRESS.STATE"
      ],
      "postal code": [
        "FAC_BUILDING_ADDRESS.POSTAL_CODE"
      ],
      "gross square footage": [
        "FCLT_BUILDING_HIST.EXT_GROSS_AREA"
      ]
    },
    "join_keys": [
      [
        "FAC_BUILDING_ADDRESS.BUILDING_KEY",
        "FCLT_BUILDING_HIST.FCLT_BUILDING_KEY"
      ],
      [
        "FAC_BUILDING_ADDRESS.BUILDING_KEY",
        "BUILDINGS.BUILDING_KEY"
      ],
      [
        "BUILDINGS.BUILDING_KEY",
        "FAC_ROOMS.BUILDING_KEY"
      ],
      [
        "EMPLOYEE_DIRECTORY.OFFICE_LOCATION",
        "FAC_ROOMS.FAC_ROOM_KEY"
      ],
      [
        "FCLT_BUILDING_HIST.FCLT_BUILDING_KEY",
        "FAC_BUILDING_ADDRESS.BUILDING_KEY"
      ],
      [
        "FAC_BUILDING_ADDRESS.BUILDING_KEY",
        "BUILDINGS.BUILDING_KEY"
      ],
      [
        "BUILDINGS.BUILDING_KEY",
        "FAC_ROOMS.BUILDING_KEY"
      ],
      [
        "FAC_ROOMS.FAC_ROOM_KEY",
        "EMPLOYEE_DIRECTORY.OFFICE_LOCATION"
      ]
    ]
  },
  {
    "question": "Group spaces in the Stata building by the access level and usage type. For each group, state the access level, usage type, name of the space, the number of spaces, total area across all rooms in the space, and average area across all rooms in the sapce. Display the access level only if it differs from the previous entry. Include subtotals for each access level, usage type, and space name, subtotals for each access level, and a grand total across all access levels. Exclude usage type that includes \"STORAGE\". All numerical values should be rounded to integers and formatted using commas as thousands separators.",
    "sql": "SELECT CASE WHEN LAG(assign) OVER (ORDER BY assign) = assign THEN NULL ELSE assign END AS assign, CASE WHEN LAG(muse) OVER (ORDER BY assign, muse_sort) = muse THEN NULL ELSE muse END AS muse, rmuse, rmcnt, area, area_avg FROM (SELECT CASE WHEN GROUPING(ACCESS_LEVEL) = 1 THEN 'TOTAL' ELSE ACCESS_LEVEL END AS assign, CASE WHEN GROUPING(su2.SPACE_USAGE) = 1 AND GROUPING(ACCESS_LEVEL) = 0 THEN 'SUBTOTAL' ELSE su2.SPACE_USAGE END AS muse, CASE WHEN GROUPING(su2.SPACE_USAGE) = 1 AND GROUPING(ACCESS_LEVEL) = 0 THEN 'zzz' ELSE su2.SPACE_USAGE END AS muse_sort, CASE WHEN GROUPING(DLC_NAME) = 1 AND GROUPING(su2.SPACE_USAGE) = 0 THEN 'SUBTOTAL' ELSE DLC_NAME END AS rmuse, CASE WHEN GROUPING(DLC_NAME) = 1 AND GROUPING(su2.SPACE_USAGE) = 0 THEN 'zzz' ELSE DLC_NAME END AS rmuse_sort, TO_CHAR(COUNT(DISTINCT SPACE_UNIT), '999,999,999') AS rmcnt,TO_CHAR(SUM(ROOM_SQUARE_FOOTAGE), '999,999,999') AS area, TO_CHAR(AVG(ROOM_SQUARE_FOOTAGE), '999,999,999') AS area_avg FROM SPACE_UNIT su JOIN (SELECT * FROM SPACE_DETAIL WHERE BUILDING_KEY = '32') sd ON sd.SPACE_UNIT_KEY=su.SPACE_UNIT_KEY JOIN SPACE_USAGE su2 ON su2.SPACE_USAGE_KEY=sd.SPACE_USAGE_KEY JOIN (SELECT * FROM ZPM_ROOMS_LOAD where BUILDING_COMPONENT='32') zrl ON zrl.SPACE_UNIT_CODE = su.SPACE_UNIT_CODE JOIN FCLT_ORGANIZATION fo ON fo.FCLT_ORGANIZATION_KEY = su.FCLT_ORGANIZATION_KEY WHERE su2.SPACE_USAGE NOT LIKE '%STORAGE%' GROUP BY ROLLUP(ACCESS_LEVEL, su2.SPACE_USAGE, DLC_NAME) ORDER BY assign, muse_sort, rmuse_sort) tbltmp",
    "db_id": "dw",
    "mapping": {
      "access level": [
        "ZPM_ROOMS_LOAD.ACCESS_LEVEL"
      ],
      "usage type": [
        "SPACE_USAGE.SPACE_USAGE"
      ],
      "name": [
        "FCLT_ORGANIZATION.DLC_NAME"
      ],
      "spaces": [
        "SPACE_UNIT.SPACE_UNIT"
      ],
      "area": [
        "SPACE_DETAIL.ROOM_SQUARE_FOOTAGE"
      ]
    },
    "join_keys": [
      [
        "FCLT_ORGANIZATION.FCLT_ORGANIZATION_KEY",
        "SPACE_UNIT.FCLT_ORGANIZATION_KEY"
      ]
    ]
  },
  {
    "question": "List each organization's break group, ID, name, and formatted name according to its level, along with whether its members are emeritus or non-emeritus. Also, include the organization number, level, employer count, and hierarchy type for each organization. Exclude organizations '139' and '250'. Sort the results by hierarchy type and ensure totals for employer counts are displayed.",
    "sql": "SELECT SUBSTR(organization_sort, 5, 2) AS breakgrp, organization_id, organization_name, CASE WHEN organization_level = 4 THEN ' ' || organization_name WHEN organization_level = 5 THEN ' ' || organization_name WHEN organization_level = 6 THEN ' ' || organization_name ELSE organization_name END AS formatted_name, CASE WHEN EMERITUS_STATUS = 'Emeritus' THEN 'EMERITUS' ELSE 'NON-EMERITUS' END AS assign, organization_number, organization_level, (SELECT COUNT(DISTINCT hfr2.MIT_ID) AS employer_count FROM HR_FACULTY_ROSTER hfr2 WHERE hfr2.HR_ORG_UNIT_TITLE=hou.HR_ORG_UNIT_TITLE) , HIERARCHY_TYPE, organization_sort FROM FCLT_ORGANIZATION JOIN MASTER_DEPT_HIERARCHY ON FCLT_ORGANIZATION.DLC_KEY = MASTER_DEPT_HIERARCHY.DLC_KEY JOIN HR_ORG_UNIT hou on hou.DLC_KEY=FCLT_ORGANIZATION.DLC_KEY JOIN HR_FACULTY_ROSTER hfr ON hfr.HR_ORG_UNIT_TITLE=hou.HR_ORG_UNIT_TITLE WHERE organization_level IN ('3', '4', '5', '6') AND organization_id NOT IN ('139', '250') ORDER BY HIERARCHY_TYPE",
    "db_id": "dw",
    "mapping": {
      "break group": [
        "FCLT_ORGANIZATION.ORGANIZATION_SORT"
      ],
      "ID": [
        "FCLT_ORGANIZATION.ORGANIZATION_ID"
      ],
      "name": [
        "FCLT_ORGANIZATION.ORGANIZATION_NAME"
      ],
      "level": [
        "FCLT_ORGANIZATION.ORGANIZATION_LEVEL"
      ],
      "number": [
        "FCLT_ORGANIZATION.ORGANIZATION_NUMBER"
      ],
      "employer": [
        "HR_FACULTY_ROSTER.MIT_ID"
      ],
      "hierarchy type": [
        "MASTER_DEPT_HIERARCHY.HIERARCHY_TYPE"
      ]
    },
    "join_keys": [
      [
        "FCLT_ORGANIZATION.DLC_KEY",
        "MASTER_DEPT_HIERARCHY.DLC_KEY"
      ],
      [
        "FCLT_ORGANIZATION.DLC_KEY",
        "HR_ORG_UNIT.DLC_KEY"
      ],
      [
        "HR_ORG_UNIT.HR_ORG_UNIT_TITLE",
        "HR_FACULTY_ROSTER.HR_ORG_UNIT_TITLE"
      ]
    ]
  },
  {
    "question": "For each course, list its title, name of the building of the course location, duration in terms of days, and a running average of the duration using a window of two preceding and two following courses (partitioned by academic year and sorted by course start date).",
    "sql": "select distinct ccso.subject_title, building_name, ccso.duration, avg(duration) over (partition by ccso.academic_year order by ccso.term_start_date rows between 2 preceding and 2 following) from (select distinct subject_title, term_start_date, term_end_date-term_start_date as duration, cis.academic_year, meet_place from academic_terms join COURSE_CATALOG_SUBJECT_OFFERED cis on cis.effective_term_code=academic_terms.term_code) ccso JOIN FCLT_ROOMS fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY;",
    "db_id": "dw",
    "mapping": {
      "title": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_TITLE"
      ],
      "name of the building": [
        "FCLT_BUILDING.BUILDING_NAME"
      ],
      "duration": [
        "ACADEMIC_TERMS.TERM_END_DATE",
        "ACADEMIC_TERMS.TERM_START_DATE"
      ]
    },
    "join_keys": [
      [
        "COURSE_CATALOG_SUBJECT_OFFERED.EFFECTIVE_TERM_CODE",
        "ACADEMIC_TERMS.TERM_CODE"
      ],
      [
        "FCLT_ROOMS.FCLT_BUILDING_KEY",
        "FCLT_BUILDING.FCLT_BUILDING_KEY"
      ]
    ]
  },
  {
    "question": "For each course, list its name, name of the building of the course location, the start date, the name of the course before it, and the name of the course after it, access level of the building, and the assignable area of the room used for the course, sorted by the ascending order start date and course name.",
    "sql": "SELECT ccso.subject_title, fb.BUILDING_NAME_LONG AS building_name, at.TERM_START_DATE AS term_start_date, lag(ccso.subject_title) OVER ( ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC ) AS previous_subject_title, lead(ccso.subject_title) OVER ( ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC ) AS next_subject_title, fb.ACCESS_LEVEL_NAME AS access_level, fr.AREA AS room_assignable_area FROM ( SELECT DISTINCT subject_id, subject_title, effective_term_code, meet_place FROM COURSE_CATALOG_SUBJECT_OFFERED ) ccso JOIN ACADEMIC_TERMS at ON at.TERM_CODE = ccso.effective_term_code JOIN FCLT_ROOMS fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY ORDER BY at.TERM_START_DATE ASC, ccso.subject_title ASC;",
    "db_id": "dw",
    "mapping": {
      "name": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_TITLE"
      ],
      "name of the building": [
        "FCLT_BUILDING.BUILDING_NAME_LONG"
      ],
      "start date": [
        "ACADEMIC_TERMS.TERM_START_DATE"
      ],
      "name of the course": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_TITLE"
      ],
      "access level": [
        "FCLT_BUILDING.ACCESS_LEVEL_NAME"
      ],
      "area": [
        "FCLT_ROOMS.AREA"
      ]
    },
    "join_keys": [
      [
        "FCLT_BUILDING.FCLT_BUILDING_KEY",
        "FCLT_ROOMS.FCLT_BUILDING_KEY"
      ]
    ]
  },
  {
    "question": "For each course, list its name, name of the building of the course location, and the cumulative number of courses, including the course itself, held in the same year or preceding years (partitioned by academic year and sorted in the ascending order of course start date).",
    "sql": "select distinct subject_title, building_name, count(ccso.subject_id) over (partition by ccso.academic_year order by term_start_date asc range between unbounded preceding and current row) from COURSE_CATALOG_SUBJECT_OFFERED ccso join academic_terms on ccso.effective_term_code =academic_terms.term_code JOIN FCLT_ROOMS fr ON ccso.MEET_PLACE = fr.FCLT_ROOM_KEY JOIN FCLT_BUILDING fb ON fb.FCLT_BUILDING_KEY = fr.FCLT_BUILDING_KEY",
    "db_id": "dw",
    "mapping": {
      "name": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_TITLE"
      ],
      "name of the building": [
        "FCLT_BUILDING.BUILDING_NAME"
      ],
      "courses": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_ID"
      ],
      "academic year": [
        "COURSE_CATALOG_SUBJECT_OFFERED.ACADEMIC_YEAR"
      ],
      "course start date": [
        "ACADEMIC_TERMS.TERM_START_DATE"
      ]
    },
    "join_keys": [
      [
        "COURSE_CATALOG_SUBJECT_OFFERED.EFFECTIVE_TERM_CODE",
        "ACADEMIC_TERMS.TERM_CODE"
      ],
      [
        "COURSE_CATALOG_SUBJECT_OFFERED.MEET_PLACE",
        "FCLT_ROOMS.FCLT_ROOM_KEY"
      ]
    ]
  },
  {
    "question": "Group courses in the biology and chemistry department by whether they are current or not and the cluster type. For each group, list the current status ('CURRENT' if yes and 'NON-CURRENT' otherwise), cluster type, the maximum duration of courses, the maximum units, average duration, and average units. Include subtotals for each current status (the corresponding current status field is 'SUBTOTAL') and a grand total across all current status (the corresponding current status field is 'TOTAL'). Do not repeat the current status if it is the same as the previous row. Sort the table by current status and cluster type.",
    "sql": "SELECT CASE WHEN LAG(assign) OVER (ORDER BY IS_CURRENT_TERM DESC, assign, CLUSTER_TYPE ASC) = assign THEN NULL ELSE assign END AS assign, CLUSTER_TYPE, max_duration, max_units, avg_dur, avg_unit FROM (SELECT CASE WHEN GROUPING(CLUSTER_TYPE) = 1 AND GROUPING(IS_CURRENT_TERM) = 0 THEN 'SUBTOTAL' WHEN GROUPING(CLUSTER_TYPE) = 1 AND GROUPING(IS_CURRENT_TERM) = 1 THEN 'TOTAL' ELSE CASE WHEN IS_CURRENT_TERM = 'Y' THEN 'CURRENT' ELSE 'NON-CURRENT' END END AS assign, IS_CURRENT_TERM, CLUSTER_TYPE, max(term_end_date-term_start_date) AS max_duration, MAX(TOTAL_UNITS) AS max_units, AVG(term_end_date-term_start_date) AS avg_dur, AVG(TOTAL_UNITS) AS avg_unit FROM SUBJECT_SUMMARY ss JOIN ACADEMIC_TERMS_ALL ata ON ata.TERM_CODE = ss.TERM_CODE WHERE CLUSTER_TYPE IS NOT NULL and ss.department_name in ('Chemistry', 'Biology') GROUP BY ROLLUP(IS_CURRENT_TERM, CLUSTER_TYPE) ORDER BY IS_CURRENT_TERM DESC, assign, CLUSTER_TYPE ASC) tbltmp",
    "db_id": "dw",
    "mapping": {
      "department": [
        "SUBJECT_SUMMARY.DEPARTMENT_NAME"
      ],
      "current status": [
        "ACADEMIC_TERMS_ALL.IS_CURRENT_TERM"
      ],
      "cluster type": [
        "SUBJECT_SUMMARY.CLUSTER_TYPE"
      ],
      "duration": [
        "ACADEMIC_TERMS_ALL.TERM_END_DATE",
        "ACADEMIC_TERMS_ALL.TERM_START_DATE"
      ],
      "units": [
        "SUBJECT_SUMMARY.TOTAL_UNITS"
      ]
    },
    "join_keys": [
      [
        "ACADEMIC_TERMS_ALL.TERM_CODE",
        "SUBJECT_SUMMARY.TERM_CODE"
      ]
    ]
  },
  {
    "question": "Group courses in the biology and chemistry department by whether they are current or not and the department name. For each group, list the current status ('CURRENT' if yes and 'NON-CURRENT' otherwise), department name, the maximum duration of courses, the maximum units, average duration, and average units. Include subtotals for each current status (the corresponding current status field is 'SUBTOTAL') and a grand total across all current status (the corresponding current status field is 'TOTAL'). Do not repeat the current status if it is the same as the previous row. Sort the table by current status and department.",
    "sql": "SELECT CASE WHEN LAG(assign) OVER (ORDER BY IS_CURRENT_TERM DESC, assign, OFFER_DEPT_NAME ASC) = assign THEN NULL ELSE assign END AS assign, OFFER_DEPT_NAME, max_duration, max_units, avg_dur, avg_unit FROM (SELECT CASE WHEN GROUPING(OFFER_DEPT_NAME) = 1 AND GROUPING(IS_CURRENT_TERM) = 0 THEN 'SUBTOTAL' WHEN GROUPING(OFFER_DEPT_NAME) = 1 AND GROUPING(IS_CURRENT_TERM) = 1 THEN 'TOTAL' ELSE CASE WHEN IS_CURRENT_TERM = 'Y' THEN 'CURRENT' ELSE 'NON-CURRENT' END END AS assign, IS_CURRENT_TERM, OFFER_DEPT_NAME, max(term_end_date-term_start_date) AS max_duration, MAX(TOTAL_UNITS) AS max_units, AVG(term_end_date-term_start_date) AS avg_dur, AVG(TOTAL_UNITS) AS avg_unit FROM SUBJECT_SUMMARY ss JOIN ACADEMIC_TERMS_ALL ata ON ata.TERM_CODE = ss.TERM_CODE JOIN SUBJECT_OFFERED so ON so.SUBJECT_ID = ss.SUBJECT_ID where so.offer_dept_name in ('Chemistry', 'Biology') GROUP BY ROLLUP(IS_CURRENT_TERM, OFFER_DEPT_NAME) ORDER BY IS_CURRENT_TERM DESC, assign, OFFER_DEPT_NAME ASC) tbltmp",
    "db_id": "dw",
    "mapping": {
      "department": [
        "SUBJECT_OFFERED.OFFER_DEPT_NAME"
      ],
      "current status": [
        "ACADEMIC_TERMS_ALL.IS_CURRENT_TERM"
      ],
      "duration": [
        "ACADEMIC_TERMS_ALL.TERM_END_DATE",
        "ACADEMIC_TERMS_ALL.TERM_START_DATE"
      ],
      "units": [
        "SUBJECT_SUMMARY.TOTAL_UNITS"
      ]
    },
    "join_keys": [
      [
        "ACADEMIC_TERMS_ALL.TERM_CODE",
        "SUBJECT_SUMMARY.TERM_CODE"
      ],
      [
        "SUBJECT_SUMMARY.SUBJECT_ID",
        "SUBJECT_OFFERED.SUBJECT_ID"
      ]
    ]
  },
  {
    "question": "Group master courses by department. For each group, state the name of the department, the master course code, the number of subjects, the total new shelf price of associated TIP materials, and the number of unique TIP materials. Display the department and master course only if it differs from the previous entry. Include subtotals for each department and a grand total across all departments. All numerical values should be rounded to integers and formatted using commas as thousands separators.",
    "sql": "SELECT CASE WHEN LAG(dept) OVER (ORDER BY dept, dept_sort, master) = dept THEN NULL ELSE dept END AS dept, CASE WHEN master = 'zzz' THEN NULL ELSE master END AS master, subcnt, totalprice, matcnt FROM ( SELECT CASE WHEN GROUPING(OFFER_DEPT_NAME) = 1 AND GROUPING(MASTER_COURSE_NUMBER) = 1 THEN 'zzz' ELSE OFFER_DEPT_NAME END AS dept_sort, CASE WHEN GROUPING(OFFER_DEPT_NAME) = 0 AND GROUPING(MASTER_COURSE_NUMBER) = 1 THEN 'SUBTOTAL' WHEN GROUPING(OFFER_DEPT_NAME) = 1 AND GROUPING(MASTER_COURSE_NUMBER) = 1 THEN 'TOTAL' ELSE OFFER_DEPT_NAME END AS dept, CASE WHEN GROUPING(OFFER_DEPT_NAME) = 0 AND GROUPING(MASTER_COURSE_NUMBER) = 1 THEN 'zzz' ELSE MASTER_COURSE_NUMBER END AS master, TO_CHAR(COUNT(distinct tso.SUBJECT_ID), '999,999,999') AS subcnt, TO_CHAR(SUM(NEW_SHELF_PRICE), '999,999,999') AS totalprice, TO_CHAR(COUNT(DISTINCT tm.ISBN), '999,999,999') AS matcnt FROM TIP_DETAIL td JOIN TIP_SUBJECT_OFFERED tso ON tso.TIP_SUBJECT_OFFERED_KEY = td. TIP_SUBJECT_OFFERED_KEY JOIN TIP_MATERIAL tm ON tm.TIP_MATERIAL_KEY = td.TIP_MATERIAL_KEY GROUP BY ROLLUP(OFFER_DEPT_NAME, MASTER_COURSE_NUMBER) ORDER BY dept_sort, master ) tbltmp",
    "db_id": "dw",
    "mapping": {
      "name of the department": [
        "TIP_SUBJECT_OFFERED.OFFER_DEPT_NAME"
      ],
      "master course code": [
        "TIP_SUBJECT_OFFERED.MASTER_COURSE_NUMBER"
      ],
      "subjects": [
        "TIP_SUBJECT_OFFERED.SUBJECT_ID"
      ],
      "new shelf price": [
        "TIP_MATERIAL.NEW_SHELF_PRICE"
      ],
      "TIP materials": [
        "TIP_MATERIAL.ISBN"
      ]
    },
    "join_keys": [
      [
        "TIP_DETAIL.TIP_MATERIAL_KEY",
        "TIP_MATERIAL.TIP_MATERIAL_KEY"
      ]
    ]
  },
  {
    "question": "For each term and department, list the term, department, the number of courses, average number of equivalent subjects, the school name, and department phone number. Include subtotals for each term (the corresponding term field is 'SUBTOTAL') and a grand total across all terms (the corresponding term field is 'TOTAL'). Do not repeat the term if it is the same as the previous row. Sort the table by term and department.",
    "sql": "SELECT CASE WHEN LAG(term) OVER (ORDER BY term_sort, term, dept_sort) = term THEN NULL ELSE term END AS term, dept, subcnt, avgeqisub, sd.SCHOOL_NAME AS school_name, ad.DEPARTMENT_PHONE_NUMBER AS department_phone FROM ( SELECT CASE WHEN GROUPING(TERM_CODE) = 1 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'zzz' ELSE TERM_CODE END AS term_sort, CASE WHEN GROUPING(TERM_CODE) = 0 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'SUBTOTAL' WHEN GROUPING(TERM_CODE) = 1 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'TOTAL' ELSE TERM_CODE END AS term, CASE WHEN GROUPING(TERM_CODE) = 0 AND GROUPING(DEPARTMENT_NAME) = 1 THEN 'zzz' ELSE DEPARTMENT_NAME END AS dept_sort, DEPARTMENT_NAME AS dept, COUNT(DISTINCT SUBJECT_ID) AS subcnt, MIN(MEET_TIME) AS mintime, AVG(CASE WHEN equivalent_subjects IS NULL THEN 0 ELSE 1 + LENGTH(equivalent_subjects) - LENGTH(REPLACE(equivalent_subjects, ',', '')) END) AS avgeqisub FROM COURSE_CATALOG_SUBJECT_OFFERED GROUP BY ROLLUP(TERM_CODE, DEPARTMENT_NAME) ) tbltmp LEFT JOIN SIS_DEPARTMENT sd ON tbltmp.dept = sd.DEPARTMENT_NAME LEFT JOIN SIS_ADMIN_DEPARTMENT ad ON sd.DEPARTMENT_CODE = ad.SIS_ADMIN_DEPARTMENT_CODE ORDER BY term_sort, dept_sort;",
    "db_id": "dw",
    "mapping": {
      "term": [
        "COURSE_CATALOG_SUBJECT_OFFERED.TERM_CODE"
      ],
      "department": [
        "COURSE_CATALOG_SUBJECT_OFFERED.DEPARTMENT_NAME"
      ],
      "courses": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_ID"
      ],
      "equivalent subjects": [
        "COURSE_CATALOG_SUBJECT_OFFERED.EQUIVALENT_SUBJECTS"
      ],
      "school name": [
        "SIS_DEPARTMENT.SCHOOL_NAME"
      ],
      "department phone number": [
        "SIS_ADMIN_DEPARTMENT.DEPARTMENT_PHONE_NUMBER"
      ]
    },
    "join_keys": [
      [
        "SIS_ADMIN_DEPARTMENT.SIS_ADMIN_DEPARTMENT_CODE",
        "SIS_DEPARTMENT.DEPARTMENT_CODE"
      ]
    ]
  },
  {
    "question": "Group sessions by their current term status. For each group, state the status ('CURRENT' if is current term and 'NOT CURRENT' otherwise), name of the session, number of IAP sessions, total IAP session time, and average IAP session time. Show a subtotal for each current status and a grand total row across all status. Order the results by current status and cluster type. Display the the current status only if it differs from the previous entry.",
    "sql": "SELECT CASE WHEN LAG(assign) OVER (ORDER BY assign) = assign THEN NULL ELSE assign END AS assign, muse, session_count, total_time, avg_time FROM (SELECT CASE WHEN GROUPING(IAP_CATEGORY_NAME) = 1 AND GROUPING(IS_CURRENT_TERM) = 0 THEN 'SUBTOTAL' WHEN GROUPING(IAP_CATEGORY_NAME) = 1 AND GROUPING(IAP_CATEGORY_NAME) = 1 THEN 'TOTAL' ELSE CASE WHEN IS_CURRENT_TERM = 'Y' THEN 'CURRENT' ELSE 'NOT CURRENT' END END AS assign, IAP_CATEGORY_NAME AS muse, COUNT(SESSION_DATE) AS session_count, SUM(COALESCE(TO_DATE(SESSION_END_TIME, 'HHMIPM') - TO_DATE(SESSION_START_TIME, 'HHMIPM'), 0)) AS total_time, AVG(COALESCE(TO_DATE(SESSION_END_TIME, 'HHMIPM') - TO_DATE(SESSION_START_TIME, 'HHMIPM'), 0)) AS avg_time FROM IAP_SUBJECT_DETAIL ss JOIN ACADEMIC_TERMS at ON at.TERM_CODE = ss.TERM_CODE JOIN IAP_SUBJECT_SESSION iss ON iss.IAP_SUBJECT_SESSION_KEY =ss.IAP_SUBJECT_SESSION_KEY JOIN IAP_SUBJECT_CATEGORY isc ON isc.IAP_SUBJECT_CATEGORY_KEY=ss.IAP_SUBJECT_CATEGORY_KEY GROUP BY ROLLUP(IS_CURRENT_TERM, IAP_CATEGORY_NAME) ORDER BY assign, muse) tbltmp",
    "db_id": "dw",
    "mapping": {
      "current term status": [
        "ACADEMIC_TERMS.IS_CURRENT_TERM"
      ],
      "name of the session": [
        "IAP_SUBJECT_CATEGORY.IAP_CATEGORY_NAME"
      ],
      "IAP sessions": [
        "IAP_SUBJECT_SESSION.SESSION_DATE"
      ],
      "session time": [
        "IAP_SUBJECT_SESSION.SESSION_START_TIME",
        "IAP_SUBJECT_SESSION.SESSION_END_TIME"
      ]
    },
    "join_keys": [
      [
        "IAP_SUBJECT_DETAIL.TERM_CODE",
        "ACADEMIC_TERMS.TERM_CODE"
      ],
      [
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_SESSION_KEY",
        "IAP_SUBJECT_SESSION.IAP_SUBJECT_SESSION_KEY"
      ],
      [
        "IAP_SUBJECT_DETAIL.IAP_SUBJECT_CATEGORY_KEY",
        "IAP_SUBJECT_CATEGORY.IAP_SUBJECT_CATEGORY_KEY"
      ]
    ]
  },
  {
    "question": "List each academic year, the term code, and the number of newly introduced subjects in this term. Display the academic year only if it differs from the previous entry. Include a grand total (the corresponding year field should be 'TOTAL') stating the total number of subjects across all academic years.",
    "sql": "select CASE WHEN Lag(ACADEMIC_YEAR)over (order by ata.TERM_CODE) =ACADEMIC_YEAR THEN NULL ELSE ACADEMIC_YEAR end AS ACADEMIC_YEAR,ata.TERM_CODE, COUNT(distinct si) from ACADEMIC_TERMS_ALL ata LEFT OUTER JOIN (select * from (select CASE WHEN LAG(subject_id) over(ORDER BY SUBJECT_ID, TERM_CODE ASC, ACADEMIC_YEAR ASC) = subject_id then NULL else subject_id end as si, case when LAG(TERM_CODE) over (ORDER BY SUBJECT_ID, TERM_CODE ASC, ACADEMIC_YEAR ASC) =TERM_CODE then null else term_code end as term_code from course_catalog_subject_offered) where si is not null) a ON ata.TERM_CODE=a.TERM_CODE GROUP BY ata.TERM_CODE, ACADEMIC_YEAR UNION ALL SELECT 'TOTAL', NULL, COUNT(DISTINCT SUBJECT_ID) FROM COURSE_CATALOG_SUBJECT_OFFERED",
    "db_id": "dw",
    "mapping": {
      "academic year": [
        "ACADEMIC_TERMS_ALL.ACADEMIC_YEAR"
      ],
      "term code": [
        "ACADEMIC_TERMS_ALL.TERM_CODE"
      ],
      "subjects": [
        "COURSE_CATALOG_SUBJECT_OFFERED.SUBJECT_ID"
      ]
    },
    "join_keys": []
  },
  {
    "question": "Provide information (including info caches, and security groups) about VMs running on physical host star-76.",
    "sql": "SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id \nFROM instances LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = instances.uuid LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = instances.uuid AND instances.deleted = 0 \nWHERE instances.deleted = 0 AND instances.host = 'star-76'",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCES.UUID",
        "INSTANCE_INFO_CACHES.INSTANCE_UUID"
      ]
    ]
  },
  {
    "question": "Provide information about groups that user with id ccbbd0bdf0104ea68a37483b13b14be2 belongs to.",
    "sql": "SELECT `group`.id AS group_id, `group`.name AS group_name, `group`.domain_id AS group_domain_id, `group`.description AS group_description, `group`.extra AS group_extra \nFROM `group` INNER JOIN user_group_membership ON `group`.id = user_group_membership.group_id \nWHERE user_group_membership.user_id = 'ccbbd0bdf0104ea68a37483b13b14be2'",
    "db_id": "keystone",
    "join_keys": [
      [
        "USER_GROUP_MEMBERSHIP.GROUP_ID",
        "GROUP.ID"
      ]
    ]
  },
  {
    "question": "Provide information about floating IP associated with fixed address 10.77.55.40/8 on fixed port 6450a4fa-accf-43f6-a664-b0b5ad7637df.",
    "sql": "SELECT floatingips.tenant_id AS floatingips_tenant_id, floatingips.id AS floatingips_id, floatingips.floating_ip_address AS floatingips_floating_ip_address, floatingips.floating_network_id AS floatingips_floating_network_id, floatingips.floating_port_id AS floatingips_floating_port_id, floatingips.fixed_port_id AS floatingips_fixed_port_id, floatingips.fixed_ip_address AS floatingips_fixed_ip_address, floatingips.router_id AS floatingips_router_id, floatingips.last_known_router_id AS floatingips_last_known_router_id, floatingips.status AS floatingips_status, floatingips.standard_attr_id AS floatingips_standard_attr_id, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, floatingipdnses_1.floatingip_id AS floatingipdnses_1_floatingip_id, floatingipdnses_1.dns_name AS floatingipdnses_1_dns_name, floatingipdnses_1.dns_domain AS floatingipdnses_1_dns_domain, floatingipdnses_1.published_dns_name AS floatingipdnses_1_published_dns_name, floatingipdnses_1.published_dns_domain AS floatingipdnses_1_published_dns_domain \nFROM floatingips LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = floatingips.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN floatingipdnses AS floatingipdnses_1 ON floatingips.id = floatingipdnses_1.floatingip_id \nWHERE floatingips.fixed_ip_address IN ('10.77.55.40/8') AND floatingips.fixed_port_id IN ('6450a4fa-accf-43f6-a664-b0b5ad7637df')",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "STANDARDATTRIBUTES.ID",
        "FLOATINGIPS.STANDARD_ATTR_ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "TAGS.STANDARD_ATTR_ID"
      ],
      [
        "FLOATINGIPDNSES.FLOATINGIP_ID",
        "FLOATINGIPS.ID"
      ]
    ]
  },
  {
    "question": "Provide information (including extra data) about VMs assigned to the physical host cosmo3-23.",
    "sql": "SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned, instance_extra_1.numa_topology AS instance_extra_1_numa_topology, instance_extra_1.flavor AS instance_extra_1_flavor, instance_extra_1.migration_context AS instance_extra_1_migration_context, instance_extra_1.created_at AS instance_extra_1_created_at, instance_extra_1.updated_at AS instance_extra_1_updated_at, instance_extra_1.deleted_at AS instance_extra_1_deleted_at, instance_extra_1.deleted AS instance_extra_1_deleted, instance_extra_1.id AS instance_extra_1_id, instance_extra_1.instance_uuid AS instance_extra_1_instance_uuid \nFROM instances LEFT OUTER JOIN instance_extra AS instance_extra_1 ON instance_extra_1.instance_uuid = instances.uuid \nWHERE instances.deleted = 0 AND instances.host = 'cosmo3-23' AND instances.node = 'cosmo3-23.yahoo.ca.com'",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCES.UUID",
        "INSTANCE_EXTRA.INSTANCE_UUID"
      ]
    ]
  },
  {
    "question": "Provide information about migrations associated with VM that moves to or from the physical host cosmo3-23.",
    "sql": "SELECT migrations.created_at AS migrations_created_at, migrations.updated_at AS migrations_updated_at, migrations.deleted_at AS migrations_deleted_at, migrations.deleted AS migrations_deleted, migrations.id AS migrations_id, migrations.source_compute AS migrations_source_compute, migrations.dest_compute AS migrations_dest_compute, migrations.source_node AS migrations_source_node, migrations.dest_node AS migrations_dest_node, migrations.dest_host AS migrations_dest_host, migrations.old_instance_type_id AS migrations_old_instance_type_id, migrations.new_instance_type_id AS migrations_new_instance_type_id, migrations.instance_uuid AS migrations_instance_uuid, migrations.status AS migrations_status, migrations.migration_type AS migrations_migration_type, migrations.hidden AS migrations_hidden, migrations.memory_total AS migrations_memory_total, migrations.memory_processed AS migrations_memory_processed, migrations.memory_remaining AS migrations_memory_remaining, migrations.disk_total AS migrations_disk_total, migrations.disk_processed AS migrations_disk_processed, migrations.disk_remaining AS migrations_disk_remaining, instances_1.created_at AS instances_1_created_at, instances_1.updated_at AS instances_1_updated_at, instances_1.deleted_at AS instances_1_deleted_at, instances_1.deleted AS instances_1_deleted, instances_1.id AS instances_1_id, instances_1.user_id AS instances_1_user_id, instances_1.project_id AS instances_1_project_id, instances_1.image_ref AS instances_1_image_ref, instances_1.kernel_id AS instances_1_kernel_id, instances_1.ramdisk_id AS instances_1_ramdisk_id, instances_1.hostname AS instances_1_hostname, instances_1.launch_index AS instances_1_launch_index, instances_1.key_name AS instances_1_key_name, instances_1.key_data AS instances_1_key_data, instances_1.power_state AS instances_1_power_state, instances_1.vm_state AS instances_1_vm_state, instances_1.task_state AS instances_1_task_state, instances_1.memory_mb AS instances_1_memory_mb, instances_1.vcpus AS instances_1_vcpus, instances_1.root_gb AS instances_1_root_gb, instances_1.ephemeral_gb AS instances_1_ephemeral_gb, instances_1.ephemeral_key_uuid AS instances_1_ephemeral_key_uuid, instances_1.host AS instances_1_host, instances_1.node AS instances_1_node, instances_1.instance_type_id AS instances_1_instance_type_id, instances_1.user_data AS instances_1_user_data, instances_1.reservation_id AS instances_1_reservation_id, instances_1.launched_at AS instances_1_launched_at, instances_1.terminated_at AS instances_1_terminated_at, instances_1.availability_zone AS instances_1_availability_zone, instances_1.display_name AS instances_1_display_name, instances_1.display_description AS instances_1_display_description, instances_1.launched_on AS instances_1_launched_on, instances_1.locked AS instances_1_locked, instances_1.locked_by AS instances_1_locked_by, instances_1.os_type AS instances_1_os_type, instances_1.architecture AS instances_1_architecture, instances_1.vm_mode AS instances_1_vm_mode, instances_1.uuid AS instances_1_uuid, instances_1.root_device_name AS instances_1_root_device_name, instances_1.default_ephemeral_device AS instances_1_default_ephemeral_device, instances_1.default_swap_device AS instances_1_default_swap_device, instances_1.config_drive AS instances_1_config_drive, instances_1.access_ip_v4 AS instances_1_access_ip_v4, instances_1.access_ip_v6 AS instances_1_access_ip_v6, instances_1.auto_disk_config AS instances_1_auto_disk_config, instances_1.progress AS instances_1_progress, instances_1.shutdown_terminate AS instances_1_shutdown_terminate, instances_1.disable_terminate AS instances_1_disable_terminate, instances_1.cell_name AS instances_1_cell_name, instances_1.internal_id AS instances_1_internal_id, instances_1.cleaned AS instances_1_cleaned, instance_system_metadata_1.created_at AS instance_system_metadata_1_created_at, instance_system_metadata_1.updated_at AS instance_system_metadata_1_updated_at, instance_system_metadata_1.deleted_at AS instance_system_metadata_1_deleted_at, instance_system_metadata_1.deleted AS instance_system_metadata_1_deleted, instance_system_metadata_1.id AS instance_system_metadata_1_id, instance_system_metadata_1.`key` AS instance_system_metadata_1_key, instance_system_metadata_1.value AS instance_system_metadata_1_value, instance_system_metadata_1.instance_uuid AS instance_system_metadata_1_instance_uuid \nFROM migrations LEFT OUTER JOIN instances AS instances_1 ON migrations.instance_uuid = instances_1.uuid AND instances_1.deleted = 0 LEFT OUTER JOIN instance_system_metadata AS instance_system_metadata_1 ON instances_1.uuid = instance_system_metadata_1.instance_uuid \nWHERE migrations.deleted = 0 AND (migrations.source_compute = 'cosmo3-23' AND migrations.source_node = 'cosmo3-23.yahoo.ca.com' OR migrations.dest_compute = 'cosmo3-23' AND migrations.dest_node = 'cosmo3-23.yahoo.ca.com') AND migrations.status NOT IN ('accepted', 'confirmed', 'reverted', 'error', 'failed', 'completed')",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "MIGRATIONS.INSTANCE_UUID",
        "INSTANCES.UUID"
      ],
      [
        "INSTANCE_SYSTEM_METADATA.INSTANCE_UUID",
        "INSTANCES.UUID"
      ]
    ]
  },
  {
    "question": "Provide information (including extra data) about VMs assigned to the physical host glyph1-33.",
    "sql": "SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned, instance_extra_1.numa_topology AS instance_extra_1_numa_topology, instance_extra_1.flavor AS instance_extra_1_flavor, instance_extra_1.migration_context AS instance_extra_1_migration_context, instance_extra_1.created_at AS instance_extra_1_created_at, instance_extra_1.updated_at AS instance_extra_1_updated_at, instance_extra_1.deleted_at AS instance_extra_1_deleted_at, instance_extra_1.deleted AS instance_extra_1_deleted, instance_extra_1.id AS instance_extra_1_id, instance_extra_1.instance_uuid AS instance_extra_1_instance_uuid \nFROM instances LEFT OUTER JOIN instance_extra AS instance_extra_1 ON instance_extra_1.instance_uuid = instances.uuid \nWHERE instances.deleted = 0 AND instances.host = 'glyph1-33' AND instances.node = 'glyph1-33.yahoo.ca.com'",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCE_EXTRA.INSTANCE_UUID",
        "INSTANCES.UUID"
      ]
    ]
  },
  {
    "question": "Provide information (including info caches, and security groups) about VMs on the physical host galax4-70 that have not yet been cleaned up.",
    "sql": "SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id \nFROM instances LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = instances.uuid LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = instances.uuid AND instances.deleted = 0 \nWHERE instances.deleted = instances.id AND instances.cleaned = 0 AND instances.host = 'galax4-70' ORDER BY instances.created_at DESC, instances.id DESC",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCE_INFO_CACHES.INSTANCE_UUID",
        "INSTANCES.UUID"
      ]
    ]
  },
  {
    "question": "Provide information about resource reservation expiring before 2024-05-10 15:07:36.855290.",
    "sql": "SELECT reservations.created_at AS reservations_created_at, reservations.updated_at AS reservations_updated_at, reservations.deleted_at AS reservations_deleted_at, reservations.deleted AS reservations_deleted, reservations.id AS reservations_id, reservations.uuid AS reservations_uuid, reservations.usage_id AS reservations_usage_id, reservations.project_id AS reservations_project_id, reservations.user_id AS reservations_user_id, reservations.resource AS reservations_resource, reservations.delta AS reservations_delta, reservations.expire AS reservations_expire \nFROM reservations INNER JOIN quota_usages ON quota_usages.id = reservations.usage_id \nWHERE reservations.deleted = 0 AND reservations.expire < '2024-05-10 15:07:36.855290'",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "QUOTA_USAGES.ID",
        "RESERVATIONS.USAGE_ID"
      ]
    ]
  },
  {
    "question": "Provide information about the port with ip address 10.115.70.43/8 under network 0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d.",
    "sql": "SELECT ports.tenant_id AS ports_tenant_id, ports.id AS ports_id, ports.name AS ports_name, ports.network_id AS ports_network_id, ports.mac_address AS ports_mac_address, ports.admin_state_up AS ports_admin_state_up, ports.status AS ports_status, ports.device_id AS ports_device_id, ports.device_owner AS ports_device_owner, ports.dns_name AS ports_dns_name, ports.standard_attr_id AS ports_standard_attr_id, ipallocations_1.port_id AS ipallocations_1_port_id, ipallocations_1.ip_address AS ipallocations_1_ip_address, ipallocations_1.subnet_id AS ipallocations_1_subnet_id, ipallocations_1.network_id AS ipallocations_1_network_id, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, portsecuritybindings_1.port_id AS portsecuritybindings_1_port_id, portsecuritybindings_1.port_security_enabled AS portsecuritybindings_1_port_security_enabled, ml2_dvr_port_bindings_1.port_id AS ml2_dvr_port_bindings_1_port_id, ml2_dvr_port_bindings_1.host AS ml2_dvr_port_bindings_1_host, ml2_dvr_port_bindings_1.router_id AS ml2_dvr_port_bindings_1_router_id, ml2_dvr_port_bindings_1.vif_type AS ml2_dvr_port_bindings_1_vif_type, ml2_dvr_port_bindings_1.vif_details AS ml2_dvr_port_bindings_1_vif_details, ml2_dvr_port_bindings_1.vnic_type AS ml2_dvr_port_bindings_1_vnic_type, ml2_dvr_port_bindings_1.profile AS ml2_dvr_port_bindings_1_profile, ml2_dvr_port_bindings_1.status AS ml2_dvr_port_bindings_1_status, allowedaddresspairs_1.port_id AS allowedaddresspairs_1_port_id, allowedaddresspairs_1.mac_address AS allowedaddresspairs_1_mac_address, allowedaddresspairs_1.ip_address AS allowedaddresspairs_1_ip_address, qos_port_policy_bindings_1.policy_id AS qos_port_policy_bindings_1_policy_id, qos_port_policy_bindings_1.port_id AS qos_port_policy_bindings_1_port_id, securitygroupportbindings_1.port_id AS securitygroupportbindings_1_port_id, securitygroupportbindings_1.security_group_id AS securitygroupportbindings_1_security_group_id, ml2_port_bindings_1.port_id AS ml2_port_bindings_1_port_id, ml2_port_bindings_1.host AS ml2_port_bindings_1_host, ml2_port_bindings_1.vnic_type AS ml2_port_bindings_1_vnic_type, ml2_port_bindings_1.profile AS ml2_port_bindings_1_profile, ml2_port_bindings_1.vif_type AS ml2_port_bindings_1_vif_type, ml2_port_bindings_1.vif_details AS ml2_port_bindings_1_vif_details, extradhcpopts_1.id AS extradhcpopts_1_id, extradhcpopts_1.port_id AS extradhcpopts_1_port_id, extradhcpopts_1.opt_name AS extradhcpopts_1_opt_name, extradhcpopts_1.opt_value AS extradhcpopts_1_opt_value, extradhcpopts_1.ip_version AS extradhcpopts_1_ip_version, portdnses_1.port_id AS portdnses_1_port_id, portdnses_1.current_dns_name AS portdnses_1_current_dns_name, portdnses_1.current_dns_domain AS portdnses_1_current_dns_domain, portdnses_1.previous_dns_name AS portdnses_1_previous_dns_name, portdnses_1.previous_dns_domain AS portdnses_1_previous_dns_domain \nFROM ports LEFT OUTER JOIN ml2_port_bindings ON ports.id = ml2_port_bindings.port_id INNER JOIN ipallocations ON ports.id = ipallocations.port_id LEFT OUTER JOIN ipallocations AS ipallocations_1 ON ports.id = ipallocations_1.port_id LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = ports.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN portsecuritybindings AS portsecuritybindings_1 ON ports.id = portsecuritybindings_1.port_id LEFT OUTER JOIN ml2_dvr_port_bindings AS ml2_dvr_port_bindings_1 ON ports.id = ml2_dvr_port_bindings_1.port_id LEFT OUTER JOIN allowedaddresspairs AS allowedaddresspairs_1 ON ports.id = allowedaddresspairs_1.port_id LEFT OUTER JOIN qos_port_policy_bindings AS qos_port_policy_bindings_1 ON ports.id = qos_port_policy_bindings_1.port_id LEFT OUTER JOIN securitygroupportbindings AS securitygroupportbindings_1 ON ports.id = securitygroupportbindings_1.port_id LEFT OUTER JOIN ml2_port_bindings AS ml2_port_bindings_1 ON ports.id = ml2_port_bindings_1.port_id LEFT OUTER JOIN extradhcpopts AS extradhcpopts_1 ON ports.id = extradhcpopts_1.port_id LEFT OUTER JOIN portdnses AS portdnses_1 ON ports.id = portdnses_1.port_id \nWHERE ipallocations.ip_address IN ('10.115.70.43/8') AND ports.network_id IN ('0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d')",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "PORTS.ID",
        "ML2_PORT_BINDINGS.PORT_ID"
      ],
      [
        "IPALLOCATIONS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "IPALLOCATIONS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "TAGS.STANDARD_ATTR_ID"
      ],
      [
        "PORTS.ID",
        "PORTSECURITYBINDINGS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "ML2_DVR_PORT_BINDINGS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "ALLOWEDADDRESSPAIRS.PORT_ID"
      ],
      [
        "QOS_PORT_POLICY_BINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "SECURITYGROUPPORTBINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "ML2_PORT_BINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "EXTRADHCPOPTS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTS.ID",
        "PORTDNSES.PORT_ID"
      ]
    ]
  },
  {
    "question": "Provide information about the port with ip address 10.145.219.202/8 under network 0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d.",
    "sql": "SELECT ports.tenant_id AS ports_tenant_id, ports.id AS ports_id, ports.name AS ports_name, ports.network_id AS ports_network_id, ports.mac_address AS ports_mac_address, ports.admin_state_up AS ports_admin_state_up, ports.status AS ports_status, ports.device_id AS ports_device_id, ports.device_owner AS ports_device_owner, ports.dns_name AS ports_dns_name, ports.standard_attr_id AS ports_standard_attr_id, ipallocations_1.port_id AS ipallocations_1_port_id, ipallocations_1.ip_address AS ipallocations_1_ip_address, ipallocations_1.subnet_id AS ipallocations_1_subnet_id, ipallocations_1.network_id AS ipallocations_1_network_id, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, portsecuritybindings_1.port_id AS portsecuritybindings_1_port_id, portsecuritybindings_1.port_security_enabled AS portsecuritybindings_1_port_security_enabled, ml2_dvr_port_bindings_1.port_id AS ml2_dvr_port_bindings_1_port_id, ml2_dvr_port_bindings_1.host AS ml2_dvr_port_bindings_1_host, ml2_dvr_port_bindings_1.router_id AS ml2_dvr_port_bindings_1_router_id, ml2_dvr_port_bindings_1.vif_type AS ml2_dvr_port_bindings_1_vif_type, ml2_dvr_port_bindings_1.vif_details AS ml2_dvr_port_bindings_1_vif_details, ml2_dvr_port_bindings_1.vnic_type AS ml2_dvr_port_bindings_1_vnic_type, ml2_dvr_port_bindings_1.profile AS ml2_dvr_port_bindings_1_profile, ml2_dvr_port_bindings_1.status AS ml2_dvr_port_bindings_1_status, allowedaddresspairs_1.port_id AS allowedaddresspairs_1_port_id, allowedaddresspairs_1.mac_address AS allowedaddresspairs_1_mac_address, allowedaddresspairs_1.ip_address AS allowedaddresspairs_1_ip_address, qos_port_policy_bindings_1.policy_id AS qos_port_policy_bindings_1_policy_id, qos_port_policy_bindings_1.port_id AS qos_port_policy_bindings_1_port_id, securitygroupportbindings_1.port_id AS securitygroupportbindings_1_port_id, securitygroupportbindings_1.security_group_id AS securitygroupportbindings_1_security_group_id, ml2_port_bindings_1.port_id AS ml2_port_bindings_1_port_id, ml2_port_bindings_1.host AS ml2_port_bindings_1_host, ml2_port_bindings_1.vnic_type AS ml2_port_bindings_1_vnic_type, ml2_port_bindings_1.profile AS ml2_port_bindings_1_profile, ml2_port_bindings_1.vif_type AS ml2_port_bindings_1_vif_type, ml2_port_bindings_1.vif_details AS ml2_port_bindings_1_vif_details, extradhcpopts_1.id AS extradhcpopts_1_id, extradhcpopts_1.port_id AS extradhcpopts_1_port_id, extradhcpopts_1.opt_name AS extradhcpopts_1_opt_name, extradhcpopts_1.opt_value AS extradhcpopts_1_opt_value, extradhcpopts_1.ip_version AS extradhcpopts_1_ip_version, portdnses_1.port_id AS portdnses_1_port_id, portdnses_1.current_dns_name AS portdnses_1_current_dns_name, portdnses_1.current_dns_domain AS portdnses_1_current_dns_domain, portdnses_1.previous_dns_name AS portdnses_1_previous_dns_name, portdnses_1.previous_dns_domain AS portdnses_1_previous_dns_domain \nFROM ports LEFT OUTER JOIN ml2_port_bindings ON ports.id = ml2_port_bindings.port_id INNER JOIN ipallocations ON ports.id = ipallocations.port_id LEFT OUTER JOIN ipallocations AS ipallocations_1 ON ports.id = ipallocations_1.port_id LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = ports.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN portsecuritybindings AS portsecuritybindings_1 ON ports.id = portsecuritybindings_1.port_id LEFT OUTER JOIN ml2_dvr_port_bindings AS ml2_dvr_port_bindings_1 ON ports.id = ml2_dvr_port_bindings_1.port_id LEFT OUTER JOIN allowedaddresspairs AS allowedaddresspairs_1 ON ports.id = allowedaddresspairs_1.port_id LEFT OUTER JOIN qos_port_policy_bindings AS qos_port_policy_bindings_1 ON ports.id = qos_port_policy_bindings_1.port_id LEFT OUTER JOIN securitygroupportbindings AS securitygroupportbindings_1 ON ports.id = securitygroupportbindings_1.port_id LEFT OUTER JOIN ml2_port_bindings AS ml2_port_bindings_1 ON ports.id = ml2_port_bindings_1.port_id LEFT OUTER JOIN extradhcpopts AS extradhcpopts_1 ON ports.id = extradhcpopts_1.port_id LEFT OUTER JOIN portdnses AS portdnses_1 ON ports.id = portdnses_1.port_id \nWHERE ipallocations.ip_address IN ('10.145.219.202/8') AND ports.network_id IN ('0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d')",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "PORTS.ID",
        "ML2_PORT_BINDINGS.PORT_ID"
      ],
      [
        "IPALLOCATIONS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTS.ID",
        "IPALLOCATIONS.PORT_ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "PORTS.STANDARD_ATTR_ID"
      ],
      [
        "TAGS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ],
      [
        "PORTS.ID",
        "PORTSECURITYBINDINGS.PORT_ID"
      ],
      [
        "ML2_DVR_PORT_BINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTS.ID",
        "ALLOWEDADDRESSPAIRS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "QOS_PORT_POLICY_BINDINGS.PORT_ID"
      ],
      [
        "SECURITYGROUPPORTBINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTS.ID",
        "ML2_PORT_BINDINGS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "EXTRADHCPOPTS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "PORTDNSES.PORT_ID"
      ]
    ]
  },
  {
    "question": "Provide password information about the local user with id ccbbd0bdf0104ea68a37483b13b14be2.",
    "sql": "SELECT password.id AS password_id, password.local_user_id AS password_local_user_id, password.password AS password_password, local_user_1.id AS local_user_1_id \nFROM (SELECT user.id AS user_id \nFROM user \nWHERE user.id = 'ccbbd0bdf0104ea68a37483b13b14be2') AS anon_1 INNER JOIN local_user AS local_user_1 ON anon_1.user_id = local_user_1.user_id INNER JOIN password ON local_user_1.id = password.local_user_id ORDER BY local_user_1.id",
    "db_id": "keystone",
    "join_keys": [
      [
        "LOCAL_USER.ID",
        "PASSWORD.LOCAL_USER_ID"
      ]
    ]
  },
  {
    "question": "Provide information (including extra data) about VMs assigned to the physical host blaze8-12.",
    "sql": "SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned, instance_extra_1.numa_topology AS instance_extra_1_numa_topology, instance_extra_1.flavor AS instance_extra_1_flavor, instance_extra_1.migration_context AS instance_extra_1_migration_context, instance_extra_1.created_at AS instance_extra_1_created_at, instance_extra_1.updated_at AS instance_extra_1_updated_at, instance_extra_1.deleted_at AS instance_extra_1_deleted_at, instance_extra_1.deleted AS instance_extra_1_deleted, instance_extra_1.id AS instance_extra_1_id, instance_extra_1.instance_uuid AS instance_extra_1_instance_uuid \nFROM instances LEFT OUTER JOIN instance_extra AS instance_extra_1 ON instance_extra_1.instance_uuid = instances.uuid \nWHERE instances.deleted = 0 AND instances.host = 'blaze8-12' AND instances.node = 'blaze8-12.yahoo.ca.com'",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCES.UUID",
        "INSTANCE_EXTRA.INSTANCE_UUID"
      ]
    ]
  },
  {
    "question": "Provide information about port with device id 35620978-cabd-48bd-b7f2-58fb700ffbfd owned by project 3a3dd8971d2e4f6abf826e5dd0362895.",
    "sql": "SELECT ports.tenant_id AS ports_tenant_id, ports.id AS ports_id, ports.name AS ports_name, ports.network_id AS ports_network_id, ports.mac_address AS ports_mac_address, ports.admin_state_up AS ports_admin_state_up, ports.status AS ports_status, ports.device_id AS ports_device_id, ports.device_owner AS ports_device_owner, ports.dns_name AS ports_dns_name, ports.standard_attr_id AS ports_standard_attr_id, ipallocations_1.port_id AS ipallocations_1_port_id, ipallocations_1.ip_address AS ipallocations_1_ip_address, ipallocations_1.subnet_id AS ipallocations_1_subnet_id, ipallocations_1.network_id AS ipallocations_1_network_id, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, portsecuritybindings_1.port_id AS portsecuritybindings_1_port_id, portsecuritybindings_1.port_security_enabled AS portsecuritybindings_1_port_security_enabled, ml2_dvr_port_bindings_1.port_id AS ml2_dvr_port_bindings_1_port_id, ml2_dvr_port_bindings_1.host AS ml2_dvr_port_bindings_1_host, ml2_dvr_port_bindings_1.router_id AS ml2_dvr_port_bindings_1_router_id, ml2_dvr_port_bindings_1.vif_type AS ml2_dvr_port_bindings_1_vif_type, ml2_dvr_port_bindings_1.vif_details AS ml2_dvr_port_bindings_1_vif_details, ml2_dvr_port_bindings_1.vnic_type AS ml2_dvr_port_bindings_1_vnic_type, ml2_dvr_port_bindings_1.profile AS ml2_dvr_port_bindings_1_profile, ml2_dvr_port_bindings_1.status AS ml2_dvr_port_bindings_1_status, allowedaddresspairs_1.port_id AS allowedaddresspairs_1_port_id, allowedaddresspairs_1.mac_address AS allowedaddresspairs_1_mac_address, allowedaddresspairs_1.ip_address AS allowedaddresspairs_1_ip_address, qos_port_policy_bindings_1.policy_id AS qos_port_policy_bindings_1_policy_id, qos_port_policy_bindings_1.port_id AS qos_port_policy_bindings_1_port_id, securitygroupportbindings_1.port_id AS securitygroupportbindings_1_port_id, securitygroupportbindings_1.security_group_id AS securitygroupportbindings_1_security_group_id, ml2_port_bindings_1.port_id AS ml2_port_bindings_1_port_id, ml2_port_bindings_1.host AS ml2_port_bindings_1_host, ml2_port_bindings_1.vnic_type AS ml2_port_bindings_1_vnic_type, ml2_port_bindings_1.profile AS ml2_port_bindings_1_profile, ml2_port_bindings_1.vif_type AS ml2_port_bindings_1_vif_type, ml2_port_bindings_1.vif_details AS ml2_port_bindings_1_vif_details, extradhcpopts_1.id AS extradhcpopts_1_id, extradhcpopts_1.port_id AS extradhcpopts_1_port_id, extradhcpopts_1.opt_name AS extradhcpopts_1_opt_name, extradhcpopts_1.opt_value AS extradhcpopts_1_opt_value, extradhcpopts_1.ip_version AS extradhcpopts_1_ip_version, portdnses_1.port_id AS portdnses_1_port_id, portdnses_1.current_dns_name AS portdnses_1_current_dns_name, portdnses_1.current_dns_domain AS portdnses_1_current_dns_domain, portdnses_1.previous_dns_name AS portdnses_1_previous_dns_name, portdnses_1.previous_dns_domain AS portdnses_1_previous_dns_domain \nFROM ports LEFT OUTER JOIN ml2_port_bindings ON ports.id = ml2_port_bindings.port_id LEFT OUTER JOIN ipallocations AS ipallocations_1 ON ports.id = ipallocations_1.port_id LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = ports.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN portsecuritybindings AS portsecuritybindings_1 ON ports.id = portsecuritybindings_1.port_id LEFT OUTER JOIN ml2_dvr_port_bindings AS ml2_dvr_port_bindings_1 ON ports.id = ml2_dvr_port_bindings_1.port_id LEFT OUTER JOIN allowedaddresspairs AS allowedaddresspairs_1 ON ports.id = allowedaddresspairs_1.port_id LEFT OUTER JOIN qos_port_policy_bindings AS qos_port_policy_bindings_1 ON ports.id = qos_port_policy_bindings_1.port_id LEFT OUTER JOIN securitygroupportbindings AS securitygroupportbindings_1 ON ports.id = securitygroupportbindings_1.port_id LEFT OUTER JOIN ml2_port_bindings AS ml2_port_bindings_1 ON ports.id = ml2_port_bindings_1.port_id LEFT OUTER JOIN extradhcpopts AS extradhcpopts_1 ON ports.id = extradhcpopts_1.port_id LEFT OUTER JOIN portdnses AS portdnses_1 ON ports.id = portdnses_1.port_id \nWHERE ports.tenant_id IN ('3a3dd8971d2e4f6abf826e5dd0362895') AND ports.device_id IN ('35620978-cabd-48bd-b7f2-58fb700ffbfd')",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "ML2_PORT_BINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "IPALLOCATIONS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "TAGS.STANDARD_ATTR_ID"
      ],
      [
        "PORTS.ID",
        "PORTSECURITYBINDINGS.PORT_ID"
      ],
      [
        "ML2_DVR_PORT_BINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTS.ID",
        "ALLOWEDADDRESSPAIRS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "QOS_PORT_POLICY_BINDINGS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "SECURITYGROUPPORTBINDINGS.PORT_ID"
      ],
      [
        "ML2_PORT_BINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTS.ID",
        "EXTRADHCPOPTS.PORT_ID"
      ],
      [
        "PORTDNSES.PORT_ID",
        "PORTS.ID"
      ]
    ]
  },
  {
    "question": "Provide information about user with id ccbbd0bdf0104ea68a37483b13b14be2.",
    "sql": "SELECT user.id AS user_id, user.enabled AS user_enabled, user.extra AS user_extra, user.default_project_id AS user_default_project_id \nFROM user \nWHERE user.id = 'ccbbd0bdf0104ea68a37483b13b14be2'",
    "db_id": "keystone",
    "join_keys": []
  },
  {
    "question": "Provide information (including info caches, and security groups) about VMs on the physical host astro-92 that have not yet been cleaned up.",
    "sql": "SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id \nFROM instances LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = instances.uuid LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = instances.uuid AND instances.deleted = 0 \nWHERE instances.deleted = instances.id AND instances.cleaned = 0 AND instances.host = 'astro-92' ORDER BY instances.created_at DESC, instances.id DESC",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCES.UUID",
        "INSTANCE_INFO_CACHES.INSTANCE_UUID"
      ]
    ]
  },
  {
    "question": "Provide information about port with device id 61389439-cf52-4a9c-9185-08f0f24f644e owned by project 347e25c219354db38c6662e4ab9a9c84.",
    "sql": "SELECT ports.tenant_id AS ports_tenant_id, ports.id AS ports_id, ports.name AS ports_name, ports.network_id AS ports_network_id, ports.mac_address AS ports_mac_address, ports.admin_state_up AS ports_admin_state_up, ports.status AS ports_status, ports.device_id AS ports_device_id, ports.device_owner AS ports_device_owner, ports.dns_name AS ports_dns_name, ports.standard_attr_id AS ports_standard_attr_id, ipallocations_1.port_id AS ipallocations_1_port_id, ipallocations_1.ip_address AS ipallocations_1_ip_address, ipallocations_1.subnet_id AS ipallocations_1_subnet_id, ipallocations_1.network_id AS ipallocations_1_network_id, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, portsecuritybindings_1.port_id AS portsecuritybindings_1_port_id, portsecuritybindings_1.port_security_enabled AS portsecuritybindings_1_port_security_enabled, ml2_dvr_port_bindings_1.port_id AS ml2_dvr_port_bindings_1_port_id, ml2_dvr_port_bindings_1.host AS ml2_dvr_port_bindings_1_host, ml2_dvr_port_bindings_1.router_id AS ml2_dvr_port_bindings_1_router_id, ml2_dvr_port_bindings_1.vif_type AS ml2_dvr_port_bindings_1_vif_type, ml2_dvr_port_bindings_1.vif_details AS ml2_dvr_port_bindings_1_vif_details, ml2_dvr_port_bindings_1.vnic_type AS ml2_dvr_port_bindings_1_vnic_type, ml2_dvr_port_bindings_1.profile AS ml2_dvr_port_bindings_1_profile, ml2_dvr_port_bindings_1.status AS ml2_dvr_port_bindings_1_status, allowedaddresspairs_1.port_id AS allowedaddresspairs_1_port_id, allowedaddresspairs_1.mac_address AS allowedaddresspairs_1_mac_address, allowedaddresspairs_1.ip_address AS allowedaddresspairs_1_ip_address, qos_port_policy_bindings_1.policy_id AS qos_port_policy_bindings_1_policy_id, qos_port_policy_bindings_1.port_id AS qos_port_policy_bindings_1_port_id, securitygroupportbindings_1.port_id AS securitygroupportbindings_1_port_id, securitygroupportbindings_1.security_group_id AS securitygroupportbindings_1_security_group_id, ml2_port_bindings_1.port_id AS ml2_port_bindings_1_port_id, ml2_port_bindings_1.host AS ml2_port_bindings_1_host, ml2_port_bindings_1.vnic_type AS ml2_port_bindings_1_vnic_type, ml2_port_bindings_1.profile AS ml2_port_bindings_1_profile, ml2_port_bindings_1.vif_type AS ml2_port_bindings_1_vif_type, ml2_port_bindings_1.vif_details AS ml2_port_bindings_1_vif_details, extradhcpopts_1.id AS extradhcpopts_1_id, extradhcpopts_1.port_id AS extradhcpopts_1_port_id, extradhcpopts_1.opt_name AS extradhcpopts_1_opt_name, extradhcpopts_1.opt_value AS extradhcpopts_1_opt_value, extradhcpopts_1.ip_version AS extradhcpopts_1_ip_version, portdnses_1.port_id AS portdnses_1_port_id, portdnses_1.current_dns_name AS portdnses_1_current_dns_name, portdnses_1.current_dns_domain AS portdnses_1_current_dns_domain, portdnses_1.previous_dns_name AS portdnses_1_previous_dns_name, portdnses_1.previous_dns_domain AS portdnses_1_previous_dns_domain \nFROM ports LEFT OUTER JOIN ml2_port_bindings ON ports.id = ml2_port_bindings.port_id LEFT OUTER JOIN ipallocations AS ipallocations_1 ON ports.id = ipallocations_1.port_id LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = ports.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN portsecuritybindings AS portsecuritybindings_1 ON ports.id = portsecuritybindings_1.port_id LEFT OUTER JOIN ml2_dvr_port_bindings AS ml2_dvr_port_bindings_1 ON ports.id = ml2_dvr_port_bindings_1.port_id LEFT OUTER JOIN allowedaddresspairs AS allowedaddresspairs_1 ON ports.id = allowedaddresspairs_1.port_id LEFT OUTER JOIN qos_port_policy_bindings AS qos_port_policy_bindings_1 ON ports.id = qos_port_policy_bindings_1.port_id LEFT OUTER JOIN securitygroupportbindings AS securitygroupportbindings_1 ON ports.id = securitygroupportbindings_1.port_id LEFT OUTER JOIN ml2_port_bindings AS ml2_port_bindings_1 ON ports.id = ml2_port_bindings_1.port_id LEFT OUTER JOIN extradhcpopts AS extradhcpopts_1 ON ports.id = extradhcpopts_1.port_id LEFT OUTER JOIN portdnses AS portdnses_1 ON ports.id = portdnses_1.port_id \nWHERE ports.tenant_id IN ('347e25c219354db38c6662e4ab9a9c84') AND ports.device_id IN ('61389439-cf52-4a9c-9185-08f0f24f644e')",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "ML2_PORT_BINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "IPALLOCATIONS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "PORTS.STANDARD_ATTR_ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "TAGS.STANDARD_ATTR_ID"
      ],
      [
        "PORTSECURITYBINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "ML2_DVR_PORT_BINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "ALLOWEDADDRESSPAIRS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "QOS_PORT_POLICY_BINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "SECURITYGROUPPORTBINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "ML2_PORT_BINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "EXTRADHCPOPTS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTS.ID",
        "PORTDNSES.PORT_ID"
      ]
    ]
  },
  {
    "question": "Provide information about subnet access control for subnet e8da8ec5-364b-4a31-afaf-f68a206b7846.",
    "sql": "SELECT networkrbacs.tenant_id AS networkrbacs_tenant_id, networkrbacs.id AS networkrbacs_id, networkrbacs.target_tenant AS networkrbacs_target_tenant, networkrbacs.action AS networkrbacs_action, networkrbacs.object_id AS networkrbacs_object_id, anon_1.subnets_network_id AS anon_1_subnets_network_id \nFROM (SELECT DISTINCT subnets.network_id AS subnets_network_id \nFROM subnets \nWHERE subnets.id IN ('e8da8ec5-364b-4a31-afaf-f68a206b7846')) AS anon_1 INNER JOIN networkrbacs ON anon_1.subnets_network_id = networkrbacs.object_id ORDER BY anon_1.subnets_network_id",
    "db_id": "csail_stata_neutron",
    "join_keys": []
  },
  {
    "question": "Provide information about migrations associated with VM that moves to or from the physical host streak-26.",
    "sql": "SELECT migrations.created_at AS migrations_created_at, migrations.updated_at AS migrations_updated_at, migrations.deleted_at AS migrations_deleted_at, migrations.deleted AS migrations_deleted, migrations.id AS migrations_id, migrations.source_compute AS migrations_source_compute, migrations.dest_compute AS migrations_dest_compute, migrations.source_node AS migrations_source_node, migrations.dest_node AS migrations_dest_node, migrations.dest_host AS migrations_dest_host, migrations.old_instance_type_id AS migrations_old_instance_type_id, migrations.new_instance_type_id AS migrations_new_instance_type_id, migrations.instance_uuid AS migrations_instance_uuid, migrations.status AS migrations_status, migrations.migration_type AS migrations_migration_type, migrations.hidden AS migrations_hidden, migrations.memory_total AS migrations_memory_total, migrations.memory_processed AS migrations_memory_processed, migrations.memory_remaining AS migrations_memory_remaining, migrations.disk_total AS migrations_disk_total, migrations.disk_processed AS migrations_disk_processed, migrations.disk_remaining AS migrations_disk_remaining, instances_1.created_at AS instances_1_created_at, instances_1.updated_at AS instances_1_updated_at, instances_1.deleted_at AS instances_1_deleted_at, instances_1.deleted AS instances_1_deleted, instances_1.id AS instances_1_id, instances_1.user_id AS instances_1_user_id, instances_1.project_id AS instances_1_project_id, instances_1.image_ref AS instances_1_image_ref, instances_1.kernel_id AS instances_1_kernel_id, instances_1.ramdisk_id AS instances_1_ramdisk_id, instances_1.hostname AS instances_1_hostname, instances_1.launch_index AS instances_1_launch_index, instances_1.key_name AS instances_1_key_name, instances_1.key_data AS instances_1_key_data, instances_1.power_state AS instances_1_power_state, instances_1.vm_state AS instances_1_vm_state, instances_1.task_state AS instances_1_task_state, instances_1.memory_mb AS instances_1_memory_mb, instances_1.vcpus AS instances_1_vcpus, instances_1.root_gb AS instances_1_root_gb, instances_1.ephemeral_gb AS instances_1_ephemeral_gb, instances_1.ephemeral_key_uuid AS instances_1_ephemeral_key_uuid, instances_1.host AS instances_1_host, instances_1.node AS instances_1_node, instances_1.instance_type_id AS instances_1_instance_type_id, instances_1.user_data AS instances_1_user_data, instances_1.reservation_id AS instances_1_reservation_id, instances_1.launched_at AS instances_1_launched_at, instances_1.terminated_at AS instances_1_terminated_at, instances_1.availability_zone AS instances_1_availability_zone, instances_1.display_name AS instances_1_display_name, instances_1.display_description AS instances_1_display_description, instances_1.launched_on AS instances_1_launched_on, instances_1.locked AS instances_1_locked, instances_1.locked_by AS instances_1_locked_by, instances_1.os_type AS instances_1_os_type, instances_1.architecture AS instances_1_architecture, instances_1.vm_mode AS instances_1_vm_mode, instances_1.uuid AS instances_1_uuid, instances_1.root_device_name AS instances_1_root_device_name, instances_1.default_ephemeral_device AS instances_1_default_ephemeral_device, instances_1.default_swap_device AS instances_1_default_swap_device, instances_1.config_drive AS instances_1_config_drive, instances_1.access_ip_v4 AS instances_1_access_ip_v4, instances_1.access_ip_v6 AS instances_1_access_ip_v6, instances_1.auto_disk_config AS instances_1_auto_disk_config, instances_1.progress AS instances_1_progress, instances_1.shutdown_terminate AS instances_1_shutdown_terminate, instances_1.disable_terminate AS instances_1_disable_terminate, instances_1.cell_name AS instances_1_cell_name, instances_1.internal_id AS instances_1_internal_id, instances_1.cleaned AS instances_1_cleaned, instance_system_metadata_1.created_at AS instance_system_metadata_1_created_at, instance_system_metadata_1.updated_at AS instance_system_metadata_1_updated_at, instance_system_metadata_1.deleted_at AS instance_system_metadata_1_deleted_at, instance_system_metadata_1.deleted AS instance_system_metadata_1_deleted, instance_system_metadata_1.id AS instance_system_metadata_1_id, instance_system_metadata_1.`key` AS instance_system_metadata_1_key, instance_system_metadata_1.value AS instance_system_metadata_1_value, instance_system_metadata_1.instance_uuid AS instance_system_metadata_1_instance_uuid \nFROM migrations LEFT OUTER JOIN instances AS instances_1 ON migrations.instance_uuid = instances_1.uuid AND instances_1.deleted = 0 LEFT OUTER JOIN instance_system_metadata AS instance_system_metadata_1 ON instances_1.uuid = instance_system_metadata_1.instance_uuid \nWHERE migrations.deleted = 0 AND (migrations.source_compute = 'streak-26' AND migrations.source_node = 'streak-26.yahoo.ca.com' OR migrations.dest_compute = 'streak-26' AND migrations.dest_node = 'streak-26.yahoo.ca.com') AND migrations.status NOT IN ('accepted', 'confirmed', 'reverted', 'error', 'failed', 'completed')",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCES.UUID",
        "MIGRATIONS.INSTANCE_UUID"
      ],
      [
        "INSTANCE_SYSTEM_METADATA.INSTANCE_UUID",
        "INSTANCES.UUID"
      ]
    ]
  },
  {
    "question": "Provide information about publicly available networks owned by project 9f13bf11e06e4d81b44c8c3e62d4362b.",
    "sql": "SELECT networks.tenant_id AS networks_tenant_id, networks.id AS networks_id, networks.name AS networks_name, networks.status AS networks_status, networks.admin_state_up AS networks_admin_state_up, networks.mtu AS networks_mtu, networks.vlan_transparent AS networks_vlan_transparent, networks.availability_zone_hints AS networks_availability_zone_hints, networks.standard_attr_id AS networks_standard_attr_id, agents_1.id AS agents_1_id, agents_1.agent_type AS agents_1_agent_type, agents_1.`binary` AS agents_1_binary, agents_1.topic AS agents_1_topic, agents_1.host AS agents_1_host, agents_1.availability_zone AS agents_1_availability_zone, agents_1.admin_state_up AS agents_1_admin_state_up, agents_1.created_at AS agents_1_created_at, agents_1.started_at AS agents_1_started_at, agents_1.heartbeat_timestamp AS agents_1_heartbeat_timestamp, agents_1.description AS agents_1_description, agents_1.configurations AS agents_1_configurations, agents_1.resource_versions AS agents_1_resource_versions, agents_1.`load` AS agents_1_load, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, externalnetworks_1.network_id AS externalnetworks_1_network_id, externalnetworks_1.is_default AS externalnetworks_1_is_default, qos_network_policy_bindings_1.policy_id AS qos_network_policy_bindings_1_policy_id, qos_network_policy_bindings_1.network_id AS qos_network_policy_bindings_1_network_id, networksecuritybindings_1.network_id AS networksecuritybindings_1_network_id, networksecuritybindings_1.port_security_enabled AS networksecuritybindings_1_port_security_enabled, networkdnsdomains_1.network_id AS networkdnsdomains_1_network_id, networkdnsdomains_1.dns_domain AS networkdnsdomains_1_dns_domain \nFROM networks LEFT OUTER JOIN externalnetworks ON networks.id = externalnetworks.network_id LEFT OUTER JOIN networkrbacs ON networks.id = networkrbacs.object_id LEFT OUTER JOIN (networkdhcpagentbindings AS networkdhcpagentbindings_1 INNER JOIN agents AS agents_1 ON agents_1.id = networkdhcpagentbindings_1.dhcp_agent_id) ON networks.id = networkdhcpagentbindings_1.network_id LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = networks.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN externalnetworks AS externalnetworks_1 ON networks.id = externalnetworks_1.network_id LEFT OUTER JOIN qos_network_policy_bindings AS qos_network_policy_bindings_1 ON networks.id = qos_network_policy_bindings_1.network_id LEFT OUTER JOIN networksecuritybindings AS networksecuritybindings_1 ON networks.id = networksecuritybindings_1.network_id LEFT OUTER JOIN networkdnsdomains AS networkdnsdomains_1 ON networks.id = networkdnsdomains_1.network_id \nWHERE networkrbacs.action = 'access_as_shared' AND (networkrbacs.target_tenant = '*' OR networkrbacs.target_tenant = '9f13bf11e06e4d81b44c8c3e62d4362b')",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "EXTERNALNETWORKS.NETWORK_ID",
        "NETWORKS.ID"
      ],
      [
        "NETWORKRBACS.OBJECT_ID",
        "NETWORKS.ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "NETWORKS.STANDARD_ATTR_ID"
      ],
      [
        "TAGS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ],
      [
        "EXTERNALNETWORKS.NETWORK_ID",
        "NETWORKS.ID"
      ],
      [
        "NETWORKS.ID",
        "QOS_NETWORK_POLICY_BINDINGS.NETWORK_ID"
      ],
      [
        "NETWORKS.ID",
        "NETWORKSECURITYBINDINGS.NETWORK_ID"
      ],
      [
        "NETWORKS.ID",
        "NETWORKDNSDOMAINS.NETWORK_ID"
      ]
    ]
  },
  {
    "question": "Provide information about subnet access control for subnet 9ce2600b-6566-4c81-9370-9b758d5f7ccc.",
    "sql": "SELECT networkrbacs.tenant_id AS networkrbacs_tenant_id, networkrbacs.id AS networkrbacs_id, networkrbacs.target_tenant AS networkrbacs_target_tenant, networkrbacs.action AS networkrbacs_action, networkrbacs.object_id AS networkrbacs_object_id, anon_1.subnets_network_id AS anon_1_subnets_network_id \nFROM (SELECT DISTINCT subnets.network_id AS subnets_network_id \nFROM subnets \nWHERE subnets.id IN ('9ce2600b-6566-4c81-9370-9b758d5f7ccc')) AS anon_1 INNER JOIN networkrbacs ON anon_1.subnets_network_id = networkrbacs.object_id ORDER BY anon_1.subnets_network_id",
    "db_id": "csail_stata_neutron",
    "join_keys": []
  },
  {
    "question": "Provide information (including info caches, and security groups) for these VMs d6e79a50-82c0-49be-9967-2d5da9c87001, 003c6f3d-6c4c-40dc-840b-81feb6360e31, 7fbac52f-3ee5-4c38-a25a-c52ac39c8bb7, ade24b16-e170-4c2f-a8bd-e0b3ef60a87d, 6fed903f-e4e5-415c-a41c-fc50bdde11de, e1820f1d-ef1b-4155-83fc-b5c9d782a67a, eb216147-8e56-4b6b-99cf-bd6436fd65bb, 5395b5fb-4d3e-4606-9ac4-145431f1fe93, 62e96b06-461a-4cf0-b9d5-80b981760c26.",
    "sql": "SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id \nFROM instances LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = instances.uuid LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = instances.uuid AND instances.deleted = 0 \nWHERE instances.uuid IN ('d6e79a50-82c0-49be-9967-2d5da9c87001', '003c6f3d-6c4c-40dc-840b-81feb6360e31', '7fbac52f-3ee5-4c38-a25a-c52ac39c8bb7', 'ade24b16-e170-4c2f-a8bd-e0b3ef60a87d', '6fed903f-e4e5-415c-a41c-fc50bdde11de', 'e1820f1d-ef1b-4155-83fc-b5c9d782a67a', 'eb216147-8e56-4b6b-99cf-bd6436fd65bb', '5395b5fb-4d3e-4606-9ac4-145431f1fe93', '62e96b06-461a-4cf0-b9d5-80b981760c26') ORDER BY instances.created_at DESC, instances.id DESC",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCES.UUID",
        "INSTANCE_INFO_CACHES.INSTANCE_UUID"
      ]
    ]
  },
  {
    "question": "Provide information about migrations associated with VM that moves to or from the physical host drive-59.",
    "sql": "SELECT migrations.created_at AS migrations_created_at, migrations.updated_at AS migrations_updated_at, migrations.deleted_at AS migrations_deleted_at, migrations.deleted AS migrations_deleted, migrations.id AS migrations_id, migrations.source_compute AS migrations_source_compute, migrations.dest_compute AS migrations_dest_compute, migrations.source_node AS migrations_source_node, migrations.dest_node AS migrations_dest_node, migrations.dest_host AS migrations_dest_host, migrations.old_instance_type_id AS migrations_old_instance_type_id, migrations.new_instance_type_id AS migrations_new_instance_type_id, migrations.instance_uuid AS migrations_instance_uuid, migrations.status AS migrations_status, migrations.migration_type AS migrations_migration_type, migrations.hidden AS migrations_hidden, migrations.memory_total AS migrations_memory_total, migrations.memory_processed AS migrations_memory_processed, migrations.memory_remaining AS migrations_memory_remaining, migrations.disk_total AS migrations_disk_total, migrations.disk_processed AS migrations_disk_processed, migrations.disk_remaining AS migrations_disk_remaining, instances_1.created_at AS instances_1_created_at, instances_1.updated_at AS instances_1_updated_at, instances_1.deleted_at AS instances_1_deleted_at, instances_1.deleted AS instances_1_deleted, instances_1.id AS instances_1_id, instances_1.user_id AS instances_1_user_id, instances_1.project_id AS instances_1_project_id, instances_1.image_ref AS instances_1_image_ref, instances_1.kernel_id AS instances_1_kernel_id, instances_1.ramdisk_id AS instances_1_ramdisk_id, instances_1.hostname AS instances_1_hostname, instances_1.launch_index AS instances_1_launch_index, instances_1.key_name AS instances_1_key_name, instances_1.key_data AS instances_1_key_data, instances_1.power_state AS instances_1_power_state, instances_1.vm_state AS instances_1_vm_state, instances_1.task_state AS instances_1_task_state, instances_1.memory_mb AS instances_1_memory_mb, instances_1.vcpus AS instances_1_vcpus, instances_1.root_gb AS instances_1_root_gb, instances_1.ephemeral_gb AS instances_1_ephemeral_gb, instances_1.ephemeral_key_uuid AS instances_1_ephemeral_key_uuid, instances_1.host AS instances_1_host, instances_1.node AS instances_1_node, instances_1.instance_type_id AS instances_1_instance_type_id, instances_1.user_data AS instances_1_user_data, instances_1.reservation_id AS instances_1_reservation_id, instances_1.launched_at AS instances_1_launched_at, instances_1.terminated_at AS instances_1_terminated_at, instances_1.availability_zone AS instances_1_availability_zone, instances_1.display_name AS instances_1_display_name, instances_1.display_description AS instances_1_display_description, instances_1.launched_on AS instances_1_launched_on, instances_1.locked AS instances_1_locked, instances_1.locked_by AS instances_1_locked_by, instances_1.os_type AS instances_1_os_type, instances_1.architecture AS instances_1_architecture, instances_1.vm_mode AS instances_1_vm_mode, instances_1.uuid AS instances_1_uuid, instances_1.root_device_name AS instances_1_root_device_name, instances_1.default_ephemeral_device AS instances_1_default_ephemeral_device, instances_1.default_swap_device AS instances_1_default_swap_device, instances_1.config_drive AS instances_1_config_drive, instances_1.access_ip_v4 AS instances_1_access_ip_v4, instances_1.access_ip_v6 AS instances_1_access_ip_v6, instances_1.auto_disk_config AS instances_1_auto_disk_config, instances_1.progress AS instances_1_progress, instances_1.shutdown_terminate AS instances_1_shutdown_terminate, instances_1.disable_terminate AS instances_1_disable_terminate, instances_1.cell_name AS instances_1_cell_name, instances_1.internal_id AS instances_1_internal_id, instances_1.cleaned AS instances_1_cleaned, instance_system_metadata_1.created_at AS instance_system_metadata_1_created_at, instance_system_metadata_1.updated_at AS instance_system_metadata_1_updated_at, instance_system_metadata_1.deleted_at AS instance_system_metadata_1_deleted_at, instance_system_metadata_1.deleted AS instance_system_metadata_1_deleted, instance_system_metadata_1.id AS instance_system_metadata_1_id, instance_system_metadata_1.`key` AS instance_system_metadata_1_key, instance_system_metadata_1.value AS instance_system_metadata_1_value, instance_system_metadata_1.instance_uuid AS instance_system_metadata_1_instance_uuid \nFROM migrations LEFT OUTER JOIN instances AS instances_1 ON migrations.instance_uuid = instances_1.uuid AND instances_1.deleted = 0 LEFT OUTER JOIN instance_system_metadata AS instance_system_metadata_1 ON instances_1.uuid = instance_system_metadata_1.instance_uuid \nWHERE migrations.deleted = 0 AND (migrations.source_compute = 'drive-59' AND migrations.source_node = 'drive-59.yahoo.ca.com' OR migrations.dest_compute = 'drive-59' AND migrations.dest_node = 'drive-59.yahoo.ca.com') AND migrations.status NOT IN ('accepted', 'confirmed', 'reverted', 'error', 'failed', 'completed')",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "MIGRATIONS.INSTANCE_UUID",
        "INSTANCES.UUID"
      ],
      [
        "INSTANCES.UUID",
        "INSTANCE_SYSTEM_METADATA.INSTANCE_UUID"
      ]
    ]
  },
  {
    "question": "Provide information (including info caches, and security groups) for these VMs 1453d6b3-d1a0-4649-8ac8-38f60beabb2b, 0c97d219-2dfc-4689-ad7f-fe3758d91a9e, 325b4e2d-ba54-4728-b2ed-af638cecb8cc, c2873331-af43-4ac9-82d6-d5547ecd15fa, e8202c21-082f-4182-a255-ad8e5de7932e, 26ad4e9b-215e-4b27-8718-1033f7a54c8e, 1f863dd8-76d3-4671-9b18-af456d1b2e1d, 5e028bfa-d3bd-4acd-8e7b-b293bc780814, 9480f48c-36a1-4885-9429-2d65d35f0031, 3307d967-b1cf-4c6f-b438-5fc0a8029488, 6341e0f8-9418-49e1-9f30-a7aa139f2c7b, 06758786-89b1-405e-ba26-00392864c06d, 1ab25e55-cdb4-44ae-84b9-e74b961cd463, 75ee7199-c9b6-45c9-9500-70566ec64969, 6036acdf-8118-4e8d-a98c-4cf6d4fc64c2, 4f3171be-cf1c-4a59-a3c0-8694461379f5, 514e9993-7b63-4984-a1af-8c6e33171b62, 07094c45-97cc-45a2-aef2-738a7d96a9ef, f050072f-dfba-40d6-8506-aece1c265508, c23b80b0-4d2f-4b29-8b67-9302b59bff29, 4bfb5507-31f3-4a5c-811c-996eef9b742a, 259f6b6c-8661-49a4-b171-e836f7bfd9de, 5e50080b-00a5-4df1-add3-065e69e647d6.",
    "sql": "SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id \nFROM instances LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = instances.uuid LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = instances.uuid AND instances.deleted = 0 \nWHERE instances.uuid IN ('1453d6b3-d1a0-4649-8ac8-38f60beabb2b', '0c97d219-2dfc-4689-ad7f-fe3758d91a9e', '325b4e2d-ba54-4728-b2ed-af638cecb8cc', 'c2873331-af43-4ac9-82d6-d5547ecd15fa', 'e8202c21-082f-4182-a255-ad8e5de7932e', '26ad4e9b-215e-4b27-8718-1033f7a54c8e', '1f863dd8-76d3-4671-9b18-af456d1b2e1d', '5e028bfa-d3bd-4acd-8e7b-b293bc780814', '9480f48c-36a1-4885-9429-2d65d35f0031', '3307d967-b1cf-4c6f-b438-5fc0a8029488', '6341e0f8-9418-49e1-9f30-a7aa139f2c7b', '06758786-89b1-405e-ba26-00392864c06d', '1ab25e55-cdb4-44ae-84b9-e74b961cd463', '75ee7199-c9b6-45c9-9500-70566ec64969', '6036acdf-8118-4e8d-a98c-4cf6d4fc64c2', '4f3171be-cf1c-4a59-a3c0-8694461379f5', '514e9993-7b63-4984-a1af-8c6e33171b62', '07094c45-97cc-45a2-aef2-738a7d96a9ef', 'f050072f-dfba-40d6-8506-aece1c265508', 'c23b80b0-4d2f-4b29-8b67-9302b59bff29', '4bfb5507-31f3-4a5c-811c-996eef9b742a', '259f6b6c-8661-49a4-b171-e836f7bfd9de', '5e50080b-00a5-4df1-add3-065e69e647d6') ORDER BY instances.created_at DESC, instances.id DESC",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCE_INFO_CACHES.INSTANCE_UUID",
        "INSTANCES.UUID"
      ]
    ]
  },
  {
    "question": "Provide information about the port with ip address 10.174.127.149/8 under network 0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d.",
    "sql": "SELECT ports.tenant_id AS ports_tenant_id, ports.id AS ports_id, ports.name AS ports_name, ports.network_id AS ports_network_id, ports.mac_address AS ports_mac_address, ports.admin_state_up AS ports_admin_state_up, ports.status AS ports_status, ports.device_id AS ports_device_id, ports.device_owner AS ports_device_owner, ports.dns_name AS ports_dns_name, ports.standard_attr_id AS ports_standard_attr_id, ipallocations_1.port_id AS ipallocations_1_port_id, ipallocations_1.ip_address AS ipallocations_1_ip_address, ipallocations_1.subnet_id AS ipallocations_1_subnet_id, ipallocations_1.network_id AS ipallocations_1_network_id, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, portsecuritybindings_1.port_id AS portsecuritybindings_1_port_id, portsecuritybindings_1.port_security_enabled AS portsecuritybindings_1_port_security_enabled, ml2_dvr_port_bindings_1.port_id AS ml2_dvr_port_bindings_1_port_id, ml2_dvr_port_bindings_1.host AS ml2_dvr_port_bindings_1_host, ml2_dvr_port_bindings_1.router_id AS ml2_dvr_port_bindings_1_router_id, ml2_dvr_port_bindings_1.vif_type AS ml2_dvr_port_bindings_1_vif_type, ml2_dvr_port_bindings_1.vif_details AS ml2_dvr_port_bindings_1_vif_details, ml2_dvr_port_bindings_1.vnic_type AS ml2_dvr_port_bindings_1_vnic_type, ml2_dvr_port_bindings_1.profile AS ml2_dvr_port_bindings_1_profile, ml2_dvr_port_bindings_1.status AS ml2_dvr_port_bindings_1_status, allowedaddresspairs_1.port_id AS allowedaddresspairs_1_port_id, allowedaddresspairs_1.mac_address AS allowedaddresspairs_1_mac_address, allowedaddresspairs_1.ip_address AS allowedaddresspairs_1_ip_address, qos_port_policy_bindings_1.policy_id AS qos_port_policy_bindings_1_policy_id, qos_port_policy_bindings_1.port_id AS qos_port_policy_bindings_1_port_id, securitygroupportbindings_1.port_id AS securitygroupportbindings_1_port_id, securitygroupportbindings_1.security_group_id AS securitygroupportbindings_1_security_group_id, ml2_port_bindings_1.port_id AS ml2_port_bindings_1_port_id, ml2_port_bindings_1.host AS ml2_port_bindings_1_host, ml2_port_bindings_1.vnic_type AS ml2_port_bindings_1_vnic_type, ml2_port_bindings_1.profile AS ml2_port_bindings_1_profile, ml2_port_bindings_1.vif_type AS ml2_port_bindings_1_vif_type, ml2_port_bindings_1.vif_details AS ml2_port_bindings_1_vif_details, extradhcpopts_1.id AS extradhcpopts_1_id, extradhcpopts_1.port_id AS extradhcpopts_1_port_id, extradhcpopts_1.opt_name AS extradhcpopts_1_opt_name, extradhcpopts_1.opt_value AS extradhcpopts_1_opt_value, extradhcpopts_1.ip_version AS extradhcpopts_1_ip_version, portdnses_1.port_id AS portdnses_1_port_id, portdnses_1.current_dns_name AS portdnses_1_current_dns_name, portdnses_1.current_dns_domain AS portdnses_1_current_dns_domain, portdnses_1.previous_dns_name AS portdnses_1_previous_dns_name, portdnses_1.previous_dns_domain AS portdnses_1_previous_dns_domain \nFROM ports LEFT OUTER JOIN ml2_port_bindings ON ports.id = ml2_port_bindings.port_id INNER JOIN ipallocations ON ports.id = ipallocations.port_id LEFT OUTER JOIN ipallocations AS ipallocations_1 ON ports.id = ipallocations_1.port_id LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = ports.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN portsecuritybindings AS portsecuritybindings_1 ON ports.id = portsecuritybindings_1.port_id LEFT OUTER JOIN ml2_dvr_port_bindings AS ml2_dvr_port_bindings_1 ON ports.id = ml2_dvr_port_bindings_1.port_id LEFT OUTER JOIN allowedaddresspairs AS allowedaddresspairs_1 ON ports.id = allowedaddresspairs_1.port_id LEFT OUTER JOIN qos_port_policy_bindings AS qos_port_policy_bindings_1 ON ports.id = qos_port_policy_bindings_1.port_id LEFT OUTER JOIN securitygroupportbindings AS securitygroupportbindings_1 ON ports.id = securitygroupportbindings_1.port_id LEFT OUTER JOIN ml2_port_bindings AS ml2_port_bindings_1 ON ports.id = ml2_port_bindings_1.port_id LEFT OUTER JOIN extradhcpopts AS extradhcpopts_1 ON ports.id = extradhcpopts_1.port_id LEFT OUTER JOIN portdnses AS portdnses_1 ON ports.id = portdnses_1.port_id \nWHERE ipallocations.ip_address IN ('10.174.127.149/8') AND ports.network_id IN ('0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d')",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "PORTS.ID",
        "ML2_PORT_BINDINGS.PORT_ID"
      ],
      [
        "IPALLOCATIONS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "IPALLOCATIONS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "PORTS.STANDARD_ATTR_ID"
      ],
      [
        "TAGS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ],
      [
        "PORTS.ID",
        "PORTSECURITYBINDINGS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "ML2_DVR_PORT_BINDINGS.PORT_ID"
      ],
      [
        "ALLOWEDADDRESSPAIRS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTS.ID",
        "QOS_PORT_POLICY_BINDINGS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "SECURITYGROUPPORTBINDINGS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "ML2_PORT_BINDINGS.PORT_ID"
      ],
      [
        "EXTRADHCPOPTS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTDNSES.PORT_ID",
        "PORTS.ID"
      ]
    ]
  },
  {
    "question": "Provide information about network access control for network b3d6c27a-a9bb-4521-b5de-4d65eb7490dc.",
    "sql": "SELECT networkrbacs.tenant_id AS networkrbacs_tenant_id, networkrbacs.id AS networkrbacs_id, networkrbacs.target_tenant AS networkrbacs_target_tenant, networkrbacs.action AS networkrbacs_action, networkrbacs.object_id AS networkrbacs_object_id, anon_1.networks_id AS anon_1_networks_id \nFROM (SELECT networks.id AS networks_id \nFROM networks LEFT OUTER JOIN externalnetworks ON networks.id = externalnetworks.network_id \nWHERE networks.id IN ('b3d6c27a-a9bb-4521-b5de-4d65eb7490dc')) AS anon_1 INNER JOIN networkrbacs ON anon_1.networks_id = networkrbacs.object_id ORDER BY anon_1.networks_id",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "EXTERNALNETWORKS.NETWORK_ID",
        "NETWORKS.ID"
      ]
    ]
  },
  {
    "question": "Provide information about physical host blitz1-32.",
    "sql": "SELECT cn.created_at, cn.updated_at, cn.deleted_at, cn.deleted, cn.id, cn.service_id, cn.host, cn.uuid, cn.vcpus, cn.memory_mb, cn.local_gb, cn.vcpus_used, cn.memory_mb_used, cn.local_gb_used, cn.hypervisor_type, cn.hypervisor_version, cn.hypervisor_hostname, cn.free_ram_mb, cn.free_disk_gb, cn.current_workload, cn.running_vms, cn.cpu_info, cn.disk_available_least, cn.host_ip, cn.supported_instances, cn.metrics, cn.pci_stats, cn.extra_resources, cn.stats, cn.numa_topology, cn.ram_allocation_ratio, cn.cpu_allocation_ratio, cn.disk_allocation_ratio, ram_inv.total AS inv_memory_mb, ram_inv.reserved AS inv_memory_mb_reserved, ram_inv.allocation_ratio AS inv_ram_allocation_ratio, ram_usage.used AS inv_memory_mb_used, cpu_inv.total AS inv_vcpus, cpu_inv.allocation_ratio AS inv_cpu_allocation_ratio, cpu_usage.used AS inv_vcpus_used, disk_inv.total AS inv_local_gb, disk_inv.reserved AS inv_local_gb_reserved, disk_inv.allocation_ratio AS inv_disk_allocation_ratio, disk_usage.used AS inv_local_gb_used \nFROM compute_nodes AS cn LEFT OUTER JOIN resource_providers AS rp ON cn.uuid = rp.uuid LEFT OUTER JOIN inventories AS ram_inv ON rp.id = ram_inv.resource_provider_id AND ram_inv.resource_class_id = 1 LEFT OUTER JOIN (SELECT allocations.resource_provider_id AS resource_provider_id, sum(allocations.used) AS used \nFROM allocations \nWHERE allocations.resource_class_id = 1 GROUP BY allocations.resource_provider_id) AS ram_usage ON ram_inv.resource_provider_id = ram_usage.resource_provider_id LEFT OUTER JOIN inventories AS cpu_inv ON rp.id = cpu_inv.resource_provider_id AND cpu_inv.resource_class_id = 0 LEFT OUTER JOIN (SELECT allocations.resource_provider_id AS resource_provider_id, sum(allocations.used) AS used \nFROM allocations \nWHERE allocations.resource_class_id = 0 GROUP BY allocations.resource_provider_id) AS cpu_usage ON cpu_inv.resource_provider_id = cpu_usage.resource_provider_id LEFT OUTER JOIN inventories AS disk_inv ON rp.id = disk_inv.resource_provider_id AND disk_inv.resource_class_id = 2 LEFT OUTER JOIN (SELECT allocations.resource_provider_id AS resource_provider_id, sum(allocations.used) AS used \nFROM allocations \nWHERE allocations.resource_class_id = 2 GROUP BY allocations.resource_provider_id) AS disk_usage ON disk_inv.resource_provider_id = disk_usage.resource_provider_id \nWHERE cn.deleted = 0 AND cn.host = 'blitz1-32'",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "RESOURCE_PROVIDERS.UUID",
        "COMPUTE_NODES.UUID"
      ],
      [
        "RESOURCE_PROVIDERS.ID",
        "INVENTORIES.RESOURCE_PROVIDER_ID"
      ],
      [
        "RESOURCE_PROVIDERS.ID",
        "INVENTORIES.RESOURCE_PROVIDER_ID"
      ],
      [
        "INVENTORIES.RESOURCE_PROVIDER_ID",
        "RESOURCE_PROVIDERS.ID"
      ]
    ]
  },
  {
    "question": "Provide information (including info caches, and security groups) about VMs running on physical host flash-9.",
    "sql": "SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id \nFROM instances LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = instances.uuid LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = instances.uuid AND instances.deleted = 0 \nWHERE instances.deleted = 0 AND instances.host = 'flash-9'",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCES.UUID",
        "INSTANCE_INFO_CACHES.INSTANCE_UUID"
      ]
    ]
  },
  {
    "question": "Provide information about publicly available subnets owned by tenant 9f13bf11e06e4d81b44c8c3e62d4362b.",
    "sql": "SELECT subnets.tenant_id AS subnets_tenant_id, subnets.id AS subnets_id, subnets.name AS subnets_name, subnets.network_id AS subnets_network_id, subnets.subnetpool_id AS subnets_subnetpool_id, subnets.ip_version AS subnets_ip_version, subnets.cidr AS subnets_cidr, subnets.gateway_ip AS subnets_gateway_ip, subnets.enable_dhcp AS subnets_enable_dhcp, subnets.ipv6_ra_mode AS subnets_ipv6_ra_mode, subnets.ipv6_address_mode AS subnets_ipv6_address_mode, subnets.standard_attr_id AS subnets_standard_attr_id, anon_1.networks_id AS anon_1_networks_id, subnetpoolprefixes_1.cidr AS subnetpoolprefixes_1_cidr, subnetpoolprefixes_1.subnetpool_id AS subnetpoolprefixes_1_subnetpool_id, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, subnetpools_1.tenant_id AS subnetpools_1_tenant_id, subnetpools_1.id AS subnetpools_1_id, subnetpools_1.name AS subnetpools_1_name, subnetpools_1.ip_version AS subnetpools_1_ip_version, subnetpools_1.default_prefixlen AS subnetpools_1_default_prefixlen, subnetpools_1.min_prefixlen AS subnetpools_1_min_prefixlen, subnetpools_1.max_prefixlen AS subnetpools_1_max_prefixlen, subnetpools_1.shared AS subnetpools_1_shared, subnetpools_1.is_default AS subnetpools_1_is_default, subnetpools_1.default_quota AS subnetpools_1_default_quota, subnetpools_1.hash AS subnetpools_1_hash, subnetpools_1.address_scope_id AS subnetpools_1_address_scope_id, subnetpools_1.standard_attr_id AS subnetpools_1_standard_attr_id, ipallocationpools_1.id AS ipallocationpools_1_id, ipallocationpools_1.subnet_id AS ipallocationpools_1_subnet_id, ipallocationpools_1.first_ip AS ipallocationpools_1_first_ip, ipallocationpools_1.last_ip AS ipallocationpools_1_last_ip, dnsnameservers_1.address AS dnsnameservers_1_address, dnsnameservers_1.subnet_id AS dnsnameservers_1_subnet_id, dnsnameservers_1.`order` AS dnsnameservers_1_order, subnetroutes_1.destination AS subnetroutes_1_destination, subnetroutes_1.nexthop AS subnetroutes_1_nexthop, subnetroutes_1.subnet_id AS subnetroutes_1_subnet_id, standardattributes_2.created_at AS standardattributes_2_created_at, standardattributes_2.updated_at AS standardattributes_2_updated_at, standardattributes_2.id AS standardattributes_2_id, standardattributes_2.resource_type AS standardattributes_2_resource_type, standardattributes_2.description AS standardattributes_2_description, tags_2.standard_attr_id AS tags_2_standard_attr_id, tags_2.tag AS tags_2_tag \nFROM (SELECT networks.id AS networks_id \nFROM networks LEFT OUTER JOIN externalnetworks ON networks.id = externalnetworks.network_id LEFT OUTER JOIN networkrbacs ON networks.id = networkrbacs.object_id \nWHERE networkrbacs.action = 'access_as_shared' AND (networkrbacs.target_tenant = '*' OR networkrbacs.target_tenant = '9f13bf11e06e4d81b44c8c3e62d4362b')) AS anon_1 INNER JOIN subnets ON anon_1.networks_id = subnets.network_id LEFT OUTER JOIN subnetpools AS subnetpools_1 ON subnets.subnetpool_id = subnetpools_1.id LEFT OUTER JOIN subnetpoolprefixes AS subnetpoolprefixes_1 ON subnetpools_1.id = subnetpoolprefixes_1.subnetpool_id LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = subnetpools_1.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN ipallocationpools AS ipallocationpools_1 ON subnets.id = ipallocationpools_1.subnet_id LEFT OUTER JOIN dnsnameservers AS dnsnameservers_1 ON subnets.id = dnsnameservers_1.subnet_id LEFT OUTER JOIN subnetroutes AS subnetroutes_1 ON subnets.id = subnetroutes_1.subnet_id LEFT OUTER JOIN standardattributes AS standardattributes_2 ON standardattributes_2.id = subnets.standard_attr_id LEFT OUTER JOIN tags AS tags_2 ON standardattributes_2.id = tags_2.standard_attr_id ORDER BY anon_1.networks_id, dnsnameservers_1.`order`",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "NETWORKS.ID",
        "EXTERNALNETWORKS.NETWORK_ID"
      ],
      [
        "NETWORKRBACS.OBJECT_ID",
        "NETWORKS.ID"
      ],
      [
        "SUBNETPOOLS.ID",
        "SUBNETS.SUBNETPOOL_ID"
      ],
      [
        "SUBNETPOOLS.ID",
        "SUBNETPOOLPREFIXES.SUBNETPOOL_ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "SUBNETPOOLS.STANDARD_ATTR_ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "TAGS.STANDARD_ATTR_ID"
      ],
      [
        "SUBNETS.ID",
        "IPALLOCATIONPOOLS.SUBNET_ID"
      ],
      [
        "SUBNETS.ID",
        "DNSNAMESERVERS.SUBNET_ID"
      ],
      [
        "SUBNETS.ID",
        "SUBNETROUTES.SUBNET_ID"
      ],
      [
        "SUBNETS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "TAGS.STANDARD_ATTR_ID"
      ]
    ]
  },
  {
    "question": "Provide information about the loadbalancer with id 0367b35b-023b-41d5-816b-359b3bcbdd8e.",
    "sql": "SELECT lbaas_loadbalancers.tenant_id AS lbaas_loadbalancers_tenant_id, lbaas_loadbalancers.id AS lbaas_loadbalancers_id, lbaas_loadbalancers.name AS lbaas_loadbalancers_name, lbaas_loadbalancers.description AS lbaas_loadbalancers_description, lbaas_loadbalancers.vip_subnet_id AS lbaas_loadbalancers_vip_subnet_id, lbaas_loadbalancers.vip_port_id AS lbaas_loadbalancers_vip_port_id, lbaas_loadbalancers.vip_address AS lbaas_loadbalancers_vip_address, lbaas_loadbalancers.provisioning_status AS lbaas_loadbalancers_provisioning_status, lbaas_loadbalancers.operating_status AS lbaas_loadbalancers_operating_status, lbaas_loadbalancers.admin_state_up AS lbaas_loadbalancers_admin_state_up, lbaas_loadbalancers.flavor_id AS lbaas_loadbalancers_flavor_id, lbaas_loadbalancer_statistics_1.loadbalancer_id AS lbaas_loadbalancer_statistics_1_loadbalancer_id, lbaas_loadbalancer_statistics_1.bytes_in AS lbaas_loadbalancer_statistics_1_bytes_in, lbaas_loadbalancer_statistics_1.bytes_out AS lbaas_loadbalancer_statistics_1_bytes_out, lbaas_loadbalancer_statistics_1.active_connections AS lbaas_loadbalancer_statistics_1_active_connections, lbaas_loadbalancer_statistics_1.total_connections AS lbaas_loadbalancer_statistics_1_total_connections, providerresourceassociations_1.provider_name AS providerresourceassociations_1_provider_name, providerresourceassociations_1.resource_id AS providerresourceassociations_1_resource_id \nFROM lbaas_loadbalancers LEFT OUTER JOIN lbaas_loadbalancer_statistics AS lbaas_loadbalancer_statistics_1 ON lbaas_loadbalancers.id = lbaas_loadbalancer_statistics_1.loadbalancer_id LEFT OUTER JOIN providerresourceassociations AS providerresourceassociations_1 ON lbaas_loadbalancers.id = providerresourceassociations_1.resource_id \nWHERE lbaas_loadbalancers.id = '0367b35b-023b-41d5-816b-359b3bcbdd8e'",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "LBAAS_LOADBALANCERS.ID",
        "LBAAS_LOADBALANCER_STATISTICS.LOADBALANCER_ID"
      ],
      [
        "LBAAS_LOADBALANCERS.ID",
        "PROVIDERRESOURCEASSOCIATIONS.RESOURCE_ID"
      ]
    ]
  },
  {
    "question": "Provide information (including info caches, and security groups) for these VMs dae33792-fddf-4ef1-b06f-aca2d8cf90e2, 69d29554-8111-49e9-9033-4790700fac35, 85bdf307-26d3-490d-83c4-b3c803bbe12e, 6e2ca95e-a9bc-4426-a7ea-6de5c75d1fe6, d29c6a18-68a1-4f80-8962-e6be76be155b, 5634b187-fac9-47e3-8452-00d4c180a135, 6a4653b2-60cc-4085-b5d6-d3a90d8a099d, bd6a9e8f-8652-498f-b7aa-027f2f40c60d, 234b3669-30a2-432e-a906-b4c747cea3e7, b67262b4-644c-48b5-9c33-ed968f60cd77, 2eaa5fee-b472-46b0-a79a-9df601646581, a878223b-7b58-4fcb-a027-a00063d40e32, 7393f4d3-e6e5-4cb7-9380-eda551372018, 991b0946-6377-41c3-b4ad-16880d24416f, 96c76788-8d28-42d0-8765-44d9990d3152, 5c1881f2-face-4e2a-aa92-17d9848f2a96, f1af17d9-bdb7-4fea-9772-182301b87c1d, 7760956b-c1e4-440b-8ba3-676896f4441a, f3e6a1db-6733-45fb-9ff5-53b760b020ff, 9fbdb8d9-e3b3-40ae-9e97-915981107caf, f78b9615-5abe-4249-9da0-e0b58821cc61, 50d909da-5a4b-4c20-af67-fe2d6362b7a3.",
    "sql": "SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id \nFROM instances LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = instances.uuid LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = instances.uuid AND instances.deleted = 0 \nWHERE instances.uuid IN ('dae33792-fddf-4ef1-b06f-aca2d8cf90e2', '69d29554-8111-49e9-9033-4790700fac35', '85bdf307-26d3-490d-83c4-b3c803bbe12e', '6e2ca95e-a9bc-4426-a7ea-6de5c75d1fe6', 'd29c6a18-68a1-4f80-8962-e6be76be155b', '5634b187-fac9-47e3-8452-00d4c180a135', '6a4653b2-60cc-4085-b5d6-d3a90d8a099d', 'bd6a9e8f-8652-498f-b7aa-027f2f40c60d', '234b3669-30a2-432e-a906-b4c747cea3e7', 'b67262b4-644c-48b5-9c33-ed968f60cd77', '2eaa5fee-b472-46b0-a79a-9df601646581', 'a878223b-7b58-4fcb-a027-a00063d40e32', '7393f4d3-e6e5-4cb7-9380-eda551372018', '991b0946-6377-41c3-b4ad-16880d24416f', '96c76788-8d28-42d0-8765-44d9990d3152', '5c1881f2-face-4e2a-aa92-17d9848f2a96', 'f1af17d9-bdb7-4fea-9772-182301b87c1d', '7760956b-c1e4-440b-8ba3-676896f4441a', 'f3e6a1db-6733-45fb-9ff5-53b760b020ff', '9fbdb8d9-e3b3-40ae-9e97-915981107caf', 'f78b9615-5abe-4249-9da0-e0b58821cc61', '50d909da-5a4b-4c20-af67-fe2d6362b7a3') ORDER BY instances.created_at DESC, instances.id DESC",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCE_INFO_CACHES.INSTANCE_UUID",
        "INSTANCES.UUID"
      ]
    ]
  },
  {
    "question": "Provide information (including info caches, and security groups) for these VMs caeefb11-d678-46c5-b240-639688fff42e, 20fe7a2a-f2c0-4d9a-af3f-2d836fd35f3c, d68d2937-511a-4f89-8a4d-a3f114781e1a, 337d64cd-2daf-488a-b74b-5eddf97462db, 2e078448-351f-419b-adca-12b644fa6d2c, 2e35f274-5b4a-4cba-9cfe-0786c0a90906, 234fd9ec-1375-46bd-969a-237fc46eadc4, f14b5d3f-1c42-40b1-a48b-6baeba62c889, 6f2b0902-4667-4daa-b8dc-42cac14ab9e5, 29c9a596-a557-4ff7-abd6-a985bdc39be0, 8c691810-dfd5-44d8-ae8e-0ffba13bde47, b9eb36ee-3afc-40c0-a6b4-5f9ed2e41e8e, cd27ab83-30a2-4be8-942f-a3ee124dc4e4.",
    "sql": "SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id \nFROM instances LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = instances.uuid LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = instances.uuid AND instances.deleted = 0 \nWHERE instances.uuid IN ('caeefb11-d678-46c5-b240-639688fff42e', '20fe7a2a-f2c0-4d9a-af3f-2d836fd35f3c', 'd68d2937-511a-4f89-8a4d-a3f114781e1a', '337d64cd-2daf-488a-b74b-5eddf97462db', '2e078448-351f-419b-adca-12b644fa6d2c', '2e35f274-5b4a-4cba-9cfe-0786c0a90906', '234fd9ec-1375-46bd-969a-237fc46eadc4', 'f14b5d3f-1c42-40b1-a48b-6baeba62c889', '6f2b0902-4667-4daa-b8dc-42cac14ab9e5', '29c9a596-a557-4ff7-abd6-a985bdc39be0', '8c691810-dfd5-44d8-ae8e-0ffba13bde47', 'b9eb36ee-3afc-40c0-a6b4-5f9ed2e41e8e', 'cd27ab83-30a2-4be8-942f-a3ee124dc4e4') ORDER BY instances.created_at DESC, instances.id DESC",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCE_INFO_CACHES.INSTANCE_UUID",
        "INSTANCES.UUID"
      ]
    ]
  },
  {
    "question": "Provide information (including info caches, security groups, system metadata, and extra data) about the instance with id 36cc0a85-c3ef-4ed4-8883-369c87aa96e9.",
    "sql": "SELECT anon_1.instances_created_at AS anon_1_instances_created_at, anon_1.instances_updated_at AS anon_1_instances_updated_at, anon_1.instances_deleted_at AS anon_1_instances_deleted_at, anon_1.instances_deleted AS anon_1_instances_deleted, anon_1.instances_id AS anon_1_instances_id, anon_1.instances_user_id AS anon_1_instances_user_id, anon_1.instances_project_id AS anon_1_instances_project_id, anon_1.instances_image_ref AS anon_1_instances_image_ref, anon_1.instances_kernel_id AS anon_1_instances_kernel_id, anon_1.instances_ramdisk_id AS anon_1_instances_ramdisk_id, anon_1.instances_hostname AS anon_1_instances_hostname, anon_1.instances_launch_index AS anon_1_instances_launch_index, anon_1.instances_key_name AS anon_1_instances_key_name, anon_1.instances_key_data AS anon_1_instances_key_data, anon_1.instances_power_state AS anon_1_instances_power_state, anon_1.instances_vm_state AS anon_1_instances_vm_state, anon_1.instances_task_state AS anon_1_instances_task_state, anon_1.instances_memory_mb AS anon_1_instances_memory_mb, anon_1.instances_vcpus AS anon_1_instances_vcpus, anon_1.instances_root_gb AS anon_1_instances_root_gb, anon_1.instances_ephemeral_gb AS anon_1_instances_ephemeral_gb, anon_1.instances_ephemeral_key_uuid AS anon_1_instances_ephemeral_key_uuid, anon_1.instances_host AS anon_1_instances_host, anon_1.instances_node AS anon_1_instances_node, anon_1.instances_instance_type_id AS anon_1_instances_instance_type_id, anon_1.instances_user_data AS anon_1_instances_user_data, anon_1.instances_reservation_id AS anon_1_instances_reservation_id, anon_1.instances_launched_at AS anon_1_instances_launched_at, anon_1.instances_terminated_at AS anon_1_instances_terminated_at, anon_1.instances_availability_zone AS anon_1_instances_availability_zone, anon_1.instances_display_name AS anon_1_instances_display_name, anon_1.instances_display_description AS anon_1_instances_display_description, anon_1.instances_launched_on AS anon_1_instances_launched_on, anon_1.instances_locked AS anon_1_instances_locked, anon_1.instances_locked_by AS anon_1_instances_locked_by, anon_1.instances_os_type AS anon_1_instances_os_type, anon_1.instances_architecture AS anon_1_instances_architecture, anon_1.instances_vm_mode AS anon_1_instances_vm_mode, anon_1.instances_uuid AS anon_1_instances_uuid, anon_1.instances_root_device_name AS anon_1_instances_root_device_name, anon_1.instances_default_ephemeral_device AS anon_1_instances_default_ephemeral_device, anon_1.instances_default_swap_device AS anon_1_instances_default_swap_device, anon_1.instances_config_drive AS anon_1_instances_config_drive, anon_1.instances_access_ip_v4 AS anon_1_instances_access_ip_v4, anon_1.instances_access_ip_v6 AS anon_1_instances_access_ip_v6, anon_1.instances_auto_disk_config AS anon_1_instances_auto_disk_config, anon_1.instances_progress AS anon_1_instances_progress, anon_1.instances_shutdown_terminate AS anon_1_instances_shutdown_terminate, anon_1.instances_disable_terminate AS anon_1_instances_disable_terminate, anon_1.instances_cell_name AS anon_1_instances_cell_name, anon_1.instances_internal_id AS anon_1_instances_internal_id, anon_1.instances_cleaned AS anon_1_instances_cleaned, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id, security_group_rules_1.created_at AS security_group_rules_1_created_at, security_group_rules_1.updated_at AS security_group_rules_1_updated_at, security_group_rules_1.deleted_at AS security_group_rules_1_deleted_at, security_group_rules_1.deleted AS security_group_rules_1_deleted, security_group_rules_1.id AS security_group_rules_1_id, security_group_rules_1.parent_group_id AS security_group_rules_1_parent_group_id, security_group_rules_1.protocol AS security_group_rules_1_protocol, security_group_rules_1.from_port AS security_group_rules_1_from_port, security_group_rules_1.to_port AS security_group_rules_1_to_port, security_group_rules_1.cidr AS security_group_rules_1_cidr, security_group_rules_1.group_id AS security_group_rules_1_group_id, instance_system_metadata_1.created_at AS instance_system_metadata_1_created_at, instance_system_metadata_1.updated_at AS instance_system_metadata_1_updated_at, instance_system_metadata_1.deleted_at AS instance_system_metadata_1_deleted_at, instance_system_metadata_1.deleted AS instance_system_metadata_1_deleted, instance_system_metadata_1.id AS instance_system_metadata_1_id, instance_system_metadata_1.`key` AS instance_system_metadata_1_key, instance_system_metadata_1.value AS instance_system_metadata_1_value, instance_system_metadata_1.instance_uuid AS instance_system_metadata_1_instance_uuid, instance_extra_1.flavor AS instance_extra_1_flavor, instance_extra_1.created_at AS instance_extra_1_created_at, instance_extra_1.updated_at AS instance_extra_1_updated_at, instance_extra_1.deleted_at AS instance_extra_1_deleted_at, instance_extra_1.deleted AS instance_extra_1_deleted, instance_extra_1.id AS instance_extra_1_id, instance_extra_1.instance_uuid AS instance_extra_1_instance_uuid \nFROM (SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned \nFROM instances \nWHERE instances.deleted = 0 AND instances.uuid = '36cc0a85-c3ef-4ed4-8883-369c87aa96e9' \n LIMIT 1) AS anon_1 LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = anon_1.instances_uuid LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = anon_1.instances_uuid AND anon_1.instances_deleted = 0 LEFT OUTER JOIN security_group_rules AS security_group_rules_1 ON security_group_rules_1.parent_group_id = security_groups_1.id AND security_group_rules_1.deleted = 0 LEFT OUTER JOIN instance_system_metadata AS instance_system_metadata_1 ON anon_1.instances_uuid = instance_system_metadata_1.instance_uuid LEFT OUTER JOIN instance_extra AS instance_extra_1 ON instance_extra_1.instance_uuid = anon_1.instances_uuid",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "SECURITY_GROUPS.ID",
        "SECURITY_GROUP_RULES.PARENT_GROUP_ID"
      ]
    ]
  },
  {
    "question": "Provide information (including info caches, and security groups) for these VMs 9aebab6b-08f0-4000-8573-a7b71b45d582, 1262ae40-d640-412d-8e61-842b5ed13b1e, 11e66ab0-5bfe-4863-85f6-b95596d8e649, 4ddffb34-bf5a-45e9-970e-a0d34272bea5, 9314873f-2e06-4f8e-a65c-d47198625763, a60f0841-84ba-4345-aa3a-cbea12a8ae11, e8e97077-88c0-4d4d-b55d-ae46f89353bb, d32a5f25-b746-4ff7-8709-087d0505d952, 2d1cfb18-913f-4754-b077-f96de1742b62, dc6a6cc8-c40e-4d5d-8bcf-5dfc7a0bf7b9, fbfcb130-e760-42f5-93d1-f9e93f9a51e4, 455124fd-f958-448b-b325-d3bda5887196, 87fe155b-466c-4237-8a53-c239721a6466, 804e87ae-6539-4151-9360-f77f99a89622.",
    "sql": "SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id \nFROM instances LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = instances.uuid LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = instances.uuid AND instances.deleted = 0 \nWHERE instances.uuid IN ('9aebab6b-08f0-4000-8573-a7b71b45d582', '1262ae40-d640-412d-8e61-842b5ed13b1e', '11e66ab0-5bfe-4863-85f6-b95596d8e649', '4ddffb34-bf5a-45e9-970e-a0d34272bea5', '9314873f-2e06-4f8e-a65c-d47198625763', 'a60f0841-84ba-4345-aa3a-cbea12a8ae11', 'e8e97077-88c0-4d4d-b55d-ae46f89353bb', 'd32a5f25-b746-4ff7-8709-087d0505d952', '2d1cfb18-913f-4754-b077-f96de1742b62', 'dc6a6cc8-c40e-4d5d-8bcf-5dfc7a0bf7b9', 'fbfcb130-e760-42f5-93d1-f9e93f9a51e4', '455124fd-f958-448b-b325-d3bda5887196', '87fe155b-466c-4237-8a53-c239721a6466', '804e87ae-6539-4151-9360-f77f99a89622') ORDER BY instances.created_at DESC, instances.id DESC",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCES.UUID",
        "INSTANCE_INFO_CACHES.INSTANCE_UUID"
      ]
    ]
  },
  {
    "question": "Provide information about migrations associated with VM that moves to or from the physical host astro-92.",
    "sql": "SELECT migrations.created_at AS migrations_created_at, migrations.updated_at AS migrations_updated_at, migrations.deleted_at AS migrations_deleted_at, migrations.deleted AS migrations_deleted, migrations.id AS migrations_id, migrations.source_compute AS migrations_source_compute, migrations.dest_compute AS migrations_dest_compute, migrations.source_node AS migrations_source_node, migrations.dest_node AS migrations_dest_node, migrations.dest_host AS migrations_dest_host, migrations.old_instance_type_id AS migrations_old_instance_type_id, migrations.new_instance_type_id AS migrations_new_instance_type_id, migrations.instance_uuid AS migrations_instance_uuid, migrations.status AS migrations_status, migrations.migration_type AS migrations_migration_type, migrations.hidden AS migrations_hidden, migrations.memory_total AS migrations_memory_total, migrations.memory_processed AS migrations_memory_processed, migrations.memory_remaining AS migrations_memory_remaining, migrations.disk_total AS migrations_disk_total, migrations.disk_processed AS migrations_disk_processed, migrations.disk_remaining AS migrations_disk_remaining, instances_1.created_at AS instances_1_created_at, instances_1.updated_at AS instances_1_updated_at, instances_1.deleted_at AS instances_1_deleted_at, instances_1.deleted AS instances_1_deleted, instances_1.id AS instances_1_id, instances_1.user_id AS instances_1_user_id, instances_1.project_id AS instances_1_project_id, instances_1.image_ref AS instances_1_image_ref, instances_1.kernel_id AS instances_1_kernel_id, instances_1.ramdisk_id AS instances_1_ramdisk_id, instances_1.hostname AS instances_1_hostname, instances_1.launch_index AS instances_1_launch_index, instances_1.key_name AS instances_1_key_name, instances_1.key_data AS instances_1_key_data, instances_1.power_state AS instances_1_power_state, instances_1.vm_state AS instances_1_vm_state, instances_1.task_state AS instances_1_task_state, instances_1.memory_mb AS instances_1_memory_mb, instances_1.vcpus AS instances_1_vcpus, instances_1.root_gb AS instances_1_root_gb, instances_1.ephemeral_gb AS instances_1_ephemeral_gb, instances_1.ephemeral_key_uuid AS instances_1_ephemeral_key_uuid, instances_1.host AS instances_1_host, instances_1.node AS instances_1_node, instances_1.instance_type_id AS instances_1_instance_type_id, instances_1.user_data AS instances_1_user_data, instances_1.reservation_id AS instances_1_reservation_id, instances_1.launched_at AS instances_1_launched_at, instances_1.terminated_at AS instances_1_terminated_at, instances_1.availability_zone AS instances_1_availability_zone, instances_1.display_name AS instances_1_display_name, instances_1.display_description AS instances_1_display_description, instances_1.launched_on AS instances_1_launched_on, instances_1.locked AS instances_1_locked, instances_1.locked_by AS instances_1_locked_by, instances_1.os_type AS instances_1_os_type, instances_1.architecture AS instances_1_architecture, instances_1.vm_mode AS instances_1_vm_mode, instances_1.uuid AS instances_1_uuid, instances_1.root_device_name AS instances_1_root_device_name, instances_1.default_ephemeral_device AS instances_1_default_ephemeral_device, instances_1.default_swap_device AS instances_1_default_swap_device, instances_1.config_drive AS instances_1_config_drive, instances_1.access_ip_v4 AS instances_1_access_ip_v4, instances_1.access_ip_v6 AS instances_1_access_ip_v6, instances_1.auto_disk_config AS instances_1_auto_disk_config, instances_1.progress AS instances_1_progress, instances_1.shutdown_terminate AS instances_1_shutdown_terminate, instances_1.disable_terminate AS instances_1_disable_terminate, instances_1.cell_name AS instances_1_cell_name, instances_1.internal_id AS instances_1_internal_id, instances_1.cleaned AS instances_1_cleaned, instance_system_metadata_1.created_at AS instance_system_metadata_1_created_at, instance_system_metadata_1.updated_at AS instance_system_metadata_1_updated_at, instance_system_metadata_1.deleted_at AS instance_system_metadata_1_deleted_at, instance_system_metadata_1.deleted AS instance_system_metadata_1_deleted, instance_system_metadata_1.id AS instance_system_metadata_1_id, instance_system_metadata_1.`key` AS instance_system_metadata_1_key, instance_system_metadata_1.value AS instance_system_metadata_1_value, instance_system_metadata_1.instance_uuid AS instance_system_metadata_1_instance_uuid \nFROM migrations LEFT OUTER JOIN instances AS instances_1 ON migrations.instance_uuid = instances_1.uuid AND instances_1.deleted = 0 LEFT OUTER JOIN instance_system_metadata AS instance_system_metadata_1 ON instances_1.uuid = instance_system_metadata_1.instance_uuid \nWHERE migrations.deleted = 0 AND (migrations.source_compute = 'astro-92' AND migrations.source_node = 'astro-92.yahoo.ca.com' OR migrations.dest_compute = 'astro-92' AND migrations.dest_node = 'astro-92.yahoo.ca.com') AND migrations.status NOT IN ('accepted', 'confirmed', 'reverted', 'error', 'failed', 'completed')",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCES.UUID",
        "MIGRATIONS.INSTANCE_UUID"
      ],
      [
        "INSTANCES.UUID",
        "INSTANCE_SYSTEM_METADATA.INSTANCE_UUID"
      ]
    ]
  },
  {
    "question": "Provide information (including info caches, and security groups) about VMs running on physical host drive-59.",
    "sql": "SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id \nFROM instances LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = instances.uuid LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = instances.uuid AND instances.deleted = 0 \nWHERE instances.deleted = 0 AND instances.host = 'drive-59'",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCES.UUID",
        "INSTANCE_INFO_CACHES.INSTANCE_UUID"
      ]
    ]
  },
  {
    "question": "Provide information about physical host astro-92.",
    "sql": "SELECT cn.created_at, cn.updated_at, cn.deleted_at, cn.deleted, cn.id, cn.service_id, cn.host, cn.uuid, cn.vcpus, cn.memory_mb, cn.local_gb, cn.vcpus_used, cn.memory_mb_used, cn.local_gb_used, cn.hypervisor_type, cn.hypervisor_version, cn.hypervisor_hostname, cn.free_ram_mb, cn.free_disk_gb, cn.current_workload, cn.running_vms, cn.cpu_info, cn.disk_available_least, cn.host_ip, cn.supported_instances, cn.metrics, cn.pci_stats, cn.extra_resources, cn.stats, cn.numa_topology, cn.ram_allocation_ratio, cn.cpu_allocation_ratio, cn.disk_allocation_ratio, ram_inv.total AS inv_memory_mb, ram_inv.reserved AS inv_memory_mb_reserved, ram_inv.allocation_ratio AS inv_ram_allocation_ratio, ram_usage.used AS inv_memory_mb_used, cpu_inv.total AS inv_vcpus, cpu_inv.allocation_ratio AS inv_cpu_allocation_ratio, cpu_usage.used AS inv_vcpus_used, disk_inv.total AS inv_local_gb, disk_inv.reserved AS inv_local_gb_reserved, disk_inv.allocation_ratio AS inv_disk_allocation_ratio, disk_usage.used AS inv_local_gb_used \nFROM compute_nodes AS cn LEFT OUTER JOIN resource_providers AS rp ON cn.uuid = rp.uuid LEFT OUTER JOIN inventories AS ram_inv ON rp.id = ram_inv.resource_provider_id AND ram_inv.resource_class_id = 1 LEFT OUTER JOIN (SELECT allocations.resource_provider_id AS resource_provider_id, sum(allocations.used) AS used \nFROM allocations \nWHERE allocations.resource_class_id = 1 GROUP BY allocations.resource_provider_id) AS ram_usage ON ram_inv.resource_provider_id = ram_usage.resource_provider_id LEFT OUTER JOIN inventories AS cpu_inv ON rp.id = cpu_inv.resource_provider_id AND cpu_inv.resource_class_id = 0 LEFT OUTER JOIN (SELECT allocations.resource_provider_id AS resource_provider_id, sum(allocations.used) AS used \nFROM allocations \nWHERE allocations.resource_class_id = 0 GROUP BY allocations.resource_provider_id) AS cpu_usage ON cpu_inv.resource_provider_id = cpu_usage.resource_provider_id LEFT OUTER JOIN inventories AS disk_inv ON rp.id = disk_inv.resource_provider_id AND disk_inv.resource_class_id = 2 LEFT OUTER JOIN (SELECT allocations.resource_provider_id AS resource_provider_id, sum(allocations.used) AS used \nFROM allocations \nWHERE allocations.resource_class_id = 2 GROUP BY allocations.resource_provider_id) AS disk_usage ON disk_inv.resource_provider_id = disk_usage.resource_provider_id \nWHERE cn.deleted = 0 AND cn.host = 'astro-92'",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "COMPUTE_NODES.UUID",
        "RESOURCE_PROVIDERS.UUID"
      ],
      [
        "INVENTORIES.RESOURCE_PROVIDER_ID",
        "RESOURCE_PROVIDERS.ID"
      ],
      [
        "INVENTORIES.RESOURCE_PROVIDER_ID",
        "RESOURCE_PROVIDERS.ID"
      ],
      [
        "RESOURCE_PROVIDERS.ID",
        "INVENTORIES.RESOURCE_PROVIDER_ID"
      ]
    ]
  },
  {
    "question": "Provide information about migrations associated with VM that moves to or from the physical host axis-11.",
    "sql": "SELECT migrations.created_at AS migrations_created_at, migrations.updated_at AS migrations_updated_at, migrations.deleted_at AS migrations_deleted_at, migrations.deleted AS migrations_deleted, migrations.id AS migrations_id, migrations.source_compute AS migrations_source_compute, migrations.dest_compute AS migrations_dest_compute, migrations.source_node AS migrations_source_node, migrations.dest_node AS migrations_dest_node, migrations.dest_host AS migrations_dest_host, migrations.old_instance_type_id AS migrations_old_instance_type_id, migrations.new_instance_type_id AS migrations_new_instance_type_id, migrations.instance_uuid AS migrations_instance_uuid, migrations.status AS migrations_status, migrations.migration_type AS migrations_migration_type, migrations.hidden AS migrations_hidden, migrations.memory_total AS migrations_memory_total, migrations.memory_processed AS migrations_memory_processed, migrations.memory_remaining AS migrations_memory_remaining, migrations.disk_total AS migrations_disk_total, migrations.disk_processed AS migrations_disk_processed, migrations.disk_remaining AS migrations_disk_remaining, instances_1.created_at AS instances_1_created_at, instances_1.updated_at AS instances_1_updated_at, instances_1.deleted_at AS instances_1_deleted_at, instances_1.deleted AS instances_1_deleted, instances_1.id AS instances_1_id, instances_1.user_id AS instances_1_user_id, instances_1.project_id AS instances_1_project_id, instances_1.image_ref AS instances_1_image_ref, instances_1.kernel_id AS instances_1_kernel_id, instances_1.ramdisk_id AS instances_1_ramdisk_id, instances_1.hostname AS instances_1_hostname, instances_1.launch_index AS instances_1_launch_index, instances_1.key_name AS instances_1_key_name, instances_1.key_data AS instances_1_key_data, instances_1.power_state AS instances_1_power_state, instances_1.vm_state AS instances_1_vm_state, instances_1.task_state AS instances_1_task_state, instances_1.memory_mb AS instances_1_memory_mb, instances_1.vcpus AS instances_1_vcpus, instances_1.root_gb AS instances_1_root_gb, instances_1.ephemeral_gb AS instances_1_ephemeral_gb, instances_1.ephemeral_key_uuid AS instances_1_ephemeral_key_uuid, instances_1.host AS instances_1_host, instances_1.node AS instances_1_node, instances_1.instance_type_id AS instances_1_instance_type_id, instances_1.user_data AS instances_1_user_data, instances_1.reservation_id AS instances_1_reservation_id, instances_1.launched_at AS instances_1_launched_at, instances_1.terminated_at AS instances_1_terminated_at, instances_1.availability_zone AS instances_1_availability_zone, instances_1.display_name AS instances_1_display_name, instances_1.display_description AS instances_1_display_description, instances_1.launched_on AS instances_1_launched_on, instances_1.locked AS instances_1_locked, instances_1.locked_by AS instances_1_locked_by, instances_1.os_type AS instances_1_os_type, instances_1.architecture AS instances_1_architecture, instances_1.vm_mode AS instances_1_vm_mode, instances_1.uuid AS instances_1_uuid, instances_1.root_device_name AS instances_1_root_device_name, instances_1.default_ephemeral_device AS instances_1_default_ephemeral_device, instances_1.default_swap_device AS instances_1_default_swap_device, instances_1.config_drive AS instances_1_config_drive, instances_1.access_ip_v4 AS instances_1_access_ip_v4, instances_1.access_ip_v6 AS instances_1_access_ip_v6, instances_1.auto_disk_config AS instances_1_auto_disk_config, instances_1.progress AS instances_1_progress, instances_1.shutdown_terminate AS instances_1_shutdown_terminate, instances_1.disable_terminate AS instances_1_disable_terminate, instances_1.cell_name AS instances_1_cell_name, instances_1.internal_id AS instances_1_internal_id, instances_1.cleaned AS instances_1_cleaned, instance_system_metadata_1.created_at AS instance_system_metadata_1_created_at, instance_system_metadata_1.updated_at AS instance_system_metadata_1_updated_at, instance_system_metadata_1.deleted_at AS instance_system_metadata_1_deleted_at, instance_system_metadata_1.deleted AS instance_system_metadata_1_deleted, instance_system_metadata_1.id AS instance_system_metadata_1_id, instance_system_metadata_1.`key` AS instance_system_metadata_1_key, instance_system_metadata_1.value AS instance_system_metadata_1_value, instance_system_metadata_1.instance_uuid AS instance_system_metadata_1_instance_uuid \nFROM migrations LEFT OUTER JOIN instances AS instances_1 ON migrations.instance_uuid = instances_1.uuid AND instances_1.deleted = 0 LEFT OUTER JOIN instance_system_metadata AS instance_system_metadata_1 ON instances_1.uuid = instance_system_metadata_1.instance_uuid \nWHERE migrations.deleted = 0 AND (migrations.source_compute = 'axis-11' AND migrations.source_node = 'axis-11.yahoo.ca.com' OR migrations.dest_compute = 'axis-11' AND migrations.dest_node = 'axis-11.yahoo.ca.com') AND migrations.status NOT IN ('accepted', 'confirmed', 'reverted', 'error', 'failed', 'completed')",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "MIGRATIONS.INSTANCE_UUID",
        "INSTANCES.UUID"
      ],
      [
        "INSTANCES.UUID",
        "INSTANCE_SYSTEM_METADATA.INSTANCE_UUID"
      ]
    ]
  },
  {
    "question": "Provide information (including info caches, and security groups) for these VMs f5a08397-5aac-44b4-b359-f03ff6ce228a, e7c1acd1-6a47-4a08-8601-5022d4d50aa7, e8579caf-bb8c-4fa2-ba55-6d9a7cbc4d9e, 80822713-5422-43ec-8127-0513708ad73b, acdf87ab-5ddc-4dba-bca0-71dccef3200d, 3d471303-557b-4a65-a5bd-1ca14dc2e445, 02601559-9715-4538-9c93-11ba1134a8d5, 0b79659e-7fbf-45e8-b0d0-65fa8e7eba3f, fd598c1c-3015-4a21-a2a4-141b89929548, f4d4c3c7-b173-45c9-bd8c-5558fe16a2f9, 5e918753-4136-4621-8c64-a5060d4176c5, bb5deaeb-64ff-4422-8fc2-5c9a03fb22a2, befacc64-1165-4e69-aa4b-031e6fc27401, 2b4585b6-a893-4f04-9ba3-e3573f6b0cab, 9594fe52-ebf8-4a89-ab09-4010e77693f5, 829fa62e-31d6-477a-8d66-bb633f02399e, faade932-bb08-4e2c-830b-349238cf2c47, 40cf2ad8-959b-4ec6-afe5-3827206b4a5d, 7a138353-212e-4cb2-a0c8-61f300430395, 4306ca1c-b980-4fb6-a91b-47869b6338c7, 9e1ceb5e-527b-4d08-b44b-bfdc7b63cfa1.",
    "sql": "SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id \nFROM instances LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = instances.uuid LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = instances.uuid AND instances.deleted = 0 \nWHERE instances.uuid IN ('f5a08397-5aac-44b4-b359-f03ff6ce228a', 'e7c1acd1-6a47-4a08-8601-5022d4d50aa7', 'e8579caf-bb8c-4fa2-ba55-6d9a7cbc4d9e', '80822713-5422-43ec-8127-0513708ad73b', 'acdf87ab-5ddc-4dba-bca0-71dccef3200d', '3d471303-557b-4a65-a5bd-1ca14dc2e445', '02601559-9715-4538-9c93-11ba1134a8d5', '0b79659e-7fbf-45e8-b0d0-65fa8e7eba3f', 'fd598c1c-3015-4a21-a2a4-141b89929548', 'f4d4c3c7-b173-45c9-bd8c-5558fe16a2f9', '5e918753-4136-4621-8c64-a5060d4176c5', 'bb5deaeb-64ff-4422-8fc2-5c9a03fb22a2', 'befacc64-1165-4e69-aa4b-031e6fc27401', '2b4585b6-a893-4f04-9ba3-e3573f6b0cab', '9594fe52-ebf8-4a89-ab09-4010e77693f5', '829fa62e-31d6-477a-8d66-bb633f02399e', 'faade932-bb08-4e2c-830b-349238cf2c47', '40cf2ad8-959b-4ec6-afe5-3827206b4a5d', '7a138353-212e-4cb2-a0c8-61f300430395', '4306ca1c-b980-4fb6-a91b-47869b6338c7', '9e1ceb5e-527b-4d08-b44b-bfdc7b63cfa1') ORDER BY instances.created_at DESC, instances.id DESC",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCE_INFO_CACHES.INSTANCE_UUID",
        "INSTANCES.UUID"
      ]
    ]
  },
  {
    "question": "Provide information about the port with ip address 10.165.172.69/8 under network 0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d.",
    "sql": "SELECT ports.tenant_id AS ports_tenant_id, ports.id AS ports_id, ports.name AS ports_name, ports.network_id AS ports_network_id, ports.mac_address AS ports_mac_address, ports.admin_state_up AS ports_admin_state_up, ports.status AS ports_status, ports.device_id AS ports_device_id, ports.device_owner AS ports_device_owner, ports.dns_name AS ports_dns_name, ports.standard_attr_id AS ports_standard_attr_id, ipallocations_1.port_id AS ipallocations_1_port_id, ipallocations_1.ip_address AS ipallocations_1_ip_address, ipallocations_1.subnet_id AS ipallocations_1_subnet_id, ipallocations_1.network_id AS ipallocations_1_network_id, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, portsecuritybindings_1.port_id AS portsecuritybindings_1_port_id, portsecuritybindings_1.port_security_enabled AS portsecuritybindings_1_port_security_enabled, ml2_dvr_port_bindings_1.port_id AS ml2_dvr_port_bindings_1_port_id, ml2_dvr_port_bindings_1.host AS ml2_dvr_port_bindings_1_host, ml2_dvr_port_bindings_1.router_id AS ml2_dvr_port_bindings_1_router_id, ml2_dvr_port_bindings_1.vif_type AS ml2_dvr_port_bindings_1_vif_type, ml2_dvr_port_bindings_1.vif_details AS ml2_dvr_port_bindings_1_vif_details, ml2_dvr_port_bindings_1.vnic_type AS ml2_dvr_port_bindings_1_vnic_type, ml2_dvr_port_bindings_1.profile AS ml2_dvr_port_bindings_1_profile, ml2_dvr_port_bindings_1.status AS ml2_dvr_port_bindings_1_status, allowedaddresspairs_1.port_id AS allowedaddresspairs_1_port_id, allowedaddresspairs_1.mac_address AS allowedaddresspairs_1_mac_address, allowedaddresspairs_1.ip_address AS allowedaddresspairs_1_ip_address, qos_port_policy_bindings_1.policy_id AS qos_port_policy_bindings_1_policy_id, qos_port_policy_bindings_1.port_id AS qos_port_policy_bindings_1_port_id, securitygroupportbindings_1.port_id AS securitygroupportbindings_1_port_id, securitygroupportbindings_1.security_group_id AS securitygroupportbindings_1_security_group_id, ml2_port_bindings_1.port_id AS ml2_port_bindings_1_port_id, ml2_port_bindings_1.host AS ml2_port_bindings_1_host, ml2_port_bindings_1.vnic_type AS ml2_port_bindings_1_vnic_type, ml2_port_bindings_1.profile AS ml2_port_bindings_1_profile, ml2_port_bindings_1.vif_type AS ml2_port_bindings_1_vif_type, ml2_port_bindings_1.vif_details AS ml2_port_bindings_1_vif_details, extradhcpopts_1.id AS extradhcpopts_1_id, extradhcpopts_1.port_id AS extradhcpopts_1_port_id, extradhcpopts_1.opt_name AS extradhcpopts_1_opt_name, extradhcpopts_1.opt_value AS extradhcpopts_1_opt_value, extradhcpopts_1.ip_version AS extradhcpopts_1_ip_version, portdnses_1.port_id AS portdnses_1_port_id, portdnses_1.current_dns_name AS portdnses_1_current_dns_name, portdnses_1.current_dns_domain AS portdnses_1_current_dns_domain, portdnses_1.previous_dns_name AS portdnses_1_previous_dns_name, portdnses_1.previous_dns_domain AS portdnses_1_previous_dns_domain \nFROM ports LEFT OUTER JOIN ml2_port_bindings ON ports.id = ml2_port_bindings.port_id INNER JOIN ipallocations ON ports.id = ipallocations.port_id LEFT OUTER JOIN ipallocations AS ipallocations_1 ON ports.id = ipallocations_1.port_id LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = ports.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN portsecuritybindings AS portsecuritybindings_1 ON ports.id = portsecuritybindings_1.port_id LEFT OUTER JOIN ml2_dvr_port_bindings AS ml2_dvr_port_bindings_1 ON ports.id = ml2_dvr_port_bindings_1.port_id LEFT OUTER JOIN allowedaddresspairs AS allowedaddresspairs_1 ON ports.id = allowedaddresspairs_1.port_id LEFT OUTER JOIN qos_port_policy_bindings AS qos_port_policy_bindings_1 ON ports.id = qos_port_policy_bindings_1.port_id LEFT OUTER JOIN securitygroupportbindings AS securitygroupportbindings_1 ON ports.id = securitygroupportbindings_1.port_id LEFT OUTER JOIN ml2_port_bindings AS ml2_port_bindings_1 ON ports.id = ml2_port_bindings_1.port_id LEFT OUTER JOIN extradhcpopts AS extradhcpopts_1 ON ports.id = extradhcpopts_1.port_id LEFT OUTER JOIN portdnses AS portdnses_1 ON ports.id = portdnses_1.port_id \nWHERE ipallocations.ip_address IN ('10.165.172.69/8') AND ports.network_id IN ('0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d')",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "ML2_PORT_BINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "IPALLOCATIONS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTS.ID",
        "IPALLOCATIONS.PORT_ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "PORTS.STANDARD_ATTR_ID"
      ],
      [
        "TAGS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ],
      [
        "PORTS.ID",
        "PORTSECURITYBINDINGS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "ML2_DVR_PORT_BINDINGS.PORT_ID"
      ],
      [
        "ALLOWEDADDRESSPAIRS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTS.ID",
        "QOS_PORT_POLICY_BINDINGS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "SECURITYGROUPPORTBINDINGS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "ML2_PORT_BINDINGS.PORT_ID"
      ],
      [
        "EXTRADHCPOPTS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTS.ID",
        "PORTDNSES.PORT_ID"
      ]
    ]
  },
  {
    "question": "Provide information about migrations associated with VM that moves to or from the physical host ether-18.",
    "sql": "SELECT migrations.created_at AS migrations_created_at, migrations.updated_at AS migrations_updated_at, migrations.deleted_at AS migrations_deleted_at, migrations.deleted AS migrations_deleted, migrations.id AS migrations_id, migrations.source_compute AS migrations_source_compute, migrations.dest_compute AS migrations_dest_compute, migrations.source_node AS migrations_source_node, migrations.dest_node AS migrations_dest_node, migrations.dest_host AS migrations_dest_host, migrations.old_instance_type_id AS migrations_old_instance_type_id, migrations.new_instance_type_id AS migrations_new_instance_type_id, migrations.instance_uuid AS migrations_instance_uuid, migrations.status AS migrations_status, migrations.migration_type AS migrations_migration_type, migrations.hidden AS migrations_hidden, migrations.memory_total AS migrations_memory_total, migrations.memory_processed AS migrations_memory_processed, migrations.memory_remaining AS migrations_memory_remaining, migrations.disk_total AS migrations_disk_total, migrations.disk_processed AS migrations_disk_processed, migrations.disk_remaining AS migrations_disk_remaining, instances_1.created_at AS instances_1_created_at, instances_1.updated_at AS instances_1_updated_at, instances_1.deleted_at AS instances_1_deleted_at, instances_1.deleted AS instances_1_deleted, instances_1.id AS instances_1_id, instances_1.user_id AS instances_1_user_id, instances_1.project_id AS instances_1_project_id, instances_1.image_ref AS instances_1_image_ref, instances_1.kernel_id AS instances_1_kernel_id, instances_1.ramdisk_id AS instances_1_ramdisk_id, instances_1.hostname AS instances_1_hostname, instances_1.launch_index AS instances_1_launch_index, instances_1.key_name AS instances_1_key_name, instances_1.key_data AS instances_1_key_data, instances_1.power_state AS instances_1_power_state, instances_1.vm_state AS instances_1_vm_state, instances_1.task_state AS instances_1_task_state, instances_1.memory_mb AS instances_1_memory_mb, instances_1.vcpus AS instances_1_vcpus, instances_1.root_gb AS instances_1_root_gb, instances_1.ephemeral_gb AS instances_1_ephemeral_gb, instances_1.ephemeral_key_uuid AS instances_1_ephemeral_key_uuid, instances_1.host AS instances_1_host, instances_1.node AS instances_1_node, instances_1.instance_type_id AS instances_1_instance_type_id, instances_1.user_data AS instances_1_user_data, instances_1.reservation_id AS instances_1_reservation_id, instances_1.launched_at AS instances_1_launched_at, instances_1.terminated_at AS instances_1_terminated_at, instances_1.availability_zone AS instances_1_availability_zone, instances_1.display_name AS instances_1_display_name, instances_1.display_description AS instances_1_display_description, instances_1.launched_on AS instances_1_launched_on, instances_1.locked AS instances_1_locked, instances_1.locked_by AS instances_1_locked_by, instances_1.os_type AS instances_1_os_type, instances_1.architecture AS instances_1_architecture, instances_1.vm_mode AS instances_1_vm_mode, instances_1.uuid AS instances_1_uuid, instances_1.root_device_name AS instances_1_root_device_name, instances_1.default_ephemeral_device AS instances_1_default_ephemeral_device, instances_1.default_swap_device AS instances_1_default_swap_device, instances_1.config_drive AS instances_1_config_drive, instances_1.access_ip_v4 AS instances_1_access_ip_v4, instances_1.access_ip_v6 AS instances_1_access_ip_v6, instances_1.auto_disk_config AS instances_1_auto_disk_config, instances_1.progress AS instances_1_progress, instances_1.shutdown_terminate AS instances_1_shutdown_terminate, instances_1.disable_terminate AS instances_1_disable_terminate, instances_1.cell_name AS instances_1_cell_name, instances_1.internal_id AS instances_1_internal_id, instances_1.cleaned AS instances_1_cleaned, instance_system_metadata_1.created_at AS instance_system_metadata_1_created_at, instance_system_metadata_1.updated_at AS instance_system_metadata_1_updated_at, instance_system_metadata_1.deleted_at AS instance_system_metadata_1_deleted_at, instance_system_metadata_1.deleted AS instance_system_metadata_1_deleted, instance_system_metadata_1.id AS instance_system_metadata_1_id, instance_system_metadata_1.`key` AS instance_system_metadata_1_key, instance_system_metadata_1.value AS instance_system_metadata_1_value, instance_system_metadata_1.instance_uuid AS instance_system_metadata_1_instance_uuid \nFROM migrations LEFT OUTER JOIN instances AS instances_1 ON migrations.instance_uuid = instances_1.uuid AND instances_1.deleted = 0 LEFT OUTER JOIN instance_system_metadata AS instance_system_metadata_1 ON instances_1.uuid = instance_system_metadata_1.instance_uuid \nWHERE migrations.deleted = 0 AND (migrations.source_compute = 'ether-18' AND migrations.source_node = 'ether-18.yahoo.ca.com' OR migrations.dest_compute = 'ether-18' AND migrations.dest_node = 'ether-18.yahoo.ca.com') AND migrations.status NOT IN ('accepted', 'confirmed', 'reverted', 'error', 'failed', 'completed')",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCES.UUID",
        "MIGRATIONS.INSTANCE_UUID"
      ],
      [
        "INSTANCE_SYSTEM_METADATA.INSTANCE_UUID",
        "INSTANCES.UUID"
      ]
    ]
  },
  {
    "question": "Provide information about port with device id bb5deaeb-64ff-4422-8fc2-5c9a03fb22a2 owned by project 3be6c8b9f95842198466a9c673404768.",
    "sql": "SELECT ports.tenant_id AS ports_tenant_id, ports.id AS ports_id, ports.name AS ports_name, ports.network_id AS ports_network_id, ports.mac_address AS ports_mac_address, ports.admin_state_up AS ports_admin_state_up, ports.status AS ports_status, ports.device_id AS ports_device_id, ports.device_owner AS ports_device_owner, ports.dns_name AS ports_dns_name, ports.standard_attr_id AS ports_standard_attr_id, ipallocations_1.port_id AS ipallocations_1_port_id, ipallocations_1.ip_address AS ipallocations_1_ip_address, ipallocations_1.subnet_id AS ipallocations_1_subnet_id, ipallocations_1.network_id AS ipallocations_1_network_id, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, portsecuritybindings_1.port_id AS portsecuritybindings_1_port_id, portsecuritybindings_1.port_security_enabled AS portsecuritybindings_1_port_security_enabled, ml2_dvr_port_bindings_1.port_id AS ml2_dvr_port_bindings_1_port_id, ml2_dvr_port_bindings_1.host AS ml2_dvr_port_bindings_1_host, ml2_dvr_port_bindings_1.router_id AS ml2_dvr_port_bindings_1_router_id, ml2_dvr_port_bindings_1.vif_type AS ml2_dvr_port_bindings_1_vif_type, ml2_dvr_port_bindings_1.vif_details AS ml2_dvr_port_bindings_1_vif_details, ml2_dvr_port_bindings_1.vnic_type AS ml2_dvr_port_bindings_1_vnic_type, ml2_dvr_port_bindings_1.profile AS ml2_dvr_port_bindings_1_profile, ml2_dvr_port_bindings_1.status AS ml2_dvr_port_bindings_1_status, allowedaddresspairs_1.port_id AS allowedaddresspairs_1_port_id, allowedaddresspairs_1.mac_address AS allowedaddresspairs_1_mac_address, allowedaddresspairs_1.ip_address AS allowedaddresspairs_1_ip_address, qos_port_policy_bindings_1.policy_id AS qos_port_policy_bindings_1_policy_id, qos_port_policy_bindings_1.port_id AS qos_port_policy_bindings_1_port_id, securitygroupportbindings_1.port_id AS securitygroupportbindings_1_port_id, securitygroupportbindings_1.security_group_id AS securitygroupportbindings_1_security_group_id, ml2_port_bindings_1.port_id AS ml2_port_bindings_1_port_id, ml2_port_bindings_1.host AS ml2_port_bindings_1_host, ml2_port_bindings_1.vnic_type AS ml2_port_bindings_1_vnic_type, ml2_port_bindings_1.profile AS ml2_port_bindings_1_profile, ml2_port_bindings_1.vif_type AS ml2_port_bindings_1_vif_type, ml2_port_bindings_1.vif_details AS ml2_port_bindings_1_vif_details, extradhcpopts_1.id AS extradhcpopts_1_id, extradhcpopts_1.port_id AS extradhcpopts_1_port_id, extradhcpopts_1.opt_name AS extradhcpopts_1_opt_name, extradhcpopts_1.opt_value AS extradhcpopts_1_opt_value, extradhcpopts_1.ip_version AS extradhcpopts_1_ip_version, portdnses_1.port_id AS portdnses_1_port_id, portdnses_1.current_dns_name AS portdnses_1_current_dns_name, portdnses_1.current_dns_domain AS portdnses_1_current_dns_domain, portdnses_1.previous_dns_name AS portdnses_1_previous_dns_name, portdnses_1.previous_dns_domain AS portdnses_1_previous_dns_domain \nFROM ports LEFT OUTER JOIN ml2_port_bindings ON ports.id = ml2_port_bindings.port_id LEFT OUTER JOIN ipallocations AS ipallocations_1 ON ports.id = ipallocations_1.port_id LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = ports.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN portsecuritybindings AS portsecuritybindings_1 ON ports.id = portsecuritybindings_1.port_id LEFT OUTER JOIN ml2_dvr_port_bindings AS ml2_dvr_port_bindings_1 ON ports.id = ml2_dvr_port_bindings_1.port_id LEFT OUTER JOIN allowedaddresspairs AS allowedaddresspairs_1 ON ports.id = allowedaddresspairs_1.port_id LEFT OUTER JOIN qos_port_policy_bindings AS qos_port_policy_bindings_1 ON ports.id = qos_port_policy_bindings_1.port_id LEFT OUTER JOIN securitygroupportbindings AS securitygroupportbindings_1 ON ports.id = securitygroupportbindings_1.port_id LEFT OUTER JOIN ml2_port_bindings AS ml2_port_bindings_1 ON ports.id = ml2_port_bindings_1.port_id LEFT OUTER JOIN extradhcpopts AS extradhcpopts_1 ON ports.id = extradhcpopts_1.port_id LEFT OUTER JOIN portdnses AS portdnses_1 ON ports.id = portdnses_1.port_id \nWHERE ports.tenant_id IN ('3be6c8b9f95842198466a9c673404768') AND ports.device_id IN ('bb5deaeb-64ff-4422-8fc2-5c9a03fb22a2')",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "ML2_PORT_BINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTS.ID",
        "IPALLOCATIONS.PORT_ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "PORTS.STANDARD_ATTR_ID"
      ],
      [
        "TAGS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ],
      [
        "PORTS.ID",
        "PORTSECURITYBINDINGS.PORT_ID"
      ],
      [
        "ML2_DVR_PORT_BINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTS.ID",
        "ALLOWEDADDRESSPAIRS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "QOS_PORT_POLICY_BINDINGS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "SECURITYGROUPPORTBINDINGS.PORT_ID"
      ],
      [
        "ML2_PORT_BINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTS.ID",
        "EXTRADHCPOPTS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "PORTDNSES.PORT_ID"
      ]
    ]
  },
  {
    "question": "Provide information (including info caches, and security groups) for these VMs 81222ae9-547f-44e8-b988-353a28148392, 0c7dc298-e42a-4b4f-90a7-1980491e7911, 44b77ecc-e279-4ff9-9d8a-c03707037e97, 0f89310d-02ce-48c8-8eac-0a9ff8b9c9e6, aba5e5fe-efa5-4528-b79c-3e3f90848469, 836607c9-9d01-476a-9e4e-80d9e0d9c9aa, 0f3dc79c-c99f-4eea-8c82-492cfa1a6b0b, 5fe5a18c-53d7-4a13-a694-4df57fc3fa17, 01b82e1b-e8a4-47c0-b970-9bf3b9766d78, 4237e158-6f7c-4db2-9962-3efdfbc7b744, c7f1c00c-0dc2-4514-84a6-f5df3425e339, 6869e646-0794-4207-8c16-cd196b535713, 8661f517-cd5c-4562-875c-50c726560027, 428ddc01-e731-4648-9fe1-9fb6f0ba998a, a9970164-959b-485a-ba05-5c184e808af9, a37e21a5-ade5-4eb9-b557-c68d106b1fec, 0513b715-a66d-461b-adf6-15504608f3b6, 208125fc-e3de-4331-a1c2-67bde6cd3167, 23fec744-dd61-491b-8baa-4f2bea4d757e.",
    "sql": "SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id \nFROM instances LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = instances.uuid LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = instances.uuid AND instances.deleted = 0 \nWHERE instances.uuid IN ('81222ae9-547f-44e8-b988-353a28148392', '0c7dc298-e42a-4b4f-90a7-1980491e7911', '44b77ecc-e279-4ff9-9d8a-c03707037e97', '0f89310d-02ce-48c8-8eac-0a9ff8b9c9e6', 'aba5e5fe-efa5-4528-b79c-3e3f90848469', '836607c9-9d01-476a-9e4e-80d9e0d9c9aa', '0f3dc79c-c99f-4eea-8c82-492cfa1a6b0b', '5fe5a18c-53d7-4a13-a694-4df57fc3fa17', '01b82e1b-e8a4-47c0-b970-9bf3b9766d78', '4237e158-6f7c-4db2-9962-3efdfbc7b744', 'c7f1c00c-0dc2-4514-84a6-f5df3425e339', '6869e646-0794-4207-8c16-cd196b535713', '8661f517-cd5c-4562-875c-50c726560027', '428ddc01-e731-4648-9fe1-9fb6f0ba998a', 'a9970164-959b-485a-ba05-5c184e808af9', 'a37e21a5-ade5-4eb9-b557-c68d106b1fec', '0513b715-a66d-461b-adf6-15504608f3b6', '208125fc-e3de-4331-a1c2-67bde6cd3167', '23fec744-dd61-491b-8baa-4f2bea4d757e') ORDER BY instances.created_at DESC, instances.id DESC",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCES.UUID",
        "INSTANCE_INFO_CACHES.INSTANCE_UUID"
      ]
    ]
  },
  {
    "question": "Provide information (including info caches, security groups, system metadata, and extra data) about the instance with id 6c4faba5-2bba-4286-ad1e-33896559dfc5.",
    "sql": "SELECT anon_1.instances_created_at AS anon_1_instances_created_at, anon_1.instances_updated_at AS anon_1_instances_updated_at, anon_1.instances_deleted_at AS anon_1_instances_deleted_at, anon_1.instances_deleted AS anon_1_instances_deleted, anon_1.instances_id AS anon_1_instances_id, anon_1.instances_user_id AS anon_1_instances_user_id, anon_1.instances_project_id AS anon_1_instances_project_id, anon_1.instances_image_ref AS anon_1_instances_image_ref, anon_1.instances_kernel_id AS anon_1_instances_kernel_id, anon_1.instances_ramdisk_id AS anon_1_instances_ramdisk_id, anon_1.instances_hostname AS anon_1_instances_hostname, anon_1.instances_launch_index AS anon_1_instances_launch_index, anon_1.instances_key_name AS anon_1_instances_key_name, anon_1.instances_key_data AS anon_1_instances_key_data, anon_1.instances_power_state AS anon_1_instances_power_state, anon_1.instances_vm_state AS anon_1_instances_vm_state, anon_1.instances_task_state AS anon_1_instances_task_state, anon_1.instances_memory_mb AS anon_1_instances_memory_mb, anon_1.instances_vcpus AS anon_1_instances_vcpus, anon_1.instances_root_gb AS anon_1_instances_root_gb, anon_1.instances_ephemeral_gb AS anon_1_instances_ephemeral_gb, anon_1.instances_ephemeral_key_uuid AS anon_1_instances_ephemeral_key_uuid, anon_1.instances_host AS anon_1_instances_host, anon_1.instances_node AS anon_1_instances_node, anon_1.instances_instance_type_id AS anon_1_instances_instance_type_id, anon_1.instances_user_data AS anon_1_instances_user_data, anon_1.instances_reservation_id AS anon_1_instances_reservation_id, anon_1.instances_launched_at AS anon_1_instances_launched_at, anon_1.instances_terminated_at AS anon_1_instances_terminated_at, anon_1.instances_availability_zone AS anon_1_instances_availability_zone, anon_1.instances_display_name AS anon_1_instances_display_name, anon_1.instances_display_description AS anon_1_instances_display_description, anon_1.instances_launched_on AS anon_1_instances_launched_on, anon_1.instances_locked AS anon_1_instances_locked, anon_1.instances_locked_by AS anon_1_instances_locked_by, anon_1.instances_os_type AS anon_1_instances_os_type, anon_1.instances_architecture AS anon_1_instances_architecture, anon_1.instances_vm_mode AS anon_1_instances_vm_mode, anon_1.instances_uuid AS anon_1_instances_uuid, anon_1.instances_root_device_name AS anon_1_instances_root_device_name, anon_1.instances_default_ephemeral_device AS anon_1_instances_default_ephemeral_device, anon_1.instances_default_swap_device AS anon_1_instances_default_swap_device, anon_1.instances_config_drive AS anon_1_instances_config_drive, anon_1.instances_access_ip_v4 AS anon_1_instances_access_ip_v4, anon_1.instances_access_ip_v6 AS anon_1_instances_access_ip_v6, anon_1.instances_auto_disk_config AS anon_1_instances_auto_disk_config, anon_1.instances_progress AS anon_1_instances_progress, anon_1.instances_shutdown_terminate AS anon_1_instances_shutdown_terminate, anon_1.instances_disable_terminate AS anon_1_instances_disable_terminate, anon_1.instances_cell_name AS anon_1_instances_cell_name, anon_1.instances_internal_id AS anon_1_instances_internal_id, anon_1.instances_cleaned AS anon_1_instances_cleaned, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id, security_group_rules_1.created_at AS security_group_rules_1_created_at, security_group_rules_1.updated_at AS security_group_rules_1_updated_at, security_group_rules_1.deleted_at AS security_group_rules_1_deleted_at, security_group_rules_1.deleted AS security_group_rules_1_deleted, security_group_rules_1.id AS security_group_rules_1_id, security_group_rules_1.parent_group_id AS security_group_rules_1_parent_group_id, security_group_rules_1.protocol AS security_group_rules_1_protocol, security_group_rules_1.from_port AS security_group_rules_1_from_port, security_group_rules_1.to_port AS security_group_rules_1_to_port, security_group_rules_1.cidr AS security_group_rules_1_cidr, security_group_rules_1.group_id AS security_group_rules_1_group_id, instance_system_metadata_1.created_at AS instance_system_metadata_1_created_at, instance_system_metadata_1.updated_at AS instance_system_metadata_1_updated_at, instance_system_metadata_1.deleted_at AS instance_system_metadata_1_deleted_at, instance_system_metadata_1.deleted AS instance_system_metadata_1_deleted, instance_system_metadata_1.id AS instance_system_metadata_1_id, instance_system_metadata_1.`key` AS instance_system_metadata_1_key, instance_system_metadata_1.value AS instance_system_metadata_1_value, instance_system_metadata_1.instance_uuid AS instance_system_metadata_1_instance_uuid, instance_extra_1.flavor AS instance_extra_1_flavor, instance_extra_1.created_at AS instance_extra_1_created_at, instance_extra_1.updated_at AS instance_extra_1_updated_at, instance_extra_1.deleted_at AS instance_extra_1_deleted_at, instance_extra_1.deleted AS instance_extra_1_deleted, instance_extra_1.id AS instance_extra_1_id, instance_extra_1.instance_uuid AS instance_extra_1_instance_uuid \nFROM (SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned \nFROM instances \nWHERE instances.deleted = 0 AND instances.uuid = '6c4faba5-2bba-4286-ad1e-33896559dfc5' \n LIMIT 1) AS anon_1 LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = anon_1.instances_uuid LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = anon_1.instances_uuid AND anon_1.instances_deleted = 0 LEFT OUTER JOIN security_group_rules AS security_group_rules_1 ON security_group_rules_1.parent_group_id = security_groups_1.id AND security_group_rules_1.deleted = 0 LEFT OUTER JOIN instance_system_metadata AS instance_system_metadata_1 ON anon_1.instances_uuid = instance_system_metadata_1.instance_uuid LEFT OUTER JOIN instance_extra AS instance_extra_1 ON instance_extra_1.instance_uuid = anon_1.instances_uuid",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "SECURITY_GROUP_RULES.PARENT_GROUP_ID",
        "SECURITY_GROUPS.ID"
      ]
    ]
  },
  {
    "question": "Provide information about network with id 0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d.",
    "sql": "SELECT networks.tenant_id AS networks_tenant_id, networks.id AS networks_id, networks.name AS networks_name, networks.status AS networks_status, networks.admin_state_up AS networks_admin_state_up, networks.mtu AS networks_mtu, networks.vlan_transparent AS networks_vlan_transparent, networks.availability_zone_hints AS networks_availability_zone_hints, networks.standard_attr_id AS networks_standard_attr_id, agents_1.id AS agents_1_id, agents_1.agent_type AS agents_1_agent_type, agents_1.`binary` AS agents_1_binary, agents_1.topic AS agents_1_topic, agents_1.host AS agents_1_host, agents_1.availability_zone AS agents_1_availability_zone, agents_1.admin_state_up AS agents_1_admin_state_up, agents_1.created_at AS agents_1_created_at, agents_1.started_at AS agents_1_started_at, agents_1.heartbeat_timestamp AS agents_1_heartbeat_timestamp, agents_1.description AS agents_1_description, agents_1.configurations AS agents_1_configurations, agents_1.resource_versions AS agents_1_resource_versions, agents_1.`load` AS agents_1_load, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, externalnetworks_1.network_id AS externalnetworks_1_network_id, externalnetworks_1.is_default AS externalnetworks_1_is_default, qos_network_policy_bindings_1.policy_id AS qos_network_policy_bindings_1_policy_id, qos_network_policy_bindings_1.network_id AS qos_network_policy_bindings_1_network_id, networksecuritybindings_1.network_id AS networksecuritybindings_1_network_id, networksecuritybindings_1.port_security_enabled AS networksecuritybindings_1_port_security_enabled, networkdnsdomains_1.network_id AS networkdnsdomains_1_network_id, networkdnsdomains_1.dns_domain AS networkdnsdomains_1_dns_domain \nFROM networks LEFT OUTER JOIN externalnetworks ON networks.id = externalnetworks.network_id LEFT OUTER JOIN (networkdhcpagentbindings AS networkdhcpagentbindings_1 INNER JOIN agents AS agents_1 ON agents_1.id = networkdhcpagentbindings_1.dhcp_agent_id) ON networks.id = networkdhcpagentbindings_1.network_id LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = networks.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN externalnetworks AS externalnetworks_1 ON networks.id = externalnetworks_1.network_id LEFT OUTER JOIN qos_network_policy_bindings AS qos_network_policy_bindings_1 ON networks.id = qos_network_policy_bindings_1.network_id LEFT OUTER JOIN networksecuritybindings AS networksecuritybindings_1 ON networks.id = networksecuritybindings_1.network_id LEFT OUTER JOIN networkdnsdomains AS networkdnsdomains_1 ON networks.id = networkdnsdomains_1.network_id \nWHERE networks.id IN ('0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d')",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "NETWORKS.ID",
        "EXTERNALNETWORKS.NETWORK_ID"
      ],
      [
        "NETWORKS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ],
      [
        "TAGS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ],
      [
        "EXTERNALNETWORKS.NETWORK_ID",
        "NETWORKS.ID"
      ],
      [
        "QOS_NETWORK_POLICY_BINDINGS.NETWORK_ID",
        "NETWORKS.ID"
      ],
      [
        "NETWORKSECURITYBINDINGS.NETWORK_ID",
        "NETWORKS.ID"
      ],
      [
        "NETWORKDNSDOMAINS.NETWORK_ID",
        "NETWORKS.ID"
      ]
    ]
  },
  {
    "question": "Provide information about migrations associated with VM that moves to or from the physical host flux2-19.",
    "sql": "SELECT migrations.created_at AS migrations_created_at, migrations.updated_at AS migrations_updated_at, migrations.deleted_at AS migrations_deleted_at, migrations.deleted AS migrations_deleted, migrations.id AS migrations_id, migrations.source_compute AS migrations_source_compute, migrations.dest_compute AS migrations_dest_compute, migrations.source_node AS migrations_source_node, migrations.dest_node AS migrations_dest_node, migrations.dest_host AS migrations_dest_host, migrations.old_instance_type_id AS migrations_old_instance_type_id, migrations.new_instance_type_id AS migrations_new_instance_type_id, migrations.instance_uuid AS migrations_instance_uuid, migrations.status AS migrations_status, migrations.migration_type AS migrations_migration_type, migrations.hidden AS migrations_hidden, migrations.memory_total AS migrations_memory_total, migrations.memory_processed AS migrations_memory_processed, migrations.memory_remaining AS migrations_memory_remaining, migrations.disk_total AS migrations_disk_total, migrations.disk_processed AS migrations_disk_processed, migrations.disk_remaining AS migrations_disk_remaining, instances_1.created_at AS instances_1_created_at, instances_1.updated_at AS instances_1_updated_at, instances_1.deleted_at AS instances_1_deleted_at, instances_1.deleted AS instances_1_deleted, instances_1.id AS instances_1_id, instances_1.user_id AS instances_1_user_id, instances_1.project_id AS instances_1_project_id, instances_1.image_ref AS instances_1_image_ref, instances_1.kernel_id AS instances_1_kernel_id, instances_1.ramdisk_id AS instances_1_ramdisk_id, instances_1.hostname AS instances_1_hostname, instances_1.launch_index AS instances_1_launch_index, instances_1.key_name AS instances_1_key_name, instances_1.key_data AS instances_1_key_data, instances_1.power_state AS instances_1_power_state, instances_1.vm_state AS instances_1_vm_state, instances_1.task_state AS instances_1_task_state, instances_1.memory_mb AS instances_1_memory_mb, instances_1.vcpus AS instances_1_vcpus, instances_1.root_gb AS instances_1_root_gb, instances_1.ephemeral_gb AS instances_1_ephemeral_gb, instances_1.ephemeral_key_uuid AS instances_1_ephemeral_key_uuid, instances_1.host AS instances_1_host, instances_1.node AS instances_1_node, instances_1.instance_type_id AS instances_1_instance_type_id, instances_1.user_data AS instances_1_user_data, instances_1.reservation_id AS instances_1_reservation_id, instances_1.launched_at AS instances_1_launched_at, instances_1.terminated_at AS instances_1_terminated_at, instances_1.availability_zone AS instances_1_availability_zone, instances_1.display_name AS instances_1_display_name, instances_1.display_description AS instances_1_display_description, instances_1.launched_on AS instances_1_launched_on, instances_1.locked AS instances_1_locked, instances_1.locked_by AS instances_1_locked_by, instances_1.os_type AS instances_1_os_type, instances_1.architecture AS instances_1_architecture, instances_1.vm_mode AS instances_1_vm_mode, instances_1.uuid AS instances_1_uuid, instances_1.root_device_name AS instances_1_root_device_name, instances_1.default_ephemeral_device AS instances_1_default_ephemeral_device, instances_1.default_swap_device AS instances_1_default_swap_device, instances_1.config_drive AS instances_1_config_drive, instances_1.access_ip_v4 AS instances_1_access_ip_v4, instances_1.access_ip_v6 AS instances_1_access_ip_v6, instances_1.auto_disk_config AS instances_1_auto_disk_config, instances_1.progress AS instances_1_progress, instances_1.shutdown_terminate AS instances_1_shutdown_terminate, instances_1.disable_terminate AS instances_1_disable_terminate, instances_1.cell_name AS instances_1_cell_name, instances_1.internal_id AS instances_1_internal_id, instances_1.cleaned AS instances_1_cleaned, instance_system_metadata_1.created_at AS instance_system_metadata_1_created_at, instance_system_metadata_1.updated_at AS instance_system_metadata_1_updated_at, instance_system_metadata_1.deleted_at AS instance_system_metadata_1_deleted_at, instance_system_metadata_1.deleted AS instance_system_metadata_1_deleted, instance_system_metadata_1.id AS instance_system_metadata_1_id, instance_system_metadata_1.`key` AS instance_system_metadata_1_key, instance_system_metadata_1.value AS instance_system_metadata_1_value, instance_system_metadata_1.instance_uuid AS instance_system_metadata_1_instance_uuid \nFROM migrations LEFT OUTER JOIN instances AS instances_1 ON migrations.instance_uuid = instances_1.uuid AND instances_1.deleted = 0 LEFT OUTER JOIN instance_system_metadata AS instance_system_metadata_1 ON instances_1.uuid = instance_system_metadata_1.instance_uuid \nWHERE migrations.deleted = 0 AND (migrations.source_compute = 'flux2-19' AND migrations.source_node = 'flux2-19.yahoo.ca.com' OR migrations.dest_compute = 'flux2-19' AND migrations.dest_node = 'flux2-19.yahoo.ca.com') AND migrations.status NOT IN ('accepted', 'confirmed', 'reverted', 'error', 'failed', 'completed')",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCES.UUID",
        "MIGRATIONS.INSTANCE_UUID"
      ],
      [
        "INSTANCES.UUID",
        "INSTANCE_SYSTEM_METADATA.INSTANCE_UUID"
      ]
    ]
  },
  {
    "question": "Provide information about subnet access control for publicly available subnets owned by tenant 9f13bf11e06e4d81b44c8c3e62d4362b.",
    "sql": "SELECT networkrbacs.tenant_id AS networkrbacs_tenant_id, networkrbacs.id AS networkrbacs_id, networkrbacs.target_tenant AS networkrbacs_target_tenant, networkrbacs.action AS networkrbacs_action, networkrbacs.object_id AS networkrbacs_object_id, subnets_1.network_id AS subnets_1_network_id \nFROM (SELECT networks.id AS networks_id \nFROM networks LEFT OUTER JOIN externalnetworks ON networks.id = externalnetworks.network_id LEFT OUTER JOIN networkrbacs ON networks.id = networkrbacs.object_id \nWHERE networkrbacs.action = 'access_as_shared' AND (networkrbacs.target_tenant = '*' OR networkrbacs.target_tenant = '9f13bf11e06e4d81b44c8c3e62d4362b')) AS anon_1 INNER JOIN subnets AS subnets_1 ON anon_1.networks_id = subnets_1.network_id INNER JOIN networkrbacs ON subnets_1.network_id = networkrbacs.object_id ORDER BY subnets_1.network_id",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "EXTERNALNETWORKS.NETWORK_ID",
        "NETWORKS.ID"
      ],
      [
        "NETWORKRBACS.OBJECT_ID",
        "NETWORKS.ID"
      ],
      [
        "NETWORKRBACS.OBJECT_ID",
        "SUBNETS.NETWORK_ID"
      ]
    ]
  },
  {
    "question": "Provide information (including info caches, and security groups) about the instance with id 85aafec6-1b2e-423a-b834-d4a526068dec.",
    "sql": "SELECT anon_1.instances_created_at AS anon_1_instances_created_at, anon_1.instances_updated_at AS anon_1_instances_updated_at, anon_1.instances_deleted_at AS anon_1_instances_deleted_at, anon_1.instances_deleted AS anon_1_instances_deleted, anon_1.instances_id AS anon_1_instances_id, anon_1.instances_user_id AS anon_1_instances_user_id, anon_1.instances_project_id AS anon_1_instances_project_id, anon_1.instances_image_ref AS anon_1_instances_image_ref, anon_1.instances_kernel_id AS anon_1_instances_kernel_id, anon_1.instances_ramdisk_id AS anon_1_instances_ramdisk_id, anon_1.instances_hostname AS anon_1_instances_hostname, anon_1.instances_launch_index AS anon_1_instances_launch_index, anon_1.instances_key_name AS anon_1_instances_key_name, anon_1.instances_key_data AS anon_1_instances_key_data, anon_1.instances_power_state AS anon_1_instances_power_state, anon_1.instances_vm_state AS anon_1_instances_vm_state, anon_1.instances_task_state AS anon_1_instances_task_state, anon_1.instances_memory_mb AS anon_1_instances_memory_mb, anon_1.instances_vcpus AS anon_1_instances_vcpus, anon_1.instances_root_gb AS anon_1_instances_root_gb, anon_1.instances_ephemeral_gb AS anon_1_instances_ephemeral_gb, anon_1.instances_ephemeral_key_uuid AS anon_1_instances_ephemeral_key_uuid, anon_1.instances_host AS anon_1_instances_host, anon_1.instances_node AS anon_1_instances_node, anon_1.instances_instance_type_id AS anon_1_instances_instance_type_id, anon_1.instances_user_data AS anon_1_instances_user_data, anon_1.instances_reservation_id AS anon_1_instances_reservation_id, anon_1.instances_launched_at AS anon_1_instances_launched_at, anon_1.instances_terminated_at AS anon_1_instances_terminated_at, anon_1.instances_availability_zone AS anon_1_instances_availability_zone, anon_1.instances_display_name AS anon_1_instances_display_name, anon_1.instances_display_description AS anon_1_instances_display_description, anon_1.instances_launched_on AS anon_1_instances_launched_on, anon_1.instances_locked AS anon_1_instances_locked, anon_1.instances_locked_by AS anon_1_instances_locked_by, anon_1.instances_os_type AS anon_1_instances_os_type, anon_1.instances_architecture AS anon_1_instances_architecture, anon_1.instances_vm_mode AS anon_1_instances_vm_mode, anon_1.instances_uuid AS anon_1_instances_uuid, anon_1.instances_root_device_name AS anon_1_instances_root_device_name, anon_1.instances_default_ephemeral_device AS anon_1_instances_default_ephemeral_device, anon_1.instances_default_swap_device AS anon_1_instances_default_swap_device, anon_1.instances_config_drive AS anon_1_instances_config_drive, anon_1.instances_access_ip_v4 AS anon_1_instances_access_ip_v4, anon_1.instances_access_ip_v6 AS anon_1_instances_access_ip_v6, anon_1.instances_auto_disk_config AS anon_1_instances_auto_disk_config, anon_1.instances_progress AS anon_1_instances_progress, anon_1.instances_shutdown_terminate AS anon_1_instances_shutdown_terminate, anon_1.instances_disable_terminate AS anon_1_instances_disable_terminate, anon_1.instances_cell_name AS anon_1_instances_cell_name, anon_1.instances_internal_id AS anon_1_instances_internal_id, anon_1.instances_cleaned AS anon_1_instances_cleaned, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id, security_group_rules_1.created_at AS security_group_rules_1_created_at, security_group_rules_1.updated_at AS security_group_rules_1_updated_at, security_group_rules_1.deleted_at AS security_group_rules_1_deleted_at, security_group_rules_1.deleted AS security_group_rules_1_deleted, security_group_rules_1.id AS security_group_rules_1_id, security_group_rules_1.parent_group_id AS security_group_rules_1_parent_group_id, security_group_rules_1.protocol AS security_group_rules_1_protocol, security_group_rules_1.from_port AS security_group_rules_1_from_port, security_group_rules_1.to_port AS security_group_rules_1_to_port, security_group_rules_1.cidr AS security_group_rules_1_cidr, security_group_rules_1.group_id AS security_group_rules_1_group_id \nFROM (SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned \nFROM instances \nWHERE instances.deleted = 0 AND instances.uuid = '85aafec6-1b2e-423a-b834-d4a526068dec' \n LIMIT 1) AS anon_1 LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = anon_1.instances_uuid LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = anon_1.instances_uuid AND anon_1.instances_deleted = 0 LEFT OUTER JOIN security_group_rules AS security_group_rules_1 ON security_group_rules_1.parent_group_id = security_groups_1.id AND security_group_rules_1.deleted = 0",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "SECURITY_GROUP_RULES.PARENT_GROUP_ID",
        "SECURITY_GROUPS.ID"
      ]
    ]
  },
  {
    "question": "Provide information about port with device id 889a69b3-b9bc-4c0e-8e07-b9a19251b507 owned by project e3fb2659584e436a832461dac02835f0.",
    "sql": "SELECT ports.tenant_id AS ports_tenant_id, ports.id AS ports_id, ports.name AS ports_name, ports.network_id AS ports_network_id, ports.mac_address AS ports_mac_address, ports.admin_state_up AS ports_admin_state_up, ports.status AS ports_status, ports.device_id AS ports_device_id, ports.device_owner AS ports_device_owner, ports.dns_name AS ports_dns_name, ports.standard_attr_id AS ports_standard_attr_id, ipallocations_1.port_id AS ipallocations_1_port_id, ipallocations_1.ip_address AS ipallocations_1_ip_address, ipallocations_1.subnet_id AS ipallocations_1_subnet_id, ipallocations_1.network_id AS ipallocations_1_network_id, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, portsecuritybindings_1.port_id AS portsecuritybindings_1_port_id, portsecuritybindings_1.port_security_enabled AS portsecuritybindings_1_port_security_enabled, ml2_dvr_port_bindings_1.port_id AS ml2_dvr_port_bindings_1_port_id, ml2_dvr_port_bindings_1.host AS ml2_dvr_port_bindings_1_host, ml2_dvr_port_bindings_1.router_id AS ml2_dvr_port_bindings_1_router_id, ml2_dvr_port_bindings_1.vif_type AS ml2_dvr_port_bindings_1_vif_type, ml2_dvr_port_bindings_1.vif_details AS ml2_dvr_port_bindings_1_vif_details, ml2_dvr_port_bindings_1.vnic_type AS ml2_dvr_port_bindings_1_vnic_type, ml2_dvr_port_bindings_1.profile AS ml2_dvr_port_bindings_1_profile, ml2_dvr_port_bindings_1.status AS ml2_dvr_port_bindings_1_status, allowedaddresspairs_1.port_id AS allowedaddresspairs_1_port_id, allowedaddresspairs_1.mac_address AS allowedaddresspairs_1_mac_address, allowedaddresspairs_1.ip_address AS allowedaddresspairs_1_ip_address, qos_port_policy_bindings_1.policy_id AS qos_port_policy_bindings_1_policy_id, qos_port_policy_bindings_1.port_id AS qos_port_policy_bindings_1_port_id, securitygroupportbindings_1.port_id AS securitygroupportbindings_1_port_id, securitygroupportbindings_1.security_group_id AS securitygroupportbindings_1_security_group_id, ml2_port_bindings_1.port_id AS ml2_port_bindings_1_port_id, ml2_port_bindings_1.host AS ml2_port_bindings_1_host, ml2_port_bindings_1.vnic_type AS ml2_port_bindings_1_vnic_type, ml2_port_bindings_1.profile AS ml2_port_bindings_1_profile, ml2_port_bindings_1.vif_type AS ml2_port_bindings_1_vif_type, ml2_port_bindings_1.vif_details AS ml2_port_bindings_1_vif_details, extradhcpopts_1.id AS extradhcpopts_1_id, extradhcpopts_1.port_id AS extradhcpopts_1_port_id, extradhcpopts_1.opt_name AS extradhcpopts_1_opt_name, extradhcpopts_1.opt_value AS extradhcpopts_1_opt_value, extradhcpopts_1.ip_version AS extradhcpopts_1_ip_version, portdnses_1.port_id AS portdnses_1_port_id, portdnses_1.current_dns_name AS portdnses_1_current_dns_name, portdnses_1.current_dns_domain AS portdnses_1_current_dns_domain, portdnses_1.previous_dns_name AS portdnses_1_previous_dns_name, portdnses_1.previous_dns_domain AS portdnses_1_previous_dns_domain \nFROM ports LEFT OUTER JOIN ml2_port_bindings ON ports.id = ml2_port_bindings.port_id LEFT OUTER JOIN ipallocations AS ipallocations_1 ON ports.id = ipallocations_1.port_id LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = ports.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN portsecuritybindings AS portsecuritybindings_1 ON ports.id = portsecuritybindings_1.port_id LEFT OUTER JOIN ml2_dvr_port_bindings AS ml2_dvr_port_bindings_1 ON ports.id = ml2_dvr_port_bindings_1.port_id LEFT OUTER JOIN allowedaddresspairs AS allowedaddresspairs_1 ON ports.id = allowedaddresspairs_1.port_id LEFT OUTER JOIN qos_port_policy_bindings AS qos_port_policy_bindings_1 ON ports.id = qos_port_policy_bindings_1.port_id LEFT OUTER JOIN securitygroupportbindings AS securitygroupportbindings_1 ON ports.id = securitygroupportbindings_1.port_id LEFT OUTER JOIN ml2_port_bindings AS ml2_port_bindings_1 ON ports.id = ml2_port_bindings_1.port_id LEFT OUTER JOIN extradhcpopts AS extradhcpopts_1 ON ports.id = extradhcpopts_1.port_id LEFT OUTER JOIN portdnses AS portdnses_1 ON ports.id = portdnses_1.port_id \nWHERE ports.tenant_id IN ('e3fb2659584e436a832461dac02835f0') AND ports.device_id IN ('889a69b3-b9bc-4c0e-8e07-b9a19251b507')",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "ML2_PORT_BINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "IPALLOCATIONS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "PORTS.STANDARD_ATTR_ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "TAGS.STANDARD_ATTR_ID"
      ],
      [
        "PORTS.ID",
        "PORTSECURITYBINDINGS.PORT_ID"
      ],
      [
        "ML2_DVR_PORT_BINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTS.ID",
        "ALLOWEDADDRESSPAIRS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "QOS_PORT_POLICY_BINDINGS.PORT_ID"
      ],
      [
        "PORTS.ID",
        "SECURITYGROUPPORTBINDINGS.PORT_ID"
      ],
      [
        "ML2_PORT_BINDINGS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "EXTRADHCPOPTS.PORT_ID",
        "PORTS.ID"
      ],
      [
        "PORTDNSES.PORT_ID",
        "PORTS.ID"
      ]
    ]
  },
  {
    "question": "Provide information (including extra data) about VMs assigned to the physical host flux2-19.",
    "sql": "SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned, instance_extra_1.numa_topology AS instance_extra_1_numa_topology, instance_extra_1.flavor AS instance_extra_1_flavor, instance_extra_1.migration_context AS instance_extra_1_migration_context, instance_extra_1.created_at AS instance_extra_1_created_at, instance_extra_1.updated_at AS instance_extra_1_updated_at, instance_extra_1.deleted_at AS instance_extra_1_deleted_at, instance_extra_1.deleted AS instance_extra_1_deleted, instance_extra_1.id AS instance_extra_1_id, instance_extra_1.instance_uuid AS instance_extra_1_instance_uuid \nFROM instances LEFT OUTER JOIN instance_extra AS instance_extra_1 ON instance_extra_1.instance_uuid = instances.uuid \nWHERE instances.deleted = 0 AND instances.host = 'flux2-19' AND instances.node = 'flux2-19.yahoo.ca.com'",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "INSTANCE_EXTRA.INSTANCE_UUID",
        "INSTANCES.UUID"
      ]
    ]
  },
  {
    "question": "Provide information about federated user with name prime_helix.306sonic.",
    "sql": "SELECT federated_user.id AS federated_user_id, federated_user.user_id AS federated_user_user_id, federated_user.idp_id AS federated_user_idp_id, federated_user.protocol_id AS federated_user_protocol_id, federated_user.unique_id AS federated_user_unique_id, federated_user.display_name AS federated_user_display_name, anon_1.user_id AS anon_1_user_id\nFROM (SELECT user.id AS user_id\nFROM user INNER JOIN local_user ON user.id = local_user.user_id\nWHERE local_user.name = 'prime_helix.306sonic' AND local_user.domain_id = 'default') AS anon_1 INNER JOIN federated_user ON anon_1.user_id = federated_user.user_id ORDER BY anon_1.user_id",
    "db_id": "keystone",
    "join_keys": [
      [
        "USER.ID",
        "LOCAL_USER.USER_ID"
      ]
    ]
  },
  {
    "question": "Provide id information about the local user with ID ccbbd0bdf0104ea68a37483b13b14be2.",
    "sql": "SELECT local_user.id AS local_user_id, local_user.user_id AS local_user_user_id, local_user.domain_id AS local_user_domain_id, local_user.name AS local_user_name, anon_1.user_id AS anon_1_user_id\nFROM (SELECT user.id AS user_id\nFROM user\nWHERE user.id = 'ccbbd0bdf0104ea68a37483b13b14be2') AS anon_1 INNER JOIN local_user ON anon_1.user_id = local_user.user_id ORDER BY anon_1.user_id",
    "db_id": "keystone",
    "join_keys": []
  },
  {
    "question": "Provide information (including security groups, system metadata, extra data, metadata, and info caches) about instance with id 8d3a0be4-dd7b-4f5b-b19f-308e92597462.",
    "sql": "SELECT anon_1.instances_created_at AS anon_1_instances_created_at, anon_1.instances_updated_at AS anon_1_instances_updated_at, anon_1.instances_deleted_at AS anon_1_instances_deleted_at, anon_1.instances_deleted AS anon_1_instances_deleted, anon_1.instances_id AS anon_1_instances_id, anon_1.instances_user_id AS anon_1_instances_user_id, anon_1.instances_project_id AS anon_1_instances_project_id, anon_1.instances_image_ref AS anon_1_instances_image_ref, anon_1.instances_kernel_id AS anon_1_instances_kernel_id, anon_1.instances_ramdisk_id AS anon_1_instances_ramdisk_id, anon_1.instances_hostname AS anon_1_instances_hostname, anon_1.instances_launch_index AS anon_1_instances_launch_index, anon_1.instances_key_name AS anon_1_instances_key_name, anon_1.instances_key_data AS anon_1_instances_key_data, anon_1.instances_power_state AS anon_1_instances_power_state, anon_1.instances_vm_state AS anon_1_instances_vm_state, anon_1.instances_task_state AS anon_1_instances_task_state, anon_1.instances_memory_mb AS anon_1_instances_memory_mb, anon_1.instances_vcpus AS anon_1_instances_vcpus, anon_1.instances_root_gb AS anon_1_instances_root_gb, anon_1.instances_ephemeral_gb AS anon_1_instances_ephemeral_gb, anon_1.instances_ephemeral_key_uuid AS anon_1_instances_ephemeral_key_uuid, anon_1.instances_host AS anon_1_instances_host, anon_1.instances_node AS anon_1_instances_node, anon_1.instances_instance_type_id AS anon_1_instances_instance_type_id, anon_1.instances_user_data AS anon_1_instances_user_data, anon_1.instances_reservation_id AS anon_1_instances_reservation_id, anon_1.instances_launched_at AS anon_1_instances_launched_at, anon_1.instances_terminated_at AS anon_1_instances_terminated_at, anon_1.instances_availability_zone AS anon_1_instances_availability_zone, anon_1.instances_display_name AS anon_1_instances_display_name, anon_1.instances_display_description AS anon_1_instances_display_description, anon_1.instances_launched_on AS anon_1_instances_launched_on, anon_1.instances_locked AS anon_1_instances_locked, anon_1.instances_locked_by AS anon_1_instances_locked_by, anon_1.instances_os_type AS anon_1_instances_os_type, anon_1.instances_architecture AS anon_1_instances_architecture, anon_1.instances_vm_mode AS anon_1_instances_vm_mode, anon_1.instances_uuid AS anon_1_instances_uuid, anon_1.instances_root_device_name AS anon_1_instances_root_device_name, anon_1.instances_default_ephemeral_device AS anon_1_instances_default_ephemeral_device, anon_1.instances_default_swap_device AS anon_1_instances_default_swap_device, anon_1.instances_config_drive AS anon_1_instances_config_drive, anon_1.instances_access_ip_v4 AS anon_1_instances_access_ip_v4, anon_1.instances_access_ip_v6 AS anon_1_instances_access_ip_v6, anon_1.instances_auto_disk_config AS anon_1_instances_auto_disk_config, anon_1.instances_progress AS anon_1_instances_progress, anon_1.instances_shutdown_terminate AS anon_1_instances_shutdown_terminate, anon_1.instances_disable_terminate AS anon_1_instances_disable_terminate, anon_1.instances_cell_name AS anon_1_instances_cell_name, anon_1.instances_internal_id AS anon_1_instances_internal_id, anon_1.instances_cleaned AS anon_1_instances_cleaned, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id, security_group_rules_1.created_at AS security_group_rules_1_created_at, security_group_rules_1.updated_at AS security_group_rules_1_updated_at, security_group_rules_1.deleted_at AS security_group_rules_1_deleted_at, security_group_rules_1.deleted AS security_group_rules_1_deleted, security_group_rules_1.id AS security_group_rules_1_id, security_group_rules_1.parent_group_id AS security_group_rules_1_parent_group_id, security_group_rules_1.protocol AS security_group_rules_1_protocol, security_group_rules_1.from_port AS security_group_rules_1_from_port, security_group_rules_1.to_port AS security_group_rules_1_to_port, security_group_rules_1.cidr AS security_group_rules_1_cidr, security_group_rules_1.group_id AS security_group_rules_1_group_id, instance_system_metadata_1.created_at AS instance_system_metadata_1_created_at, instance_system_metadata_1.updated_at AS instance_system_metadata_1_updated_at, instance_system_metadata_1.deleted_at AS instance_system_metadata_1_deleted_at, instance_system_metadata_1.deleted AS instance_system_metadata_1_deleted, instance_system_metadata_1.id AS instance_system_metadata_1_id, instance_system_metadata_1.`key` AS instance_system_metadata_1_key, instance_system_metadata_1.value AS instance_system_metadata_1_value, instance_system_metadata_1.instance_uuid AS instance_system_metadata_1_instance_uuid, instance_extra_1.flavor AS instance_extra_1_flavor, instance_extra_1.created_at AS instance_extra_1_created_at, instance_extra_1.updated_at AS instance_extra_1_updated_at, instance_extra_1.deleted_at AS instance_extra_1_deleted_at, instance_extra_1.deleted AS instance_extra_1_deleted, instance_extra_1.id AS instance_extra_1_id, instance_extra_1.instance_uuid AS instance_extra_1_instance_uuid, instance_metadata_1.created_at AS instance_metadata_1_created_at, instance_metadata_1.updated_at AS instance_metadata_1_updated_at, instance_metadata_1.deleted_at AS instance_metadata_1_deleted_at, instance_metadata_1.deleted AS instance_metadata_1_deleted, instance_metadata_1.id AS instance_metadata_1_id, instance_metadata_1.`key` AS instance_metadata_1_key, instance_metadata_1.value AS instance_metadata_1_value, instance_metadata_1.instance_uuid AS instance_metadata_1_instance_uuid, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid FROM (SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned FROM instances WHERE instances.deleted = 0 AND instances.uuid = '8d3a0be4-dd7b-4f5b-b19f-308e92597462' LIMIT 1) AS anon_1 LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = anon_1.instances_uuid AND anon_1.instances_deleted = 0 LEFT OUTER JOIN security_group_rules AS security_group_rules_1 ON security_group_rules_1.parent_group_id = security_groups_1.id AND security_group_rules_1.deleted = 0 LEFT OUTER JOIN instance_system_metadata AS instance_system_metadata_1 ON anon_1.instances_uuid = instance_system_metadata_1.instance_uuid LEFT OUTER JOIN instance_extra AS instance_extra_1 ON instance_extra_1.instance_uuid = anon_1.instances_uuid LEFT OUTER JOIN instance_metadata AS instance_metadata_1 ON instance_metadata_1.instance_uuid = anon_1.instances_uuid AND instance_metadata_1.deleted = 0 LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = anon_1.instances_uuid",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "SECURITY_GROUPS.ID",
        "SECURITY_GROUP_RULES.PARENT_GROUP_ID"
      ]
    ]
  },
  {
    "question": "Provide information about network access control for networks under tenants 9f13bf11e06e4d81b44c8c3e62d4362b.",
    "sql": "SELECT networkrbacs.tenant_id AS networkrbacs_tenant_id, networkrbacs.id AS networkrbacs_id, networkrbacs.target_tenant AS networkrbacs_target_tenant, networkrbacs.action AS networkrbacs_action, networkrbacs.object_id AS networkrbacs_object_id, anon_1.networks_id AS anon_1_networks_id FROM (SELECT networks.id AS networks_id FROM networks LEFT OUTER JOIN externalnetworks ON networks.id = externalnetworks.network_id LEFT OUTER JOIN networkrbacs ON networks.id = networkrbacs.object_id WHERE networkrbacs.action = 'access_as_shared' AND (networkrbacs.target_tenant = '*' OR networkrbacs.target_tenant = '9f13bf11e06e4d81b44c8c3e62d4362b')) AS anon_1 INNER JOIN networkrbacs ON anon_1.networks_id = networkrbacs.object_id ORDER BY anon_1.networks_id",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "NETWORKS.ID",
        "EXTERNALNETWORKS.NETWORK_ID"
      ],
      [
        "NETWORKRBACS.OBJECT_ID",
        "NETWORKS.ID"
      ]
    ]
  },
  {
    "question": "Provide information about subnet access control for subnets in network 0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d.",
    "sql": "SELECT networkrbacs.tenant_id AS networkrbacs_tenant_id, networkrbacs.id AS networkrbacs_id, networkrbacs.target_tenant AS networkrbacs_target_tenant, networkrbacs.action AS networkrbacs_action, networkrbacs.object_id AS networkrbacs_object_id, subnets_1.network_id AS subnets_1_network_id FROM (SELECT networks.id AS networks_id FROM networks LEFT OUTER JOIN externalnetworks ON networks.id = externalnetworks.network_id WHERE networks.id IN ('0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d', '0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d', '0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d')) AS anon_1 INNER JOIN subnets AS subnets_1 ON anon_1.networks_id = subnets_1.network_id INNER JOIN networkrbacs ON subnets_1.network_id = networkrbacs.object_id ORDER BY subnets_1.network_id",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "EXTERNALNETWORKS.NETWORK_ID",
        "NETWORKS.ID"
      ],
      [
        "NETWORKRBACS.OBJECT_ID",
        "SUBNETS.NETWORK_ID"
      ]
    ]
  },
  {
    "question": "What is the oldest version of the nova-consoleauth service in the cloud?",
    "sql": "SELECT min(services.version) AS min_1 FROM services WHERE services.`binary` = 'nova-consoleauth' AND services.deleted = 0 AND services.forced_down = false",
    "db_id": "csail_stata_nova",
    "join_keys": []
  },
  {
    "question": "Provide information (including info caches, and security groups) about the VM with uuid baa9bc44-cfd3-40e6-800b-80ffcb15ce97.",
    "sql": "SELECT anon_1.instances_created_at AS anon_1_instances_created_at, anon_1.instances_updated_at AS anon_1_instances_updated_at, anon_1.instances_deleted_at AS anon_1_instances_deleted_at, anon_1.instances_deleted AS anon_1_instances_deleted, anon_1.instances_id AS anon_1_instances_id, anon_1.instances_user_id AS anon_1_instances_user_id, anon_1.instances_project_id AS anon_1_instances_project_id, anon_1.instances_image_ref AS anon_1_instances_image_ref, anon_1.instances_kernel_id AS anon_1_instances_kernel_id, anon_1.instances_ramdisk_id AS anon_1_instances_ramdisk_id, anon_1.instances_hostname AS anon_1_instances_hostname, anon_1.instances_launch_index AS anon_1_instances_launch_index, anon_1.instances_key_name AS anon_1_instances_key_name, anon_1.instances_key_data AS anon_1_instances_key_data, anon_1.instances_power_state AS anon_1_instances_power_state, anon_1.instances_vm_state AS anon_1_instances_vm_state, anon_1.instances_task_state AS anon_1_instances_task_state, anon_1.instances_memory_mb AS anon_1_instances_memory_mb, anon_1.instances_vcpus AS anon_1_instances_vcpus, anon_1.instances_root_gb AS anon_1_instances_root_gb, anon_1.instances_ephemeral_gb AS anon_1_instances_ephemeral_gb, anon_1.instances_ephemeral_key_uuid AS anon_1_instances_ephemeral_key_uuid, anon_1.instances_host AS anon_1_instances_host, anon_1.instances_node AS anon_1_instances_node, anon_1.instances_instance_type_id AS anon_1_instances_instance_type_id, anon_1.instances_user_data AS anon_1_instances_user_data, anon_1.instances_reservation_id AS anon_1_instances_reservation_id, anon_1.instances_launched_at AS anon_1_instances_launched_at, anon_1.instances_terminated_at AS anon_1_instances_terminated_at, anon_1.instances_availability_zone AS anon_1_instances_availability_zone, anon_1.instances_display_name AS anon_1_instances_display_name, anon_1.instances_display_description AS anon_1_instances_display_description, anon_1.instances_launched_on AS anon_1_instances_launched_on, anon_1.instances_locked AS anon_1_instances_locked, anon_1.instances_locked_by AS anon_1_instances_locked_by, anon_1.instances_os_type AS anon_1_instances_os_type, anon_1.instances_architecture AS anon_1_instances_architecture, anon_1.instances_vm_mode AS anon_1_instances_vm_mode, anon_1.instances_uuid AS anon_1_instances_uuid, anon_1.instances_root_device_name AS anon_1_instances_root_device_name, anon_1.instances_default_ephemeral_device AS anon_1_instances_default_ephemeral_device, anon_1.instances_default_swap_device AS anon_1_instances_default_swap_device, anon_1.instances_config_drive AS anon_1_instances_config_drive, anon_1.instances_access_ip_v4 AS anon_1_instances_access_ip_v4, anon_1.instances_access_ip_v6 AS anon_1_instances_access_ip_v6, anon_1.instances_auto_disk_config AS anon_1_instances_auto_disk_config, anon_1.instances_progress AS anon_1_instances_progress, anon_1.instances_shutdown_terminate AS anon_1_instances_shutdown_terminate, anon_1.instances_disable_terminate AS anon_1_instances_disable_terminate, anon_1.instances_cell_name AS anon_1_instances_cell_name, anon_1.instances_internal_id AS anon_1_instances_internal_id, anon_1.instances_cleaned AS anon_1_instances_cleaned, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id, security_group_rules_1.created_at AS security_group_rules_1_created_at, security_group_rules_1.updated_at AS security_group_rules_1_updated_at, security_group_rules_1.deleted_at AS security_group_rules_1_deleted_at, security_group_rules_1.deleted AS security_group_rules_1_deleted, security_group_rules_1.id AS security_group_rules_1_id, security_group_rules_1.parent_group_id AS security_group_rules_1_parent_group_id, security_group_rules_1.protocol AS security_group_rules_1_protocol, security_group_rules_1.from_port AS security_group_rules_1_from_port, security_group_rules_1.to_port AS security_group_rules_1_to_port, security_group_rules_1.cidr AS security_group_rules_1_cidr, security_group_rules_1.group_id AS security_group_rules_1_group_id FROM (SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned FROM instances WHERE instances.uuid = 'baa9bc44-cfd3-40e6-800b-80ffcb15ce97' LIMIT 1) AS anon_1 LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = anon_1.instances_uuid LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = anon_1.instances_uuid AND anon_1.instances_deleted = 0 LEFT OUTER JOIN security_group_rules AS security_group_rules_1 ON security_group_rules_1.parent_group_id = security_groups_1.id AND security_group_rules_1.deleted = 0",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "SECURITY_GROUPS.ID",
        "SECURITY_GROUP_RULES.PARENT_GROUP_ID"
      ]
    ]
  },
  {
    "question": "Provide information (including security groups, info caches, extra data, and system metadata) about the instance with UUID 3d471303-557b-4a65-a5bd-1ca14dc2e445.",
    "sql": "SELECT anon_1.instances_created_at AS anon_1_instances_created_at, anon_1.instances_updated_at AS anon_1_instances_updated_at, anon_1.instances_deleted_at AS anon_1_instances_deleted_at, anon_1.instances_deleted AS anon_1_instances_deleted, anon_1.instances_id AS anon_1_instances_id, anon_1.instances_user_id AS anon_1_instances_user_id, anon_1.instances_project_id AS anon_1_instances_project_id, anon_1.instances_image_ref AS anon_1_instances_image_ref, anon_1.instances_kernel_id AS anon_1_instances_kernel_id, anon_1.instances_ramdisk_id AS anon_1_instances_ramdisk_id, anon_1.instances_hostname AS anon_1_instances_hostname, anon_1.instances_launch_index AS anon_1_instances_launch_index, anon_1.instances_key_name AS anon_1_instances_key_name, anon_1.instances_key_data AS anon_1_instances_key_data, anon_1.instances_power_state AS anon_1_instances_power_state, anon_1.instances_vm_state AS anon_1_instances_vm_state, anon_1.instances_task_state AS anon_1_instances_task_state, anon_1.instances_memory_mb AS anon_1_instances_memory_mb, anon_1.instances_vcpus AS anon_1_instances_vcpus, anon_1.instances_root_gb AS anon_1_instances_root_gb, anon_1.instances_ephemeral_gb AS anon_1_instances_ephemeral_gb, anon_1.instances_ephemeral_key_uuid AS anon_1_instances_ephemeral_key_uuid, anon_1.instances_host AS anon_1_instances_host, anon_1.instances_node AS anon_1_instances_node, anon_1.instances_instance_type_id AS anon_1_instances_instance_type_id, anon_1.instances_user_data AS anon_1_instances_user_data, anon_1.instances_reservation_id AS anon_1_instances_reservation_id, anon_1.instances_launched_at AS anon_1_instances_launched_at, anon_1.instances_terminated_at AS anon_1_instances_terminated_at, anon_1.instances_availability_zone AS anon_1_instances_availability_zone, anon_1.instances_display_name AS anon_1_instances_display_name, anon_1.instances_display_description AS anon_1_instances_display_description, anon_1.instances_launched_on AS anon_1_instances_launched_on, anon_1.instances_locked AS anon_1_instances_locked, anon_1.instances_locked_by AS anon_1_instances_locked_by, anon_1.instances_os_type AS anon_1_instances_os_type, anon_1.instances_architecture AS anon_1_instances_architecture, anon_1.instances_vm_mode AS anon_1_instances_vm_mode, anon_1.instances_uuid AS anon_1_instances_uuid, anon_1.instances_root_device_name AS anon_1_instances_root_device_name, anon_1.instances_default_ephemeral_device AS anon_1_instances_default_ephemeral_device, anon_1.instances_default_swap_device AS anon_1_instances_default_swap_device, anon_1.instances_config_drive AS anon_1_instances_config_drive, anon_1.instances_access_ip_v4 AS anon_1_instances_access_ip_v4, anon_1.instances_access_ip_v6 AS anon_1_instances_access_ip_v6, anon_1.instances_auto_disk_config AS anon_1_instances_auto_disk_config, anon_1.instances_progress AS anon_1_instances_progress, anon_1.instances_shutdown_terminate AS anon_1_instances_shutdown_terminate, anon_1.instances_disable_terminate AS anon_1_instances_disable_terminate, anon_1.instances_cell_name AS anon_1_instances_cell_name, anon_1.instances_internal_id AS anon_1_instances_internal_id, anon_1.instances_cleaned AS anon_1_instances_cleaned, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id, security_group_rules_1.created_at AS security_group_rules_1_created_at, security_group_rules_1.updated_at AS security_group_rules_1_updated_at, security_group_rules_1.deleted_at AS security_group_rules_1_deleted_at, security_group_rules_1.deleted AS security_group_rules_1_deleted, security_group_rules_1.id AS security_group_rules_1_id, security_group_rules_1.parent_group_id AS security_group_rules_1_parent_group_id, security_group_rules_1.protocol AS security_group_rules_1_protocol, security_group_rules_1.from_port AS security_group_rules_1_from_port, security_group_rules_1.to_port AS security_group_rules_1_to_port, security_group_rules_1.cidr AS security_group_rules_1_cidr, security_group_rules_1.group_id AS security_group_rules_1_group_id, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, instance_extra_1.flavor AS instance_extra_1_flavor, instance_extra_1.created_at AS instance_extra_1_created_at, instance_extra_1.updated_at AS instance_extra_1_updated_at, instance_extra_1.deleted_at AS instance_extra_1_deleted_at, instance_extra_1.deleted AS instance_extra_1_deleted, instance_extra_1.id AS instance_extra_1_id, instance_extra_1.instance_uuid AS instance_extra_1_instance_uuid, instance_system_metadata_1.created_at AS instance_system_metadata_1_created_at, instance_system_metadata_1.updated_at AS instance_system_metadata_1_updated_at, instance_system_metadata_1.deleted_at AS instance_system_metadata_1_deleted_at, instance_system_metadata_1.deleted AS instance_system_metadata_1_deleted, instance_system_metadata_1.id AS instance_system_metadata_1_id, instance_system_metadata_1.`key` AS instance_system_metadata_1_key, instance_system_metadata_1.value AS instance_system_metadata_1_value, instance_system_metadata_1.instance_uuid AS instance_system_metadata_1_instance_uuid\nFROM (SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned\nFROM instances\nWHERE instances.deleted = 0 AND instances.uuid = '3d471303-557b-4a65-a5bd-1ca14dc2e445'\nLIMIT 1) AS anon_1 LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = anon_1.instances_uuid AND anon_1.instances_deleted = 0 LEFT OUTER JOIN security_group_rules AS security_group_rules_1 ON security_group_rules_1.parent_group_id = security_groups_1.id AND security_group_rules_1.deleted = 0 LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = anon_1.instances_uuid LEFT OUTER JOIN instance_extra AS instance_extra_1 ON instance_extra_1.instance_uuid = anon_1.instances_uuid LEFT OUTER JOIN instance_system_metadata AS instance_system_metadata_1 ON anon_1.instances_uuid = instance_system_metadata_1.instance_uuid",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "SECURITY_GROUP_RULES.PARENT_GROUP_ID",
        "SECURITY_GROUPS.ID"
      ]
    ]
  },
  {
    "question": "Provide information (including security groups, and info caches) about the instance with UUID 4ed92951-28b6-45bf-8baa-ed939796746e.",
    "sql": "SELECT anon_1.instances_created_at AS anon_1_instances_created_at, anon_1.instances_updated_at AS anon_1_instances_updated_at, anon_1.instances_deleted_at AS anon_1_instances_deleted_at, anon_1.instances_deleted AS anon_1_instances_deleted, anon_1.instances_id AS anon_1_instances_id, anon_1.instances_user_id AS anon_1_instances_user_id, anon_1.instances_project_id AS anon_1_instances_project_id, anon_1.instances_image_ref AS anon_1_instances_image_ref, anon_1.instances_kernel_id AS anon_1_instances_kernel_id, anon_1.instances_ramdisk_id AS anon_1_instances_ramdisk_id, anon_1.instances_hostname AS anon_1_instances_hostname, anon_1.instances_launch_index AS anon_1_instances_launch_index, anon_1.instances_key_name AS anon_1_instances_key_name, anon_1.instances_key_data AS anon_1_instances_key_data, anon_1.instances_power_state AS anon_1_instances_power_state, anon_1.instances_vm_state AS anon_1_instances_vm_state, anon_1.instances_task_state AS anon_1_instances_task_state, anon_1.instances_memory_mb AS anon_1_instances_memory_mb, anon_1.instances_vcpus AS anon_1_instances_vcpus, anon_1.instances_root_gb AS anon_1_instances_root_gb, anon_1.instances_ephemeral_gb AS anon_1_instances_ephemeral_gb, anon_1.instances_ephemeral_key_uuid AS anon_1_instances_ephemeral_key_uuid, anon_1.instances_host AS anon_1_instances_host, anon_1.instances_node AS anon_1_instances_node, anon_1.instances_instance_type_id AS anon_1_instances_instance_type_id, anon_1.instances_user_data AS anon_1_instances_user_data, anon_1.instances_reservation_id AS anon_1_instances_reservation_id, anon_1.instances_launched_at AS anon_1_instances_launched_at, anon_1.instances_terminated_at AS anon_1_instances_terminated_at, anon_1.instances_availability_zone AS anon_1_instances_availability_zone, anon_1.instances_display_name AS anon_1_instances_display_name, anon_1.instances_display_description AS anon_1_instances_display_description, anon_1.instances_launched_on AS anon_1_instances_launched_on, anon_1.instances_locked AS anon_1_instances_locked, anon_1.instances_locked_by AS anon_1_instances_locked_by, anon_1.instances_os_type AS anon_1_instances_os_type, anon_1.instances_architecture AS anon_1_instances_architecture, anon_1.instances_vm_mode AS anon_1_instances_vm_mode, anon_1.instances_uuid AS anon_1_instances_uuid, anon_1.instances_root_device_name AS anon_1_instances_root_device_name, anon_1.instances_default_ephemeral_device AS anon_1_instances_default_ephemeral_device, anon_1.instances_default_swap_device AS anon_1_instances_default_swap_device, anon_1.instances_config_drive AS anon_1_instances_config_drive, anon_1.instances_access_ip_v4 AS anon_1_instances_access_ip_v4, anon_1.instances_access_ip_v6 AS anon_1_instances_access_ip_v6, anon_1.instances_auto_disk_config AS anon_1_instances_auto_disk_config, anon_1.instances_progress AS anon_1_instances_progress, anon_1.instances_shutdown_terminate AS anon_1_instances_shutdown_terminate, anon_1.instances_disable_terminate AS anon_1_instances_disable_terminate, anon_1.instances_cell_name AS anon_1_instances_cell_name, anon_1.instances_internal_id AS anon_1_instances_internal_id, anon_1.instances_cleaned AS anon_1_instances_cleaned, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id, security_group_rules_1.created_at AS security_group_rules_1_created_at, security_group_rules_1.updated_at AS security_group_rules_1_updated_at, security_group_rules_1.deleted_at AS security_group_rules_1_deleted_at, security_group_rules_1.deleted AS security_group_rules_1_deleted, security_group_rules_1.id AS security_group_rules_1_id, security_group_rules_1.parent_group_id AS security_group_rules_1_parent_group_id, security_group_rules_1.protocol AS security_group_rules_1_protocol, security_group_rules_1.from_port AS security_group_rules_1_from_port, security_group_rules_1.to_port AS security_group_rules_1_to_port, security_group_rules_1.cidr AS security_group_rules_1_cidr, security_group_rules_1.group_id AS security_group_rules_1_group_id, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid\nFROM (SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned\nFROM instances\nWHERE instances.deleted = 0 AND instances.uuid = '4ed92951-28b6-45bf-8baa-ed939796746e'\nLIMIT 1) AS anon_1 LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = anon_1.instances_uuid AND anon_1.instances_deleted = 0 LEFT OUTER JOIN security_group_rules AS security_group_rules_1 ON security_group_rules_1.parent_group_id = security_groups_1.id AND security_group_rules_1.deleted = 0 LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = anon_1.instances_uuid",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "SECURITY_GROUPS.ID",
        "SECURITY_GROUP_RULES.PARENT_GROUP_ID"
      ]
    ]
  },
  {
    "question": "Provide information about the 200 latest images that were created at or before 2016-11-28 17:25:32 and have an ID less than cee91088-04a9-4fdf-b2af-a5f2f0889056.",
    "sql": "SELECT anon_1.images_created_at AS anon_1_images_created_at, anon_1.images_updated_at AS anon_1_images_updated_at, anon_1.images_deleted_at AS anon_1_images_deleted_at, anon_1.images_deleted AS anon_1_images_deleted, anon_1.images_id AS anon_1_images_id, anon_1.images_name AS anon_1_images_name, anon_1.images_disk_format AS anon_1_images_disk_format, anon_1.images_container_format AS anon_1_images_container_format, anon_1.images_size AS anon_1_images_size, anon_1.images_virtual_size AS anon_1_images_virtual_size, anon_1.images_status AS anon_1_images_status, anon_1.images_is_public AS anon_1_images_is_public, anon_1.images_checksum AS anon_1_images_checksum, anon_1.images_min_disk AS anon_1_images_min_disk, anon_1.images_min_ram AS anon_1_images_min_ram, anon_1.images_owner AS anon_1_images_owner, anon_1.images_protected AS anon_1_images_protected, image_tags_1.created_at AS image_tags_1_created_at, image_tags_1.updated_at AS image_tags_1_updated_at, image_tags_1.deleted_at AS image_tags_1_deleted_at, image_tags_1.deleted AS image_tags_1_deleted, image_tags_1.id AS image_tags_1_id, image_tags_1.image_id AS image_tags_1_image_id, image_tags_1.value AS image_tags_1_value, image_locations_1.created_at AS image_locations_1_created_at, image_locations_1.updated_at AS image_locations_1_updated_at, image_locations_1.deleted_at AS image_locations_1_deleted_at, image_locations_1.deleted AS image_locations_1_deleted, image_locations_1.id AS image_locations_1_id, image_locations_1.image_id AS image_locations_1_image_id, image_locations_1.value AS image_locations_1_value, image_locations_1.meta_data AS image_locations_1_meta_data, image_locations_1.status AS image_locations_1_status, image_properties_1.created_at AS image_properties_1_created_at, image_properties_1.updated_at AS image_properties_1_updated_at, image_properties_1.deleted_at AS image_properties_1_deleted_at, image_properties_1.deleted AS image_properties_1_deleted, image_properties_1.id AS image_properties_1_id, image_properties_1.image_id AS image_properties_1_image_id, image_properties_1.name AS image_properties_1_name, image_properties_1.value AS image_properties_1_value\nFROM (SELECT images.created_at AS images_created_at, images.updated_at AS images_updated_at, images.deleted_at AS images_deleted_at, images.deleted AS images_deleted, images.id AS images_id, images.name AS images_name, images.disk_format AS images_disk_format, images.container_format AS images_container_format, images.size AS images_size, images.virtual_size AS images_virtual_size, images.status AS images_status, images.is_public AS images_is_public, images.checksum AS images_checksum, images.min_disk AS images_min_disk, images.min_ram AS images_min_ram, images.owner AS images_owner, images.protected AS images_protected\nFROM images\nWHERE images.deleted = false AND images.status IN ('active', 'saving', 'queued', 'pending_delete', 'deleted', 'deactivated') AND (CASE WHEN (images.created_at IS NOT NULL) THEN images.created_at END < '2016-11-28 17:25:32' OR CASE WHEN (images.created_at IS NOT NULL) THEN images.created_at END = '2016-11-28 17:25:32' AND CASE WHEN (images.id IS NOT NULL) THEN images.id ELSE '' END < 'cee91088-04a9-4fdf-b2af-a5f2f0889056') ORDER BY images.created_at DESC, images.id DESC\nLIMIT 200) AS anon_1 LEFT OUTER JOIN image_tags AS image_tags_1 ON anon_1.images_id = image_tags_1.image_id LEFT OUTER JOIN image_locations AS image_locations_1 ON anon_1.images_id = image_locations_1.image_id LEFT OUTER JOIN image_properties AS image_properties_1 ON anon_1.images_id = image_properties_1.image_id ORDER BY anon_1.images_created_at DESC, anon_1.images_id DESC",
    "db_id": "csail_stata_glance",
    "join_keys": []
  },
  {
    "question": "Provide information about the 200 latest images.",
    "sql": "SELECT anon_1.images_created_at AS anon_1_images_created_at, anon_1.images_updated_at AS anon_1_images_updated_at, anon_1.images_deleted_at AS anon_1_images_deleted_at, anon_1.images_deleted AS anon_1_images_deleted, anon_1.images_id AS anon_1_images_id, anon_1.images_name AS anon_1_images_name, anon_1.images_disk_format AS anon_1_images_disk_format, anon_1.images_container_format AS anon_1_images_container_format, anon_1.images_size AS anon_1_images_size, anon_1.images_virtual_size AS anon_1_images_virtual_size, anon_1.images_status AS anon_1_images_status, anon_1.images_is_public AS anon_1_images_is_public, anon_1.images_checksum AS anon_1_images_checksum, anon_1.images_min_disk AS anon_1_images_min_disk, anon_1.images_min_ram AS anon_1_images_min_ram, anon_1.images_owner AS anon_1_images_owner, anon_1.images_protected AS anon_1_images_protected, image_tags_1.created_at AS image_tags_1_created_at, image_tags_1.updated_at AS image_tags_1_updated_at, image_tags_1.deleted_at AS image_tags_1_deleted_at, image_tags_1.deleted AS image_tags_1_deleted, image_tags_1.id AS image_tags_1_id, image_tags_1.image_id AS image_tags_1_image_id, image_tags_1.value AS image_tags_1_value, image_locations_1.created_at AS image_locations_1_created_at, image_locations_1.updated_at AS image_locations_1_updated_at, image_locations_1.deleted_at AS image_locations_1_deleted_at, image_locations_1.deleted AS image_locations_1_deleted, image_locations_1.id AS image_locations_1_id, image_locations_1.image_id AS image_locations_1_image_id, image_locations_1.value AS image_locations_1_value, image_locations_1.meta_data AS image_locations_1_meta_data, image_locations_1.status AS image_locations_1_status, image_properties_1.created_at AS image_properties_1_created_at, image_properties_1.updated_at AS image_properties_1_updated_at, image_properties_1.deleted_at AS image_properties_1_deleted_at, image_properties_1.deleted AS image_properties_1_deleted, image_properties_1.id AS image_properties_1_id, image_properties_1.image_id AS image_properties_1_image_id, image_properties_1.name AS image_properties_1_name, image_properties_1.value AS image_properties_1_value\nFROM (SELECT images.created_at AS images_created_at, images.updated_at AS images_updated_at, images.deleted_at AS images_deleted_at, images.deleted AS images_deleted, images.id AS images_id, images.name AS images_name, images.disk_format AS images_disk_format, images.container_format AS images_container_format, images.size AS images_size, images.virtual_size AS images_virtual_size, images.status AS images_status, images.is_public AS images_is_public, images.checksum AS images_checksum, images.min_disk AS images_min_disk, images.min_ram AS images_min_ram, images.owner AS images_owner, images.protected AS images_protected\nFROM images\nWHERE images.deleted = false AND images.status IN ('active', 'saving', 'queued', 'pending_delete', 'deleted', 'deactivated') ORDER BY images.created_at DESC, images.id DESC\nLIMIT 200) AS anon_1 LEFT OUTER JOIN image_tags AS image_tags_1 ON anon_1.images_id = image_tags_1.image_id LEFT OUTER JOIN image_locations AS image_locations_1 ON anon_1.images_id = image_locations_1.image_id LEFT OUTER JOIN image_properties AS image_properties_1 ON anon_1.images_id = image_properties_1.image_id ORDER BY anon_1.images_created_at DESC, anon_1.images_id DESC",
    "db_id": "csail_stata_glance",
    "join_keys": []
  },
  {
    "question": "Provide information about the 25 latest images that were created at or before 2022-06-06 17:12:44 and have an ID less than f964c0ae-58d1-49e5-8f2a-67902b86a99c.",
    "sql": "SELECT anon_1.images_created_at AS anon_1_images_created_at, anon_1.images_updated_at AS anon_1_images_updated_at, anon_1.images_deleted_at AS anon_1_images_deleted_at, anon_1.images_deleted AS anon_1_images_deleted, anon_1.images_id AS anon_1_images_id, anon_1.images_name AS anon_1_images_name, anon_1.images_disk_format AS anon_1_images_disk_format, anon_1.images_container_format AS anon_1_images_container_format, anon_1.images_size AS anon_1_images_size, anon_1.images_virtual_size AS anon_1_images_virtual_size, anon_1.images_status AS anon_1_images_status, anon_1.images_is_public AS anon_1_images_is_public, anon_1.images_checksum AS anon_1_images_checksum, anon_1.images_min_disk AS anon_1_images_min_disk, anon_1.images_min_ram AS anon_1_images_min_ram, anon_1.images_owner AS anon_1_images_owner, anon_1.images_protected AS anon_1_images_protected, image_tags_1.created_at AS image_tags_1_created_at, image_tags_1.updated_at AS image_tags_1_updated_at, image_tags_1.deleted_at AS image_tags_1_deleted_at, image_tags_1.deleted AS image_tags_1_deleted, image_tags_1.id AS image_tags_1_id, image_tags_1.image_id AS image_tags_1_image_id, image_tags_1.value AS image_tags_1_value, image_locations_1.created_at AS image_locations_1_created_at, image_locations_1.updated_at AS image_locations_1_updated_at, image_locations_1.deleted_at AS image_locations_1_deleted_at, image_locations_1.deleted AS image_locations_1_deleted, image_locations_1.id AS image_locations_1_id, image_locations_1.image_id AS image_locations_1_image_id, image_locations_1.value AS image_locations_1_value, image_locations_1.meta_data AS image_locations_1_meta_data, image_locations_1.status AS image_locations_1_status, image_properties_1.created_at AS image_properties_1_created_at, image_properties_1.updated_at AS image_properties_1_updated_at, image_properties_1.deleted_at AS image_properties_1_deleted_at, image_properties_1.deleted AS image_properties_1_deleted, image_properties_1.id AS image_properties_1_id, image_properties_1.image_id AS image_properties_1_image_id, image_properties_1.name AS image_properties_1_name, image_properties_1.value AS image_properties_1_value\nFROM (SELECT images.created_at AS images_created_at, images.updated_at AS images_updated_at, images.deleted_at AS images_deleted_at, images.deleted AS images_deleted, images.id AS images_id, images.name AS images_name, images.disk_format AS images_disk_format, images.container_format AS images_container_format, images.size AS images_size, images.virtual_size AS images_virtual_size, images.status AS images_status, images.is_public AS images_is_public, images.checksum AS images_checksum, images.min_disk AS images_min_disk, images.min_ram AS images_min_ram, images.owner AS images_owner, images.protected AS images_protected\nFROM images\nWHERE images.deleted = false AND images.status IN ('active', 'saving', 'queued', 'pending_delete', 'deleted', 'deactivated') AND images.is_public = true AND (CASE WHEN (images.created_at IS NOT NULL) THEN images.created_at END < '2022-06-06 17:12:44' OR CASE WHEN (images.created_at IS NOT NULL) THEN images.created_at END = '2022-06-06 17:12:44' AND CASE WHEN (images.id IS NOT NULL) THEN images.id ELSE '' END < 'f964c0ae-58d1-49e5-8f2a-67902b86a99c') ORDER BY images.created_at DESC, images.id DESC\nLIMIT 25) AS anon_1 LEFT OUTER JOIN image_tags AS image_tags_1 ON anon_1.images_id = image_tags_1.image_id LEFT OUTER JOIN image_locations AS image_locations_1 ON anon_1.images_id = image_locations_1.image_id LEFT OUTER JOIN image_properties AS image_properties_1 ON anon_1.images_id = image_properties_1.image_id ORDER BY anon_1.images_created_at DESC, anon_1.images_id DESC",
    "db_id": "csail_stata_glance",
    "join_keys": []
  },
  {
    "question": "Provide information (including security groups, info caches, extra data, and metadata) about the 3000 latest instances in the project with id bfd50153a2e9476f93e33e30e922cd06.",
    "sql": "SELECT anon_1.instances_created_at AS anon_1_instances_created_at, anon_1.instances_updated_at AS anon_1_instances_updated_at, anon_1.instances_deleted_at AS anon_1_instances_deleted_at, anon_1.instances_deleted AS anon_1_instances_deleted, anon_1.instances_id AS anon_1_instances_id, anon_1.instances_user_id AS anon_1_instances_user_id, anon_1.instances_project_id AS anon_1_instances_project_id, anon_1.instances_image_ref AS anon_1_instances_image_ref, anon_1.instances_kernel_id AS anon_1_instances_kernel_id, anon_1.instances_ramdisk_id AS anon_1_instances_ramdisk_id, anon_1.instances_hostname AS anon_1_instances_hostname, anon_1.instances_launch_index AS anon_1_instances_launch_index, anon_1.instances_key_name AS anon_1_instances_key_name, anon_1.instances_key_data AS anon_1_instances_key_data, anon_1.instances_power_state AS anon_1_instances_power_state, anon_1.instances_vm_state AS anon_1_instances_vm_state, anon_1.instances_task_state AS anon_1_instances_task_state, anon_1.instances_memory_mb AS anon_1_instances_memory_mb, anon_1.instances_vcpus AS anon_1_instances_vcpus, anon_1.instances_root_gb AS anon_1_instances_root_gb, anon_1.instances_ephemeral_gb AS anon_1_instances_ephemeral_gb, anon_1.instances_ephemeral_key_uuid AS anon_1_instances_ephemeral_key_uuid, anon_1.instances_host AS anon_1_instances_host, anon_1.instances_node AS anon_1_instances_node, anon_1.instances_instance_type_id AS anon_1_instances_instance_type_id, anon_1.instances_user_data AS anon_1_instances_user_data, anon_1.instances_reservation_id AS anon_1_instances_reservation_id, anon_1.instances_launched_at AS anon_1_instances_launched_at, anon_1.instances_terminated_at AS anon_1_instances_terminated_at, anon_1.instances_availability_zone AS anon_1_instances_availability_zone, anon_1.instances_display_name AS anon_1_instances_display_name, anon_1.instances_display_description AS anon_1_instances_display_description, anon_1.instances_launched_on AS anon_1_instances_launched_on, anon_1.instances_locked AS anon_1_instances_locked, anon_1.instances_locked_by AS anon_1_instances_locked_by, anon_1.instances_os_type AS anon_1_instances_os_type, anon_1.instances_architecture AS anon_1_instances_architecture, anon_1.instances_vm_mode AS anon_1_instances_vm_mode, anon_1.instances_uuid AS anon_1_instances_uuid, anon_1.instances_root_device_name AS anon_1_instances_root_device_name, anon_1.instances_default_ephemeral_device AS anon_1_instances_default_ephemeral_device, anon_1.instances_default_swap_device AS anon_1_instances_default_swap_device, anon_1.instances_config_drive AS anon_1_instances_config_drive, anon_1.instances_access_ip_v4 AS anon_1_instances_access_ip_v4, anon_1.instances_access_ip_v6 AS anon_1_instances_access_ip_v6, anon_1.instances_auto_disk_config AS anon_1_instances_auto_disk_config, anon_1.instances_progress AS anon_1_instances_progress, anon_1.instances_shutdown_terminate AS anon_1_instances_shutdown_terminate, anon_1.instances_disable_terminate AS anon_1_instances_disable_terminate, anon_1.instances_cell_name AS anon_1_instances_cell_name, anon_1.instances_internal_id AS anon_1_instances_internal_id, anon_1.instances_cleaned AS anon_1_instances_cleaned, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, instance_extra_1.flavor AS instance_extra_1_flavor, instance_extra_1.created_at AS instance_extra_1_created_at, instance_extra_1.updated_at AS instance_extra_1_updated_at, instance_extra_1.deleted_at AS instance_extra_1_deleted_at, instance_extra_1.deleted AS instance_extra_1_deleted, instance_extra_1.id AS instance_extra_1_id, instance_extra_1.instance_uuid AS instance_extra_1_instance_uuid, instance_metadata_1.created_at AS instance_metadata_1_created_at, instance_metadata_1.updated_at AS instance_metadata_1_updated_at, instance_metadata_1.deleted_at AS instance_metadata_1_deleted_at, instance_metadata_1.deleted AS instance_metadata_1_deleted, instance_metadata_1.id AS instance_metadata_1_id, instance_metadata_1.`key` AS instance_metadata_1_key, instance_metadata_1.value AS instance_metadata_1_value, instance_metadata_1.instance_uuid AS instance_metadata_1_instance_uuid\nFROM (SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned\nFROM instances\nWHERE instances.deleted = 0 AND (instances.vm_state != 'soft-delete' OR instances.vm_state IS NULL) AND instances.project_id = 'bfd50153a2e9476f93e33e30e922cd06' ORDER BY instances.created_at DESC, instances.id DESC\nLIMIT 3000) AS anon_1 LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = anon_1.instances_uuid AND anon_1.instances_deleted = 0 LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = anon_1.instances_uuid LEFT OUTER JOIN instance_extra AS instance_extra_1 ON instance_extra_1.instance_uuid = anon_1.instances_uuid LEFT OUTER JOIN instance_metadata AS instance_metadata_1 ON instance_metadata_1.instance_uuid = anon_1.instances_uuid AND instance_metadata_1.deleted = 0 ORDER BY anon_1.instances_created_at DESC, anon_1.instances_id DESC",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "SECURITY_GROUP_INSTANCE_ASSOCIATION.SECURITY_GROUP_ID",
        "SECURITY_GROUPS.ID"
      ]
    ]
  },
  {
    "question": "Provide information (including security groups, system metadata, info caches, extra data, and associated PCI devices) about the instance d052d786-9b26-4439-ae6b-32a0505fdc12 under project bfd50153a2e9476f93e33e30e922cd06.",
    "sql": "SELECT anon_1.instances_created_at AS anon_1_instances_created_at, anon_1.instances_updated_at AS anon_1_instances_updated_at, anon_1.instances_deleted_at AS anon_1_instances_deleted_at, anon_1.instances_deleted AS anon_1_instances_deleted, anon_1.instances_id AS anon_1_instances_id, anon_1.instances_user_id AS anon_1_instances_user_id, anon_1.instances_project_id AS anon_1_instances_project_id, anon_1.instances_image_ref AS anon_1_instances_image_ref, anon_1.instances_kernel_id AS anon_1_instances_kernel_id, anon_1.instances_ramdisk_id AS anon_1_instances_ramdisk_id, anon_1.instances_hostname AS anon_1_instances_hostname, anon_1.instances_launch_index AS anon_1_instances_launch_index, anon_1.instances_key_name AS anon_1_instances_key_name, anon_1.instances_key_data AS anon_1_instances_key_data, anon_1.instances_power_state AS anon_1_instances_power_state, anon_1.instances_vm_state AS anon_1_instances_vm_state, anon_1.instances_task_state AS anon_1_instances_task_state, anon_1.instances_memory_mb AS anon_1_instances_memory_mb, anon_1.instances_vcpus AS anon_1_instances_vcpus, anon_1.instances_root_gb AS anon_1_instances_root_gb, anon_1.instances_ephemeral_gb AS anon_1_instances_ephemeral_gb, anon_1.instances_ephemeral_key_uuid AS anon_1_instances_ephemeral_key_uuid, anon_1.instances_host AS anon_1_instances_host, anon_1.instances_node AS anon_1_instances_node, anon_1.instances_instance_type_id AS anon_1_instances_instance_type_id, anon_1.instances_user_data AS anon_1_instances_user_data, anon_1.instances_reservation_id AS anon_1_instances_reservation_id, anon_1.instances_launched_at AS anon_1_instances_launched_at, anon_1.instances_terminated_at AS anon_1_instances_terminated_at, anon_1.instances_availability_zone AS anon_1_instances_availability_zone, anon_1.instances_display_name AS anon_1_instances_display_name, anon_1.instances_display_description AS anon_1_instances_display_description, anon_1.instances_launched_on AS anon_1_instances_launched_on, anon_1.instances_locked AS anon_1_instances_locked, anon_1.instances_locked_by AS anon_1_instances_locked_by, anon_1.instances_os_type AS anon_1_instances_os_type, anon_1.instances_architecture AS anon_1_instances_architecture, anon_1.instances_vm_mode AS anon_1_instances_vm_mode, anon_1.instances_uuid AS anon_1_instances_uuid, anon_1.instances_root_device_name AS anon_1_instances_root_device_name, anon_1.instances_default_ephemeral_device AS anon_1_instances_default_ephemeral_device, anon_1.instances_default_swap_device AS anon_1_instances_default_swap_device, anon_1.instances_config_drive AS anon_1_instances_config_drive, anon_1.instances_access_ip_v4 AS anon_1_instances_access_ip_v4, anon_1.instances_access_ip_v6 AS anon_1_instances_access_ip_v6, anon_1.instances_auto_disk_config AS anon_1_instances_auto_disk_config, anon_1.instances_progress AS anon_1_instances_progress, anon_1.instances_shutdown_terminate AS anon_1_instances_shutdown_terminate, anon_1.instances_disable_terminate AS anon_1_instances_disable_terminate, anon_1.instances_cell_name AS anon_1_instances_cell_name, anon_1.instances_internal_id AS anon_1_instances_internal_id, anon_1.instances_cleaned AS anon_1_instances_cleaned, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id, security_group_rules_1.created_at AS security_group_rules_1_created_at, security_group_rules_1.updated_at AS security_group_rules_1_updated_at, security_group_rules_1.deleted_at AS security_group_rules_1_deleted_at, security_group_rules_1.deleted AS security_group_rules_1_deleted, security_group_rules_1.id AS security_group_rules_1_id, security_group_rules_1.parent_group_id AS security_group_rules_1_parent_group_id, security_group_rules_1.protocol AS security_group_rules_1_protocol, security_group_rules_1.from_port AS security_group_rules_1_from_port, security_group_rules_1.to_port AS security_group_rules_1_to_port, security_group_rules_1.cidr AS security_group_rules_1_cidr, security_group_rules_1.group_id AS security_group_rules_1_group_id, instance_system_metadata_1.created_at AS instance_system_metadata_1_created_at, instance_system_metadata_1.updated_at AS instance_system_metadata_1_updated_at, instance_system_metadata_1.deleted_at AS instance_system_metadata_1_deleted_at, instance_system_metadata_1.deleted AS instance_system_metadata_1_deleted, instance_system_metadata_1.id AS instance_system_metadata_1_id, instance_system_metadata_1.`key` AS instance_system_metadata_1_key, instance_system_metadata_1.value AS instance_system_metadata_1_value, instance_system_metadata_1.instance_uuid AS instance_system_metadata_1_instance_uuid, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, instance_extra_1.numa_topology AS instance_extra_1_numa_topology, instance_extra_1.flavor AS instance_extra_1_flavor, instance_extra_1.created_at AS instance_extra_1_created_at, instance_extra_1.updated_at AS instance_extra_1_updated_at, instance_extra_1.deleted_at AS instance_extra_1_deleted_at, instance_extra_1.deleted AS instance_extra_1_deleted, instance_extra_1.id AS instance_extra_1_id, instance_extra_1.instance_uuid AS instance_extra_1_instance_uuid, instance_metadata_1.created_at AS instance_metadata_1_created_at, instance_metadata_1.updated_at AS instance_metadata_1_updated_at, instance_metadata_1.deleted_at AS instance_metadata_1_deleted_at, instance_metadata_1.deleted AS instance_metadata_1_deleted, instance_metadata_1.id AS instance_metadata_1_id, instance_metadata_1.`key` AS instance_metadata_1_key, instance_metadata_1.value AS instance_metadata_1_value, instance_metadata_1.instance_uuid AS instance_metadata_1_instance_uuid, pci_devices_1.created_at AS pci_devices_1_created_at, pci_devices_1.updated_at AS pci_devices_1_updated_at, pci_devices_1.deleted_at AS pci_devices_1_deleted_at, pci_devices_1.deleted AS pci_devices_1_deleted, pci_devices_1.id AS pci_devices_1_id, pci_devices_1.compute_node_id AS pci_devices_1_compute_node_id, pci_devices_1.address AS pci_devices_1_address, pci_devices_1.vendor_id AS pci_devices_1_vendor_id, pci_devices_1.product_id AS pci_devices_1_product_id, pci_devices_1.dev_type AS pci_devices_1_dev_type, pci_devices_1.dev_id AS pci_devices_1_dev_id, pci_devices_1.label AS pci_devices_1_label, pci_devices_1.status AS pci_devices_1_status, pci_devices_1.request_id AS pci_devices_1_request_id, pci_devices_1.extra_info AS pci_devices_1_extra_info, pci_devices_1.instance_uuid AS pci_devices_1_instance_uuid, pci_devices_1.numa_node AS pci_devices_1_numa_node, pci_devices_1.parent_addr AS pci_devices_1_parent_addr\nFROM (SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned\nFROM instances\nWHERE instances.deleted = 0 AND instances.project_id = 'bfd50153a2e9476f93e33e30e922cd06' AND instances.uuid = 'd052d786-9b26-4439-ae6b-32a0505fdc12'\nLIMIT 1) AS anon_1 LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = anon_1.instances_uuid AND anon_1.instances_deleted = 0 LEFT OUTER JOIN security_group_rules AS security_group_rules_1 ON security_group_rules_1.parent_group_id = security_groups_1.id AND security_group_rules_1.deleted = 0 LEFT OUTER JOIN instance_system_metadata AS instance_system_metadata_1 ON anon_1.instances_uuid = instance_system_metadata_1.instance_uuid LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = anon_1.instances_uuid LEFT OUTER JOIN instance_extra AS instance_extra_1 ON instance_extra_1.instance_uuid = anon_1.instances_uuid LEFT OUTER JOIN instance_metadata AS instance_metadata_1 ON instance_metadata_1.instance_uuid = anon_1.instances_uuid AND instance_metadata_1.deleted = 0 LEFT OUTER JOIN pci_devices AS pci_devices_1 ON pci_devices_1.instance_uuid = anon_1.instances_uuid AND pci_devices_1.deleted = 0",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "SECURITY_GROUPS.ID",
        "SECURITY_GROUP_RULES.PARENT_GROUP_ID"
      ]
    ]
  },
  {
    "question": "Provide information about the 3000 instance types available to project bfd50153a2e9476f93e33e30e922cd06, sorted in the ascending order flavor id and id.",
    "sql": "SELECT anon_1.instance_types_created_at AS anon_1_instance_types_created_at, anon_1.instance_types_updated_at AS anon_1_instance_types_updated_at, anon_1.instance_types_deleted_at AS anon_1_instance_types_deleted_at, anon_1.instance_types_deleted AS anon_1_instance_types_deleted, anon_1.instance_types_id AS anon_1_instance_types_id, anon_1.instance_types_name AS anon_1_instance_types_name, anon_1.instance_types_memory_mb AS anon_1_instance_types_memory_mb, anon_1.instance_types_vcpus AS anon_1_instance_types_vcpus, anon_1.instance_types_root_gb AS anon_1_instance_types_root_gb, anon_1.instance_types_ephemeral_gb AS anon_1_instance_types_ephemeral_gb, anon_1.instance_types_flavorid AS anon_1_instance_types_flavorid, anon_1.instance_types_swap AS anon_1_instance_types_swap, anon_1.instance_types_rxtx_factor AS anon_1_instance_types_rxtx_factor, anon_1.instance_types_vcpu_weight AS anon_1_instance_types_vcpu_weight, anon_1.instance_types_disabled AS anon_1_instance_types_disabled, anon_1.instance_types_is_public AS anon_1_instance_types_is_public, instance_type_extra_specs_1.created_at AS instance_type_extra_specs_1_created_at, instance_type_extra_specs_1.updated_at AS instance_type_extra_specs_1_updated_at, instance_type_extra_specs_1.deleted_at AS instance_type_extra_specs_1_deleted_at, instance_type_extra_specs_1.deleted AS instance_type_extra_specs_1_deleted, instance_type_extra_specs_1.id AS instance_type_extra_specs_1_id, instance_type_extra_specs_1.`key` AS instance_type_extra_specs_1_key, instance_type_extra_specs_1.value AS instance_type_extra_specs_1_value, instance_type_extra_specs_1.instance_type_id AS instance_type_extra_specs_1_instance_type_id\nFROM (SELECT instance_types.created_at AS instance_types_created_at, instance_types.updated_at AS instance_types_updated_at, instance_types.deleted_at AS instance_types_deleted_at, instance_types.deleted AS instance_types_deleted, instance_types.id AS instance_types_id, instance_types.name AS instance_types_name, instance_types.memory_mb AS instance_types_memory_mb, instance_types.vcpus AS instance_types_vcpus, instance_types.root_gb AS instance_types_root_gb, instance_types.ephemeral_gb AS instance_types_ephemeral_gb, instance_types.flavorid AS instance_types_flavorid, instance_types.swap AS instance_types_swap, instance_types.rxtx_factor AS instance_types_rxtx_factor, instance_types.vcpu_weight AS instance_types_vcpu_weight, instance_types.disabled AS instance_types_disabled, instance_types.is_public AS instance_types_is_public\nFROM instance_types\nWHERE instance_types.deleted = 0 AND (instance_types.is_public = true OR (EXISTS (SELECT 1\nFROM instance_type_projects\nWHERE instance_type_projects.instance_type_id = instance_types.id AND instance_type_projects.deleted = 0 AND instance_type_projects.project_id = 'bfd50153a2e9476f93e33e30e922cd06'))) AND instance_types.disabled = false AND (instance_types.is_public = true OR (EXISTS (SELECT 1\nFROM instance_type_projects\nWHERE instance_type_projects.instance_type_id = instance_types.id AND instance_type_projects.deleted = 0 AND instance_type_projects.deleted = 0 AND instance_type_projects.project_id = 'bfd50153a2e9476f93e33e30e922cd06'))) ORDER BY instance_types.flavorid ASC, instance_types.id ASC\nLIMIT 3000) AS anon_1 LEFT OUTER JOIN instance_type_extra_specs AS instance_type_extra_specs_1 ON instance_type_extra_specs_1.instance_type_id = anon_1.instance_types_id AND instance_type_extra_specs_1.deleted = 0 ORDER BY anon_1.instance_types_flavorid ASC, anon_1.instance_types_id ASC",
    "db_id": "csail_stata_nova",
    "join_keys": []
  },
  {
    "question": "Provide information about the host aggregate with id default.",
    "sql": "SELECT anon_1.aggregates_created_at AS anon_1_aggregates_created_at, anon_1.aggregates_updated_at AS anon_1_aggregates_updated_at, anon_1.aggregates_deleted_at AS anon_1_aggregates_deleted_at, anon_1.aggregates_deleted AS anon_1_aggregates_deleted, anon_1.aggregates_id AS anon_1_aggregates_id, anon_1.aggregates_uuid AS anon_1_aggregates_uuid, anon_1.aggregates_name AS anon_1_aggregates_name, aggregate_hosts_1.created_at AS aggregate_hosts_1_created_at, aggregate_hosts_1.updated_at AS aggregate_hosts_1_updated_at, aggregate_hosts_1.deleted_at AS aggregate_hosts_1_deleted_at, aggregate_hosts_1.deleted AS aggregate_hosts_1_deleted, aggregate_hosts_1.id AS aggregate_hosts_1_id, aggregate_hosts_1.host AS aggregate_hosts_1_host, aggregate_hosts_1.aggregate_id AS aggregate_hosts_1_aggregate_id, aggregate_metadata_1.created_at AS aggregate_metadata_1_created_at, aggregate_metadata_1.updated_at AS aggregate_metadata_1_updated_at, aggregate_metadata_1.deleted_at AS aggregate_metadata_1_deleted_at, aggregate_metadata_1.deleted AS aggregate_metadata_1_deleted, aggregate_metadata_1.id AS aggregate_metadata_1_id, aggregate_metadata_1.`key` AS aggregate_metadata_1_key, aggregate_metadata_1.value AS aggregate_metadata_1_value, aggregate_metadata_1.aggregate_id AS aggregate_metadata_1_aggregate_id\nFROM (SELECT aggregates.created_at AS aggregates_created_at, aggregates.updated_at AS aggregates_updated_at, aggregates.deleted_at AS aggregates_deleted_at, aggregates.deleted AS aggregates_deleted, aggregates.id AS aggregates_id, aggregates.uuid AS aggregates_uuid, aggregates.name AS aggregates_name\nFROM aggregates\nWHERE aggregates.deleted = 0 AND aggregates.id = 'default'\nLIMIT 1) AS anon_1 LEFT OUTER JOIN aggregate_hosts AS aggregate_hosts_1 ON anon_1.aggregates_id = aggregate_hosts_1.aggregate_id AND aggregate_hosts_1.deleted = 0 AND anon_1.aggregates_deleted = 0 LEFT OUTER JOIN aggregate_metadata AS aggregate_metadata_1 ON anon_1.aggregates_id = aggregate_metadata_1.aggregate_id AND aggregate_metadata_1.deleted = 0 AND anon_1.aggregates_deleted = 0",
    "db_id": "csail_stata_nova",
    "join_keys": []
  },
  {
    "question": "Provide information about the 3000 instance types, sorted in the ascending order flavor id and id.",
    "sql": "SELECT anon_1.instance_types_created_at AS anon_1_instance_types_created_at, anon_1.instance_types_updated_at AS anon_1_instance_types_updated_at, anon_1.instance_types_deleted_at AS anon_1_instance_types_deleted_at, anon_1.instance_types_deleted AS anon_1_instance_types_deleted, anon_1.instance_types_id AS anon_1_instance_types_id, anon_1.instance_types_name AS anon_1_instance_types_name, anon_1.instance_types_memory_mb AS anon_1_instance_types_memory_mb, anon_1.instance_types_vcpus AS anon_1_instance_types_vcpus, anon_1.instance_types_root_gb AS anon_1_instance_types_root_gb, anon_1.instance_types_ephemeral_gb AS anon_1_instance_types_ephemeral_gb, anon_1.instance_types_flavorid AS anon_1_instance_types_flavorid, anon_1.instance_types_swap AS anon_1_instance_types_swap, anon_1.instance_types_rxtx_factor AS anon_1_instance_types_rxtx_factor, anon_1.instance_types_vcpu_weight AS anon_1_instance_types_vcpu_weight, anon_1.instance_types_disabled AS anon_1_instance_types_disabled, anon_1.instance_types_is_public AS anon_1_instance_types_is_public, instance_type_extra_specs_1.created_at AS instance_type_extra_specs_1_created_at, instance_type_extra_specs_1.updated_at AS instance_type_extra_specs_1_updated_at, instance_type_extra_specs_1.deleted_at AS instance_type_extra_specs_1_deleted_at, instance_type_extra_specs_1.deleted AS instance_type_extra_specs_1_deleted, instance_type_extra_specs_1.id AS instance_type_extra_specs_1_id, instance_type_extra_specs_1.`key` AS instance_type_extra_specs_1_key, instance_type_extra_specs_1.value AS instance_type_extra_specs_1_value, instance_type_extra_specs_1.instance_type_id AS instance_type_extra_specs_1_instance_type_id\nFROM (SELECT instance_types.created_at AS instance_types_created_at, instance_types.updated_at AS instance_types_updated_at, instance_types.deleted_at AS instance_types_deleted_at, instance_types.deleted AS instance_types_deleted, instance_types.id AS instance_types_id, instance_types.name AS instance_types_name, instance_types.memory_mb AS instance_types_memory_mb, instance_types.vcpus AS instance_types_vcpus, instance_types.root_gb AS instance_types_root_gb, instance_types.ephemeral_gb AS instance_types_ephemeral_gb, instance_types.flavorid AS instance_types_flavorid, instance_types.swap AS instance_types_swap, instance_types.rxtx_factor AS instance_types_rxtx_factor, instance_types.vcpu_weight AS instance_types_vcpu_weight, instance_types.disabled AS instance_types_disabled, instance_types.is_public AS instance_types_is_public\nFROM instance_types\nWHERE instance_types.deleted = 0 ORDER BY instance_types.flavorid ASC, instance_types.id ASC\nLIMIT 3000) AS anon_1 LEFT OUTER JOIN instance_type_extra_specs AS instance_type_extra_specs_1 ON instance_type_extra_specs_1.instance_type_id = anon_1.instance_types_id AND instance_type_extra_specs_1.deleted = 0 ORDER BY anon_1.instance_types_flavorid ASC, anon_1.instance_types_id ASC",
    "db_id": "csail_stata_nova",
    "join_keys": []
  },
  {
    "question": "Provide information (including security groups, and info caches) about the 3000 latest VMs under the project bfd50153a2e9476f93e33e30e922cd06 with void in the name.",
    "sql": "SELECT anon_1.instances_created_at AS anon_1_instances_created_at, anon_1.instances_updated_at AS anon_1_instances_updated_at, anon_1.instances_deleted_at AS anon_1_instances_deleted_at, anon_1.instances_deleted AS anon_1_instances_deleted, anon_1.instances_id AS anon_1_instances_id, anon_1.instances_user_id AS anon_1_instances_user_id, anon_1.instances_project_id AS anon_1_instances_project_id, anon_1.instances_image_ref AS anon_1_instances_image_ref, anon_1.instances_kernel_id AS anon_1_instances_kernel_id, anon_1.instances_ramdisk_id AS anon_1_instances_ramdisk_id, anon_1.instances_hostname AS anon_1_instances_hostname, anon_1.instances_launch_index AS anon_1_instances_launch_index, anon_1.instances_key_name AS anon_1_instances_key_name, anon_1.instances_key_data AS anon_1_instances_key_data, anon_1.instances_power_state AS anon_1_instances_power_state, anon_1.instances_vm_state AS anon_1_instances_vm_state, anon_1.instances_task_state AS anon_1_instances_task_state, anon_1.instances_memory_mb AS anon_1_instances_memory_mb, anon_1.instances_vcpus AS anon_1_instances_vcpus, anon_1.instances_root_gb AS anon_1_instances_root_gb, anon_1.instances_ephemeral_gb AS anon_1_instances_ephemeral_gb, anon_1.instances_ephemeral_key_uuid AS anon_1_instances_ephemeral_key_uuid, anon_1.instances_host AS anon_1_instances_host, anon_1.instances_node AS anon_1_instances_node, anon_1.instances_instance_type_id AS anon_1_instances_instance_type_id, anon_1.instances_user_data AS anon_1_instances_user_data, anon_1.instances_reservation_id AS anon_1_instances_reservation_id, anon_1.instances_launched_at AS anon_1_instances_launched_at, anon_1.instances_terminated_at AS anon_1_instances_terminated_at, anon_1.instances_availability_zone AS anon_1_instances_availability_zone, anon_1.instances_display_name AS anon_1_instances_display_name, anon_1.instances_display_description AS anon_1_instances_display_description, anon_1.instances_launched_on AS anon_1_instances_launched_on, anon_1.instances_locked AS anon_1_instances_locked, anon_1.instances_locked_by AS anon_1_instances_locked_by, anon_1.instances_os_type AS anon_1_instances_os_type, anon_1.instances_architecture AS anon_1_instances_architecture, anon_1.instances_vm_mode AS anon_1_instances_vm_mode, anon_1.instances_uuid AS anon_1_instances_uuid, anon_1.instances_root_device_name AS anon_1_instances_root_device_name, anon_1.instances_default_ephemeral_device AS anon_1_instances_default_ephemeral_device, anon_1.instances_default_swap_device AS anon_1_instances_default_swap_device, anon_1.instances_config_drive AS anon_1_instances_config_drive, anon_1.instances_access_ip_v4 AS anon_1_instances_access_ip_v4, anon_1.instances_access_ip_v6 AS anon_1_instances_access_ip_v6, anon_1.instances_auto_disk_config AS anon_1_instances_auto_disk_config, anon_1.instances_progress AS anon_1_instances_progress, anon_1.instances_shutdown_terminate AS anon_1_instances_shutdown_terminate, anon_1.instances_disable_terminate AS anon_1_instances_disable_terminate, anon_1.instances_cell_name AS anon_1_instances_cell_name, anon_1.instances_internal_id AS anon_1_instances_internal_id, anon_1.instances_cleaned AS anon_1_instances_cleaned, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid\nFROM (SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned\nFROM instances\nWHERE instances.deleted = 0 AND (instances.vm_state != 'soft-delete' OR instances.vm_state IS NULL) AND instances.project_id = 'bfd50153a2e9476f93e33e30e922cd06' AND (instances.display_name REGEXP 'void') ORDER BY instances.created_at DESC, instances.id DESC\nLIMIT 3000) AS anon_1 LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = anon_1.instances_uuid AND anon_1.instances_deleted = 0 LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = anon_1.instances_uuid ORDER BY anon_1.instances_created_at DESC, anon_1.instances_id DESC",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "SECURITY_GROUP_INSTANCE_ASSOCIATION.SECURITY_GROUP_ID",
        "SECURITY_GROUPS.ID"
      ]
    ]
  },
  {
    "question": "Provide information about the 25 latest public images.",
    "sql": "SELECT anon_1.images_created_at AS anon_1_images_created_at, anon_1.images_updated_at AS anon_1_images_updated_at, anon_1.images_deleted_at AS anon_1_images_deleted_at, anon_1.images_deleted AS anon_1_images_deleted, anon_1.images_id AS anon_1_images_id, anon_1.images_name AS anon_1_images_name, anon_1.images_disk_format AS anon_1_images_disk_format, anon_1.images_container_format AS anon_1_images_container_format, anon_1.images_size AS anon_1_images_size, anon_1.images_virtual_size AS anon_1_images_virtual_size, anon_1.images_status AS anon_1_images_status, anon_1.images_is_public AS anon_1_images_is_public, anon_1.images_checksum AS anon_1_images_checksum, anon_1.images_min_disk AS anon_1_images_min_disk, anon_1.images_min_ram AS anon_1_images_min_ram, anon_1.images_owner AS anon_1_images_owner, anon_1.images_protected AS anon_1_images_protected, image_tags_1.created_at AS image_tags_1_created_at, image_tags_1.updated_at AS image_tags_1_updated_at, image_tags_1.deleted_at AS image_tags_1_deleted_at, image_tags_1.deleted AS image_tags_1_deleted, image_tags_1.id AS image_tags_1_id, image_tags_1.image_id AS image_tags_1_image_id, image_tags_1.value AS image_tags_1_value, image_locations_1.created_at AS image_locations_1_created_at, image_locations_1.updated_at AS image_locations_1_updated_at, image_locations_1.deleted_at AS image_locations_1_deleted_at, image_locations_1.deleted AS image_locations_1_deleted, image_locations_1.id AS image_locations_1_id, image_locations_1.image_id AS image_locations_1_image_id, image_locations_1.value AS image_locations_1_value, image_locations_1.meta_data AS image_locations_1_meta_data, image_locations_1.status AS image_locations_1_status, image_properties_1.created_at AS image_properties_1_created_at, image_properties_1.updated_at AS image_properties_1_updated_at, image_properties_1.deleted_at AS image_properties_1_deleted_at, image_properties_1.deleted AS image_properties_1_deleted, image_properties_1.id AS image_properties_1_id, image_properties_1.image_id AS image_properties_1_image_id, image_properties_1.name AS image_properties_1_name, image_properties_1.value AS image_properties_1_value\nFROM (SELECT images.created_at AS images_created_at, images.updated_at AS images_updated_at, images.deleted_at AS images_deleted_at, images.deleted AS images_deleted, images.id AS images_id, images.name AS images_name, images.disk_format AS images_disk_format, images.container_format AS images_container_format, images.size AS images_size, images.virtual_size AS images_virtual_size, images.status AS images_status, images.is_public AS images_is_public, images.checksum AS images_checksum, images.min_disk AS images_min_disk, images.min_ram AS images_min_ram, images.owner AS images_owner, images.protected AS images_protected\nFROM images\nWHERE images.deleted = false AND images.status IN ('active', 'saving', 'queued', 'pending_delete', 'deleted', 'deactivated') AND images.is_public = true ORDER BY images.created_at DESC, images.id DESC\nLIMIT 25) AS anon_1 LEFT OUTER JOIN image_tags AS image_tags_1 ON anon_1.images_id = image_tags_1.image_id LEFT OUTER JOIN image_locations AS image_locations_1 ON anon_1.images_id = image_locations_1.image_id LEFT OUTER JOIN image_properties AS image_properties_1 ON anon_1.images_id = image_properties_1.image_id ORDER BY anon_1.images_created_at DESC, anon_1.images_id DESC",
    "db_id": "csail_stata_glance",
    "join_keys": []
  },
  {
    "question": "Provide information about the 200 latest images associated with the owner bfd50153a2e9476f93e33e30e922cd06.",
    "sql": "SELECT anon_1.anon_2_images_created_at AS anon_1_anon_2_images_created_at, anon_1.anon_2_images_updated_at AS anon_1_anon_2_images_updated_at, anon_1.anon_2_images_deleted_at AS anon_1_anon_2_images_deleted_at, anon_1.anon_2_images_deleted AS anon_1_anon_2_images_deleted, anon_1.anon_2_images_id AS anon_1_anon_2_images_id, anon_1.anon_2_images_name AS anon_1_anon_2_images_name, anon_1.anon_2_images_disk_format AS anon_1_anon_2_images_disk_format, anon_1.anon_2_images_container_format AS anon_1_anon_2_images_container_format, anon_1.anon_2_images_size AS anon_1_anon_2_images_size, anon_1.anon_2_images_virtual_size AS anon_1_anon_2_images_virtual_size, anon_1.anon_2_images_status AS anon_1_anon_2_images_status, anon_1.anon_2_images_is_public AS anon_1_anon_2_images_is_public, anon_1.anon_2_images_checksum AS anon_1_anon_2_images_checksum, anon_1.anon_2_images_min_disk AS anon_1_anon_2_images_min_disk, anon_1.anon_2_images_min_ram AS anon_1_anon_2_images_min_ram, anon_1.anon_2_images_owner AS anon_1_anon_2_images_owner, anon_1.anon_2_images_protected AS anon_1_anon_2_images_protected, image_tags_1.created_at AS image_tags_1_created_at, image_tags_1.updated_at AS image_tags_1_updated_at, image_tags_1.deleted_at AS image_tags_1_deleted_at, image_tags_1.deleted AS image_tags_1_deleted, image_tags_1.id AS image_tags_1_id, image_tags_1.image_id AS image_tags_1_image_id, image_tags_1.value AS image_tags_1_value, image_locations_1.created_at AS image_locations_1_created_at, image_locations_1.updated_at AS image_locations_1_updated_at, image_locations_1.deleted_at AS image_locations_1_deleted_at, image_locations_1.deleted AS image_locations_1_deleted, image_locations_1.id AS image_locations_1_id, image_locations_1.image_id AS image_locations_1_image_id, image_locations_1.value AS image_locations_1_value, image_locations_1.meta_data AS image_locations_1_meta_data, image_locations_1.status AS image_locations_1_status, image_properties_1.created_at AS image_properties_1_created_at, image_properties_1.updated_at AS image_properties_1_updated_at, image_properties_1.deleted_at AS image_properties_1_deleted_at, image_properties_1.deleted AS image_properties_1_deleted, image_properties_1.id AS image_properties_1_id, image_properties_1.image_id AS image_properties_1_image_id, image_properties_1.name AS image_properties_1_name, image_properties_1.value AS image_properties_1_value\nFROM (SELECT anon_2.images_created_at AS anon_2_images_created_at, anon_2.images_updated_at AS anon_2_images_updated_at, anon_2.images_deleted_at AS anon_2_images_deleted_at, anon_2.images_deleted AS anon_2_images_deleted, anon_2.images_id AS anon_2_images_id, anon_2.images_name AS anon_2_images_name, anon_2.images_disk_format AS anon_2_images_disk_format, anon_2.images_container_format AS anon_2_images_container_format, anon_2.images_size AS anon_2_images_size, anon_2.images_virtual_size AS anon_2_images_virtual_size, anon_2.images_status AS anon_2_images_status, anon_2.images_is_public AS anon_2_images_is_public, anon_2.images_checksum AS anon_2_images_checksum, anon_2.images_min_disk AS anon_2_images_min_disk, anon_2.images_min_ram AS anon_2_images_min_ram, anon_2.images_owner AS anon_2_images_owner, anon_2.images_protected AS anon_2_images_protected\nFROM (SELECT images.created_at AS images_created_at, images.updated_at AS images_updated_at, images.deleted_at AS images_deleted_at, images.deleted AS images_deleted, images.id AS images_id, images.name AS images_name, images.disk_format AS images_disk_format, images.container_format AS images_container_format, images.size AS images_size, images.virtual_size AS images_virtual_size, images.status AS images_status, images.is_public AS images_is_public, images.checksum AS images_checksum, images.min_disk AS images_min_disk, images.min_ram AS images_min_ram, images.owner AS images_owner, images.protected AS images_protected\nFROM images\nWHERE images.deleted = false AND images.status IN ('active', 'saving', 'queued', 'pending_delete', 'deleted', 'deactivated') AND images.is_public = true UNION SELECT images.created_at AS images_created_at, images.updated_at AS images_updated_at, images.deleted_at AS images_deleted_at, images.deleted AS images_deleted, images.id AS images_id, images.name AS images_name, images.disk_format AS images_disk_format, images.container_format AS images_container_format, images.size AS images_size, images.virtual_size AS images_virtual_size, images.status AS images_status, images.is_public AS images_is_public, images.checksum AS images_checksum, images.min_disk AS images_min_disk, images.min_ram AS images_min_ram, images.owner AS images_owner, images.protected AS images_protected\nFROM images\nWHERE images.owner = 'bfd50153a2e9476f93e33e30e922cd06' AND images.deleted = false AND images.status IN ('active', 'saving', 'queued', 'pending_delete', 'deleted', 'deactivated') UNION SELECT images.created_at AS images_created_at, images.updated_at AS images_updated_at, images.deleted_at AS images_deleted_at, images.deleted AS images_deleted, images.id AS images_id, images.name AS images_name, images.disk_format AS images_disk_format, images.container_format AS images_container_format, images.size AS images_size, images.virtual_size AS images_virtual_size, images.status AS images_status, images.is_public AS images_is_public, images.checksum AS images_checksum, images.min_disk AS images_min_disk, images.min_ram AS images_min_ram, images.owner AS images_owner, images.protected AS images_protected\nFROM images INNER JOIN image_members ON images.id = image_members.image_id\nWHERE images.deleted = false AND images.status IN ('active', 'saving', 'queued', 'pending_delete', 'deleted', 'deactivated') AND image_members.deleted = false AND image_members.member = 'bfd50153a2e9476f93e33e30e922cd06' AND image_members.status = 'accepted') AS anon_2 ORDER BY anon_2.images_created_at DESC, anon_2.images_id DESC\nLIMIT 200) AS anon_1 LEFT OUTER JOIN image_tags AS image_tags_1 ON anon_1.anon_2_images_id = image_tags_1.image_id LEFT OUTER JOIN image_locations AS image_locations_1 ON anon_1.anon_2_images_id = image_locations_1.image_id LEFT OUTER JOIN image_properties AS image_properties_1 ON anon_1.anon_2_images_id = image_properties_1.image_id ORDER BY anon_1.anon_2_images_created_at DESC, anon_1.anon_2_images_id DESC",
    "db_id": "csail_stata_glance",
    "join_keys": [
      [
        "IMAGES.ID",
        "IMAGE_MEMBERS.IMAGE_ID"
      ]
    ]
  },
  {
    "question": "Provide information (including security groups, system medata, info caches, and metadata) about the instance d052d786-9b26-4439-ae6b-32a0505fdc12 under the project bfd50153a2e9476f93e33e30e922cd06.",
    "sql": "SELECT anon_1.instances_created_at AS anon_1_instances_created_at, anon_1.instances_updated_at AS anon_1_instances_updated_at, anon_1.instances_deleted_at AS anon_1_instances_deleted_at, anon_1.instances_deleted AS anon_1_instances_deleted, anon_1.instances_id AS anon_1_instances_id, anon_1.instances_user_id AS anon_1_instances_user_id, anon_1.instances_project_id AS anon_1_instances_project_id, anon_1.instances_image_ref AS anon_1_instances_image_ref, anon_1.instances_kernel_id AS anon_1_instances_kernel_id, anon_1.instances_ramdisk_id AS anon_1_instances_ramdisk_id, anon_1.instances_hostname AS anon_1_instances_hostname, anon_1.instances_launch_index AS anon_1_instances_launch_index, anon_1.instances_key_name AS anon_1_instances_key_name, anon_1.instances_key_data AS anon_1_instances_key_data, anon_1.instances_power_state AS anon_1_instances_power_state, anon_1.instances_vm_state AS anon_1_instances_vm_state, anon_1.instances_task_state AS anon_1_instances_task_state, anon_1.instances_memory_mb AS anon_1_instances_memory_mb, anon_1.instances_vcpus AS anon_1_instances_vcpus, anon_1.instances_root_gb AS anon_1_instances_root_gb, anon_1.instances_ephemeral_gb AS anon_1_instances_ephemeral_gb, anon_1.instances_ephemeral_key_uuid AS anon_1_instances_ephemeral_key_uuid, anon_1.instances_host AS anon_1_instances_host, anon_1.instances_node AS anon_1_instances_node, anon_1.instances_instance_type_id AS anon_1_instances_instance_type_id, anon_1.instances_user_data AS anon_1_instances_user_data, anon_1.instances_reservation_id AS anon_1_instances_reservation_id, anon_1.instances_launched_at AS anon_1_instances_launched_at, anon_1.instances_terminated_at AS anon_1_instances_terminated_at, anon_1.instances_availability_zone AS anon_1_instances_availability_zone, anon_1.instances_display_name AS anon_1_instances_display_name, anon_1.instances_display_description AS anon_1_instances_display_description, anon_1.instances_launched_on AS anon_1_instances_launched_on, anon_1.instances_locked AS anon_1_instances_locked, anon_1.instances_locked_by AS anon_1_instances_locked_by, anon_1.instances_os_type AS anon_1_instances_os_type, anon_1.instances_architecture AS anon_1_instances_architecture, anon_1.instances_vm_mode AS anon_1_instances_vm_mode, anon_1.instances_uuid AS anon_1_instances_uuid, anon_1.instances_root_device_name AS anon_1_instances_root_device_name, anon_1.instances_default_ephemeral_device AS anon_1_instances_default_ephemeral_device, anon_1.instances_default_swap_device AS anon_1_instances_default_swap_device, anon_1.instances_config_drive AS anon_1_instances_config_drive, anon_1.instances_access_ip_v4 AS anon_1_instances_access_ip_v4, anon_1.instances_access_ip_v6 AS anon_1_instances_access_ip_v6, anon_1.instances_auto_disk_config AS anon_1_instances_auto_disk_config, anon_1.instances_progress AS anon_1_instances_progress, anon_1.instances_shutdown_terminate AS anon_1_instances_shutdown_terminate, anon_1.instances_disable_terminate AS anon_1_instances_disable_terminate, anon_1.instances_cell_name AS anon_1_instances_cell_name, anon_1.instances_internal_id AS anon_1_instances_internal_id, anon_1.instances_cleaned AS anon_1_instances_cleaned, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id, security_group_rules_1.created_at AS security_group_rules_1_created_at, security_group_rules_1.updated_at AS security_group_rules_1_updated_at, security_group_rules_1.deleted_at AS security_group_rules_1_deleted_at, security_group_rules_1.deleted AS security_group_rules_1_deleted, security_group_rules_1.id AS security_group_rules_1_id, security_group_rules_1.parent_group_id AS security_group_rules_1_parent_group_id, security_group_rules_1.protocol AS security_group_rules_1_protocol, security_group_rules_1.from_port AS security_group_rules_1_from_port, security_group_rules_1.to_port AS security_group_rules_1_to_port, security_group_rules_1.cidr AS security_group_rules_1_cidr, security_group_rules_1.group_id AS security_group_rules_1_group_id, instance_system_metadata_1.created_at AS instance_system_metadata_1_created_at, instance_system_metadata_1.updated_at AS instance_system_metadata_1_updated_at, instance_system_metadata_1.deleted_at AS instance_system_metadata_1_deleted_at, instance_system_metadata_1.deleted AS instance_system_metadata_1_deleted, instance_system_metadata_1.id AS instance_system_metadata_1_id, instance_system_metadata_1.`key` AS instance_system_metadata_1_key, instance_system_metadata_1.value AS instance_system_metadata_1_value, instance_system_metadata_1.instance_uuid AS instance_system_metadata_1_instance_uuid, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, instance_metadata_1.created_at AS instance_metadata_1_created_at, instance_metadata_1.updated_at AS instance_metadata_1_updated_at, instance_metadata_1.deleted_at AS instance_metadata_1_deleted_at, instance_metadata_1.deleted AS instance_metadata_1_deleted, instance_metadata_1.id AS instance_metadata_1_id, instance_metadata_1.`key` AS instance_metadata_1_key, instance_metadata_1.value AS instance_metadata_1_value, instance_metadata_1.instance_uuid AS instance_metadata_1_instance_uuid\nFROM (SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned\nFROM instances\nWHERE instances.deleted = 0 AND instances.project_id = 'bfd50153a2e9476f93e33e30e922cd06' AND instances.uuid = 'd052d786-9b26-4439-ae6b-32a0505fdc12'\nLIMIT 1) AS anon_1 LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = anon_1.instances_uuid AND anon_1.instances_deleted = 0 LEFT OUTER JOIN security_group_rules AS security_group_rules_1 ON security_group_rules_1.parent_group_id = security_groups_1.id AND security_group_rules_1.deleted = 0 LEFT OUTER JOIN instance_system_metadata AS instance_system_metadata_1 ON anon_1.instances_uuid = instance_system_metadata_1.instance_uuid LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = anon_1.instances_uuid LEFT OUTER JOIN instance_metadata AS instance_metadata_1 ON instance_metadata_1.instance_uuid = anon_1.instances_uuid AND instance_metadata_1.deleted = 0",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "SECURITY_GROUP_RULES.PARENT_GROUP_ID",
        "SECURITY_GROUPS.ID"
      ]
    ]
  },
  {
    "question": "Provide information about all physical hosts.",
    "sql": "SELECT cn.created_at, cn.updated_at, cn.deleted_at, cn.deleted, cn.id, cn.service_id, cn.host, cn.uuid, cn.vcpus, cn.memory_mb, cn.local_gb, cn.vcpus_used, cn.memory_mb_used, cn.local_gb_used, cn.hypervisor_type, cn.hypervisor_version, cn.hypervisor_hostname, cn.free_ram_mb, cn.free_disk_gb, cn.current_workload, cn.running_vms, cn.cpu_info, cn.disk_available_least, cn.host_ip, cn.supported_instances, cn.metrics, cn.pci_stats, cn.extra_resources, cn.stats, cn.numa_topology, cn.ram_allocation_ratio, cn.cpu_allocation_ratio, cn.disk_allocation_ratio, ram_inv.total AS inv_memory_mb, ram_inv.reserved AS inv_memory_mb_reserved, ram_inv.allocation_ratio AS inv_ram_allocation_ratio, ram_usage.used AS inv_memory_mb_used, cpu_inv.total AS inv_vcpus, cpu_inv.allocation_ratio AS inv_cpu_allocation_ratio, cpu_usage.used AS inv_vcpus_used, disk_inv.total AS inv_local_gb, disk_inv.reserved AS inv_local_gb_reserved, disk_inv.allocation_ratio AS inv_disk_allocation_ratio, disk_usage.used AS inv_local_gb_used\nFROM compute_nodes AS cn LEFT OUTER JOIN resource_providers AS rp ON cn.uuid = rp.uuid LEFT OUTER JOIN inventories AS ram_inv ON rp.id = ram_inv.resource_provider_id AND ram_inv.resource_class_id = 1 LEFT OUTER JOIN (SELECT allocations.resource_provider_id AS resource_provider_id, sum(allocations.used) AS used\nFROM allocations\nWHERE allocations.resource_class_id = 1 GROUP BY allocations.resource_provider_id) AS ram_usage ON ram_inv.resource_provider_id = ram_usage.resource_provider_id LEFT OUTER JOIN inventories AS cpu_inv ON rp.id = cpu_inv.resource_provider_id AND cpu_inv.resource_class_id = 0 LEFT OUTER JOIN (SELECT allocations.resource_provider_id AS resource_provider_id, sum(allocations.used) AS used\nFROM allocations\nWHERE allocations.resource_class_id = 0 GROUP BY allocations.resource_provider_id) AS cpu_usage ON cpu_inv.resource_provider_id = cpu_usage.resource_provider_id LEFT OUTER JOIN inventories AS disk_inv ON rp.id = disk_inv.resource_provider_id AND disk_inv.resource_class_id = 2 LEFT OUTER JOIN (SELECT allocations.resource_provider_id AS resource_provider_id, sum(allocations.used) AS used\nFROM allocations\nWHERE allocations.resource_class_id = 2 GROUP BY allocations.resource_provider_id) AS disk_usage ON disk_inv.resource_provider_id = disk_usage.resource_provider_id\nWHERE cn.deleted = 0",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "RESOURCE_PROVIDERS.UUID",
        "COMPUTE_NODES.UUID"
      ],
      [
        "RESOURCE_PROVIDERS.ID",
        "INVENTORIES.RESOURCE_PROVIDER_ID"
      ],
      [
        "RESOURCE_PROVIDERS.ID",
        "INVENTORIES.RESOURCE_PROVIDER_ID"
      ],
      [
        "INVENTORIES.RESOURCE_PROVIDER_ID",
        "RESOURCE_PROVIDERS.ID"
      ]
    ]
  },
  {
    "question": "Provide information about the 1000 latest volumes under the project bfd50153a2e9476f93e33e30e922cd06.",
    "sql": "SELECT anon_1.volumes_created_at AS anon_1_volumes_created_at, anon_1.volumes_updated_at AS anon_1_volumes_updated_at, anon_1.volumes_deleted_at AS anon_1_volumes_deleted_at, anon_1.volumes_deleted AS anon_1_volumes_deleted, anon_1.volumes_id AS anon_1_volumes_id, anon_1.volumes__name_id AS anon_1_volumes__name_id, anon_1.volumes_ec2_id AS anon_1_volumes_ec2_id, anon_1.volumes_user_id AS anon_1_volumes_user_id, anon_1.volumes_project_id AS anon_1_volumes_project_id, anon_1.volumes_snapshot_id AS anon_1_volumes_snapshot_id, anon_1.volumes_host AS anon_1_volumes_host, anon_1.volumes_size AS anon_1_volumes_size, anon_1.volumes_availability_zone AS anon_1_volumes_availability_zone, anon_1.volumes_status AS anon_1_volumes_status, anon_1.volumes_attach_status AS anon_1_volumes_attach_status, anon_1.volumes_migration_status AS anon_1_volumes_migration_status, anon_1.volumes_scheduled_at AS anon_1_volumes_scheduled_at, anon_1.volumes_launched_at AS anon_1_volumes_launched_at, anon_1.volumes_terminated_at AS anon_1_volumes_terminated_at, anon_1.volumes_display_name AS anon_1_volumes_display_name, anon_1.volumes_display_description AS anon_1_volumes_display_description, anon_1.volumes_provider_location AS anon_1_volumes_provider_location, anon_1.volumes_provider_auth AS anon_1_volumes_provider_auth, anon_1.volumes_provider_geometry AS anon_1_volumes_provider_geometry, anon_1.volumes_provider_id AS anon_1_volumes_provider_id, anon_1.volumes_volume_type_id AS anon_1_volumes_volume_type_id, anon_1.volumes_source_volid AS anon_1_volumes_source_volid, anon_1.volumes_encryption_key_id AS anon_1_volumes_encryption_key_id, anon_1.volumes_consistencygroup_id AS anon_1_volumes_consistencygroup_id, anon_1.volumes_bootable AS anon_1_volumes_bootable, anon_1.volumes_multiattach AS anon_1_volumes_multiattach, anon_1.volumes_replication_status AS anon_1_volumes_replication_status, anon_1.volumes_replication_extended_status AS anon_1_volumes_replication_extended_status, anon_1.volumes_replication_driver_data AS anon_1_volumes_replication_driver_data, anon_1.volumes_previous_status AS anon_1_volumes_previous_status, consistencygroups_1.created_at AS consistencygroups_1_created_at, consistencygroups_1.updated_at AS consistencygroups_1_updated_at, consistencygroups_1.deleted_at AS consistencygroups_1_deleted_at, consistencygroups_1.deleted AS consistencygroups_1_deleted, consistencygroups_1.id AS consistencygroups_1_id, consistencygroups_1.user_id AS consistencygroups_1_user_id, consistencygroups_1.project_id AS consistencygroups_1_project_id, consistencygroups_1.host AS consistencygroups_1_host, consistencygroups_1.availability_zone AS consistencygroups_1_availability_zone, consistencygroups_1.name AS consistencygroups_1_name, consistencygroups_1.description AS consistencygroups_1_description, consistencygroups_1.volume_type_id AS consistencygroups_1_volume_type_id, consistencygroups_1.status AS consistencygroups_1_status, consistencygroups_1.cgsnapshot_id AS consistencygroups_1_cgsnapshot_id, consistencygroups_1.source_cgid AS consistencygroups_1_source_cgid, volume_metadata_1.created_at AS volume_metadata_1_created_at, volume_metadata_1.updated_at AS volume_metadata_1_updated_at, volume_metadata_1.deleted_at AS volume_metadata_1_deleted_at, volume_metadata_1.deleted AS volume_metadata_1_deleted, volume_metadata_1.id AS volume_metadata_1_id, volume_metadata_1.`key` AS volume_metadata_1_key, volume_metadata_1.value AS volume_metadata_1_value, volume_metadata_1.volume_id AS volume_metadata_1_volume_id, volume_admin_metadata_1.created_at AS volume_admin_metadata_1_created_at, volume_admin_metadata_1.updated_at AS volume_admin_metadata_1_updated_at, volume_admin_metadata_1.deleted_at AS volume_admin_metadata_1_deleted_at, volume_admin_metadata_1.deleted AS volume_admin_metadata_1_deleted, volume_admin_metadata_1.id AS volume_admin_metadata_1_id, volume_admin_metadata_1.`key` AS volume_admin_metadata_1_key, volume_admin_metadata_1.value AS volume_admin_metadata_1_value, volume_admin_metadata_1.volume_id AS volume_admin_metadata_1_volume_id, volume_attachment_1.created_at AS volume_attachment_1_created_at, volume_attachment_1.updated_at AS volume_attachment_1_updated_at, volume_attachment_1.deleted_at AS volume_attachment_1_deleted_at, volume_attachment_1.deleted AS volume_attachment_1_deleted, volume_attachment_1.id AS volume_attachment_1_id, volume_attachment_1.volume_id AS volume_attachment_1_volume_id, volume_attachment_1.instance_uuid AS volume_attachment_1_instance_uuid, volume_attachment_1.attached_host AS volume_attachment_1_attached_host, volume_attachment_1.mountpoint AS volume_attachment_1_mountpoint, volume_attachment_1.attach_time AS volume_attachment_1_attach_time, volume_attachment_1.detach_time AS volume_attachment_1_detach_time, volume_attachment_1.attach_status AS volume_attachment_1_attach_status, volume_attachment_1.attach_mode AS volume_attachment_1_attach_mode, volume_types_1.created_at AS volume_types_1_created_at, volume_types_1.updated_at AS volume_types_1_updated_at, volume_types_1.deleted_at AS volume_types_1_deleted_at, volume_types_1.deleted AS volume_types_1_deleted, volume_types_1.id AS volume_types_1_id, volume_types_1.name AS volume_types_1_name, volume_types_1.description AS volume_types_1_description, volume_types_1.qos_specs_id AS volume_types_1_qos_specs_id, volume_types_1.is_public AS volume_types_1_is_public\nFROM (SELECT volumes.created_at AS volumes_created_at, volumes.updated_at AS volumes_updated_at, volumes.deleted_at AS volumes_deleted_at, volumes.deleted AS volumes_deleted, volumes.id AS volumes_id, volumes._name_id AS volumes__name_id, volumes.ec2_id AS volumes_ec2_id, volumes.user_id AS volumes_user_id, volumes.project_id AS volumes_project_id, volumes.snapshot_id AS volumes_snapshot_id, volumes.host AS volumes_host, volumes.size AS volumes_size, volumes.availability_zone AS volumes_availability_zone, volumes.status AS volumes_status, volumes.attach_status AS volumes_attach_status, volumes.migration_status AS volumes_migration_status, volumes.scheduled_at AS volumes_scheduled_at, volumes.launched_at AS volumes_launched_at, volumes.terminated_at AS volumes_terminated_at, volumes.display_name AS volumes_display_name, volumes.display_description AS volumes_display_description, volumes.provider_location AS volumes_provider_location, volumes.provider_auth AS volumes_provider_auth, volumes.provider_geometry AS volumes_provider_geometry, volumes.provider_id AS volumes_provider_id, volumes.volume_type_id AS volumes_volume_type_id, volumes.source_volid AS volumes_source_volid, volumes.encryption_key_id AS volumes_encryption_key_id, volumes.consistencygroup_id AS volumes_consistencygroup_id, volumes.bootable AS volumes_bootable, volumes.multiattach AS volumes_multiattach, volumes.replication_status AS volumes_replication_status, volumes.replication_extended_status AS volumes_replication_extended_status, volumes.replication_driver_data AS volumes_replication_driver_data, volumes.previous_status AS volumes_previous_status\nFROM volumes\nWHERE volumes.deleted = false AND (volumes.migration_status IS NULL OR (volumes.migration_status NOT LIKE 'target:%')) AND volumes.project_id = 'bfd50153a2e9476f93e33e30e922cd06' ORDER BY volumes.created_at DESC, volumes.id DESC\nLIMIT 1000) AS anon_1 LEFT OUTER JOIN consistencygroups AS consistencygroups_1 ON anon_1.volumes_consistencygroup_id = consistencygroups_1.id LEFT OUTER JOIN volume_metadata AS volume_metadata_1 ON volume_metadata_1.volume_id = anon_1.volumes_id AND volume_metadata_1.deleted = false LEFT OUTER JOIN volume_admin_metadata AS volume_admin_metadata_1 ON volume_admin_metadata_1.volume_id = anon_1.volumes_id AND volume_admin_metadata_1.deleted = false LEFT OUTER JOIN volume_attachment AS volume_attachment_1 ON volume_attachment_1.volume_id = anon_1.volumes_id AND volume_attachment_1.deleted = false LEFT OUTER JOIN volume_types AS volume_types_1 ON anon_1.volumes_volume_type_id = volume_types_1.id AND volume_types_1.deleted = false ORDER BY anon_1.volumes_created_at DESC, anon_1.volumes_id DESC",
    "db_id": "csail_stata_cinder",
    "join_keys": []
  },
  {
    "question": "Provide information (including security groups, info caches, extra data, and metadata) about the 3000 latest instances under the project bfd50153a2e9476f93e33e30e922cd06 with light in the name.",
    "sql": "SELECT anon_1.instances_created_at AS anon_1_instances_created_at, anon_1.instances_updated_at AS anon_1_instances_updated_at, anon_1.instances_deleted_at AS anon_1_instances_deleted_at, anon_1.instances_deleted AS anon_1_instances_deleted, anon_1.instances_id AS anon_1_instances_id, anon_1.instances_user_id AS anon_1_instances_user_id, anon_1.instances_project_id AS anon_1_instances_project_id, anon_1.instances_image_ref AS anon_1_instances_image_ref, anon_1.instances_kernel_id AS anon_1_instances_kernel_id, anon_1.instances_ramdisk_id AS anon_1_instances_ramdisk_id, anon_1.instances_hostname AS anon_1_instances_hostname, anon_1.instances_launch_index AS anon_1_instances_launch_index, anon_1.instances_key_name AS anon_1_instances_key_name, anon_1.instances_key_data AS anon_1_instances_key_data, anon_1.instances_power_state AS anon_1_instances_power_state, anon_1.instances_vm_state AS anon_1_instances_vm_state, anon_1.instances_task_state AS anon_1_instances_task_state, anon_1.instances_memory_mb AS anon_1_instances_memory_mb, anon_1.instances_vcpus AS anon_1_instances_vcpus, anon_1.instances_root_gb AS anon_1_instances_root_gb, anon_1.instances_ephemeral_gb AS anon_1_instances_ephemeral_gb, anon_1.instances_ephemeral_key_uuid AS anon_1_instances_ephemeral_key_uuid, anon_1.instances_host AS anon_1_instances_host, anon_1.instances_node AS anon_1_instances_node, anon_1.instances_instance_type_id AS anon_1_instances_instance_type_id, anon_1.instances_user_data AS anon_1_instances_user_data, anon_1.instances_reservation_id AS anon_1_instances_reservation_id, anon_1.instances_launched_at AS anon_1_instances_launched_at, anon_1.instances_terminated_at AS anon_1_instances_terminated_at, anon_1.instances_availability_zone AS anon_1_instances_availability_zone, anon_1.instances_display_name AS anon_1_instances_display_name, anon_1.instances_display_description AS anon_1_instances_display_description, anon_1.instances_launched_on AS anon_1_instances_launched_on, anon_1.instances_locked AS anon_1_instances_locked, anon_1.instances_locked_by AS anon_1_instances_locked_by, anon_1.instances_os_type AS anon_1_instances_os_type, anon_1.instances_architecture AS anon_1_instances_architecture, anon_1.instances_vm_mode AS anon_1_instances_vm_mode, anon_1.instances_uuid AS anon_1_instances_uuid, anon_1.instances_root_device_name AS anon_1_instances_root_device_name, anon_1.instances_default_ephemeral_device AS anon_1_instances_default_ephemeral_device, anon_1.instances_default_swap_device AS anon_1_instances_default_swap_device, anon_1.instances_config_drive AS anon_1_instances_config_drive, anon_1.instances_access_ip_v4 AS anon_1_instances_access_ip_v4, anon_1.instances_access_ip_v6 AS anon_1_instances_access_ip_v6, anon_1.instances_auto_disk_config AS anon_1_instances_auto_disk_config, anon_1.instances_progress AS anon_1_instances_progress, anon_1.instances_shutdown_terminate AS anon_1_instances_shutdown_terminate, anon_1.instances_disable_terminate AS anon_1_instances_disable_terminate, anon_1.instances_cell_name AS anon_1_instances_cell_name, anon_1.instances_internal_id AS anon_1_instances_internal_id, anon_1.instances_cleaned AS anon_1_instances_cleaned, security_groups_1.created_at AS security_groups_1_created_at, security_groups_1.updated_at AS security_groups_1_updated_at, security_groups_1.deleted_at AS security_groups_1_deleted_at, security_groups_1.deleted AS security_groups_1_deleted, security_groups_1.id AS security_groups_1_id, security_groups_1.name AS security_groups_1_name, security_groups_1.description AS security_groups_1_description, security_groups_1.user_id AS security_groups_1_user_id, security_groups_1.project_id AS security_groups_1_project_id, instance_info_caches_1.created_at AS instance_info_caches_1_created_at, instance_info_caches_1.updated_at AS instance_info_caches_1_updated_at, instance_info_caches_1.deleted_at AS instance_info_caches_1_deleted_at, instance_info_caches_1.deleted AS instance_info_caches_1_deleted, instance_info_caches_1.id AS instance_info_caches_1_id, instance_info_caches_1.network_info AS instance_info_caches_1_network_info, instance_info_caches_1.instance_uuid AS instance_info_caches_1_instance_uuid, instance_extra_1.flavor AS instance_extra_1_flavor, instance_extra_1.created_at AS instance_extra_1_created_at, instance_extra_1.updated_at AS instance_extra_1_updated_at, instance_extra_1.deleted_at AS instance_extra_1_deleted_at, instance_extra_1.deleted AS instance_extra_1_deleted, instance_extra_1.id AS instance_extra_1_id, instance_extra_1.instance_uuid AS instance_extra_1_instance_uuid, instance_metadata_1.created_at AS instance_metadata_1_created_at, instance_metadata_1.updated_at AS instance_metadata_1_updated_at, instance_metadata_1.deleted_at AS instance_metadata_1_deleted_at, instance_metadata_1.deleted AS instance_metadata_1_deleted, instance_metadata_1.id AS instance_metadata_1_id, instance_metadata_1.`key` AS instance_metadata_1_key, instance_metadata_1.value AS instance_metadata_1_value, instance_metadata_1.instance_uuid AS instance_metadata_1_instance_uuid\nFROM (SELECT instances.created_at AS instances_created_at, instances.updated_at AS instances_updated_at, instances.deleted_at AS instances_deleted_at, instances.deleted AS instances_deleted, instances.id AS instances_id, instances.user_id AS instances_user_id, instances.project_id AS instances_project_id, instances.image_ref AS instances_image_ref, instances.kernel_id AS instances_kernel_id, instances.ramdisk_id AS instances_ramdisk_id, instances.hostname AS instances_hostname, instances.launch_index AS instances_launch_index, instances.key_name AS instances_key_name, instances.key_data AS instances_key_data, instances.power_state AS instances_power_state, instances.vm_state AS instances_vm_state, instances.task_state AS instances_task_state, instances.memory_mb AS instances_memory_mb, instances.vcpus AS instances_vcpus, instances.root_gb AS instances_root_gb, instances.ephemeral_gb AS instances_ephemeral_gb, instances.ephemeral_key_uuid AS instances_ephemeral_key_uuid, instances.host AS instances_host, instances.node AS instances_node, instances.instance_type_id AS instances_instance_type_id, instances.user_data AS instances_user_data, instances.reservation_id AS instances_reservation_id, instances.launched_at AS instances_launched_at, instances.terminated_at AS instances_terminated_at, instances.availability_zone AS instances_availability_zone, instances.display_name AS instances_display_name, instances.display_description AS instances_display_description, instances.launched_on AS instances_launched_on, instances.locked AS instances_locked, instances.locked_by AS instances_locked_by, instances.os_type AS instances_os_type, instances.architecture AS instances_architecture, instances.vm_mode AS instances_vm_mode, instances.uuid AS instances_uuid, instances.root_device_name AS instances_root_device_name, instances.default_ephemeral_device AS instances_default_ephemeral_device, instances.default_swap_device AS instances_default_swap_device, instances.config_drive AS instances_config_drive, instances.access_ip_v4 AS instances_access_ip_v4, instances.access_ip_v6 AS instances_access_ip_v6, instances.auto_disk_config AS instances_auto_disk_config, instances.progress AS instances_progress, instances.shutdown_terminate AS instances_shutdown_terminate, instances.disable_terminate AS instances_disable_terminate, instances.cell_name AS instances_cell_name, instances.internal_id AS instances_internal_id, instances.cleaned AS instances_cleaned\nFROM instances\nWHERE instances.deleted = 0 AND (instances.vm_state != 'soft-delete' OR instances.vm_state IS NULL) AND instances.project_id = 'bfd50153a2e9476f93e33e30e922cd06' AND (instances.display_name REGEXP 'light') ORDER BY instances.created_at DESC, instances.id DESC\nLIMIT 3000) AS anon_1 LEFT OUTER JOIN (security_group_instance_association AS security_group_instance_association_1 INNER JOIN security_groups AS security_groups_1 ON security_groups_1.id = security_group_instance_association_1.security_group_id AND security_group_instance_association_1.deleted = 0 AND security_groups_1.deleted = 0) ON security_group_instance_association_1.instance_uuid = anon_1.instances_uuid AND anon_1.instances_deleted = 0 LEFT OUTER JOIN instance_info_caches AS instance_info_caches_1 ON instance_info_caches_1.instance_uuid = anon_1.instances_uuid LEFT OUTER JOIN instance_extra AS instance_extra_1 ON instance_extra_1.instance_uuid = anon_1.instances_uuid LEFT OUTER JOIN instance_metadata AS instance_metadata_1 ON instance_metadata_1.instance_uuid = anon_1.instances_uuid AND instance_metadata_1.deleted = 0 ORDER BY anon_1.instances_created_at DESC, anon_1.instances_id DESC",
    "db_id": "csail_stata_nova",
    "join_keys": [
      [
        "SECURITY_GROUP_INSTANCE_ASSOCIATION.SECURITY_GROUP_ID",
        "SECURITY_GROUPS.ID"
      ]
    ]
  },
  {
    "question": "Provide information about networks under the project 8333a6a4e59343eda8957cd61da9f0e6.",
    "sql": "SELECT networks.tenant_id AS networks_tenant_id, networks.id AS networks_id, networks.name AS networks_name, networks.status AS networks_status, networks.admin_state_up AS networks_admin_state_up, networks.mtu AS networks_mtu, networks.vlan_transparent AS networks_vlan_transparent, networks.availability_zone_hints AS networks_availability_zone_hints, networks.standard_attr_id AS networks_standard_attr_id, agents_1.id AS agents_1_id, agents_1.agent_type AS agents_1_agent_type, agents_1.`binary` AS agents_1_binary, agents_1.topic AS agents_1_topic, agents_1.host AS agents_1_host, agents_1.availability_zone AS agents_1_availability_zone, agents_1.admin_state_up AS agents_1_admin_state_up, agents_1.created_at AS agents_1_created_at, agents_1.started_at AS agents_1_started_at, agents_1.heartbeat_timestamp AS agents_1_heartbeat_timestamp, agents_1.description AS agents_1_description, agents_1.configurations AS agents_1_configurations, agents_1.resource_versions AS agents_1_resource_versions, agents_1.`load` AS agents_1_load, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, externalnetworks_1.network_id AS externalnetworks_1_network_id, externalnetworks_1.is_default AS externalnetworks_1_is_default, qos_network_policy_bindings_1.policy_id AS qos_network_policy_bindings_1_policy_id, qos_network_policy_bindings_1.network_id AS qos_network_policy_bindings_1_network_id, networksecuritybindings_1.network_id AS networksecuritybindings_1_network_id, networksecuritybindings_1.port_security_enabled AS networksecuritybindings_1_port_security_enabled, networkdnsdomains_1.network_id AS networkdnsdomains_1_network_id, networkdnsdomains_1.dns_domain AS networkdnsdomains_1_dns_domain FROM networks LEFT OUTER JOIN externalnetworks ON networks.id = externalnetworks.network_id LEFT OUTER JOIN (networkdhcpagentbindings AS networkdhcpagentbindings_1 INNER JOIN agents AS agents_1 ON agents_1.id = networkdhcpagentbindings_1.dhcp_agent_id) ON networks.id = networkdhcpagentbindings_1.network_id LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = networks.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN externalnetworks AS externalnetworks_1 ON networks.id = externalnetworks_1.network_id LEFT OUTER JOIN qos_network_policy_bindings AS qos_network_policy_bindings_1 ON networks.id = qos_network_policy_bindings_1.network_id LEFT OUTER JOIN networksecuritybindings AS networksecuritybindings_1 ON networks.id = networksecuritybindings_1.network_id LEFT OUTER JOIN networkdnsdomains AS networkdnsdomains_1 ON networks.id = networkdnsdomains_1.network_id WHERE networks.tenant_id IN ('8333a6a4e59343eda8957cd61da9f0e6') AND networks.id NOT IN (SELECT networkrbacs.object_id AS networkrbacs_object_id FROM networkrbacs WHERE networkrbacs.action = 'access_as_shared' AND (networkrbacs.target_tenant = '*' OR networkrbacs.target_tenant = '9f13bf11e06e4d81b44c8c3e62d4362b'))",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "NETWORKS.ID",
        "EXTERNALNETWORKS.NETWORK_ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "NETWORKS.STANDARD_ATTR_ID"
      ],
      [
        "TAGS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ],
      [
        "EXTERNALNETWORKS.NETWORK_ID",
        "NETWORKS.ID"
      ],
      [
        "NETWORKS.ID",
        "QOS_NETWORK_POLICY_BINDINGS.NETWORK_ID"
      ],
      [
        "NETWORKSECURITYBINDINGS.NETWORK_ID",
        "NETWORKS.ID"
      ],
      [
        "NETWORKS.ID",
        "NETWORKDNSDOMAINS.NETWORK_ID"
      ]
    ]
  },
  {
    "question": "Provide information about the 1000 latest volumes under the project 8083447923734c679b261219b815d3bc.",
    "sql": "SELECT anon_1.volumes_created_at AS anon_1_volumes_created_at, anon_1.volumes_updated_at AS anon_1_volumes_updated_at, anon_1.volumes_deleted_at AS anon_1_volumes_deleted_at, anon_1.volumes_deleted AS anon_1_volumes_deleted, anon_1.volumes_id AS anon_1_volumes_id, anon_1.volumes__name_id AS anon_1_volumes__name_id, anon_1.volumes_ec2_id AS anon_1_volumes_ec2_id, anon_1.volumes_user_id AS anon_1_volumes_user_id, anon_1.volumes_project_id AS anon_1_volumes_project_id, anon_1.volumes_snapshot_id AS anon_1_volumes_snapshot_id, anon_1.volumes_host AS anon_1_volumes_host, anon_1.volumes_size AS anon_1_volumes_size, anon_1.volumes_availability_zone AS anon_1_volumes_availability_zone, anon_1.volumes_status AS anon_1_volumes_status, anon_1.volumes_attach_status AS anon_1_volumes_attach_status, anon_1.volumes_migration_status AS anon_1_volumes_migration_status, anon_1.volumes_scheduled_at AS anon_1_volumes_scheduled_at, anon_1.volumes_launched_at AS anon_1_volumes_launched_at, anon_1.volumes_terminated_at AS anon_1_volumes_terminated_at, anon_1.volumes_display_name AS anon_1_volumes_display_name, anon_1.volumes_display_description AS anon_1_volumes_display_description, anon_1.volumes_provider_location AS anon_1_volumes_provider_location, anon_1.volumes_provider_auth AS anon_1_volumes_provider_auth, anon_1.volumes_provider_geometry AS anon_1_volumes_provider_geometry, anon_1.volumes_provider_id AS anon_1_volumes_provider_id, anon_1.volumes_volume_type_id AS anon_1_volumes_volume_type_id, anon_1.volumes_source_volid AS anon_1_volumes_source_volid, anon_1.volumes_encryption_key_id AS anon_1_volumes_encryption_key_id, anon_1.volumes_consistencygroup_id AS anon_1_volumes_consistencygroup_id, anon_1.volumes_bootable AS anon_1_volumes_bootable, anon_1.volumes_multiattach AS anon_1_volumes_multiattach, anon_1.volumes_replication_status AS anon_1_volumes_replication_status, anon_1.volumes_replication_extended_status AS anon_1_volumes_replication_extended_status, anon_1.volumes_replication_driver_data AS anon_1_volumes_replication_driver_data, anon_1.volumes_previous_status AS anon_1_volumes_previous_status, consistencygroups_1.created_at AS consistencygroups_1_created_at, consistencygroups_1.updated_at AS consistencygroups_1_updated_at, consistencygroups_1.deleted_at AS consistencygroups_1_deleted_at, consistencygroups_1.deleted AS consistencygroups_1_deleted, consistencygroups_1.id AS consistencygroups_1_id, consistencygroups_1.user_id AS consistencygroups_1_user_id, consistencygroups_1.project_id AS consistencygroups_1_project_id, consistencygroups_1.host AS consistencygroups_1_host, consistencygroups_1.availability_zone AS consistencygroups_1_availability_zone, consistencygroups_1.name AS consistencygroups_1_name, consistencygroups_1.description AS consistencygroups_1_description, consistencygroups_1.volume_type_id AS consistencygroups_1_volume_type_id, consistencygroups_1.status AS consistencygroups_1_status, consistencygroups_1.cgsnapshot_id AS consistencygroups_1_cgsnapshot_id, consistencygroups_1.source_cgid AS consistencygroups_1_source_cgid, volume_metadata_1.created_at AS volume_metadata_1_created_at, volume_metadata_1.updated_at AS volume_metadata_1_updated_at, volume_metadata_1.deleted_at AS volume_metadata_1_deleted_at, volume_metadata_1.deleted AS volume_metadata_1_deleted, volume_metadata_1.id AS volume_metadata_1_id, volume_metadata_1.`key` AS volume_metadata_1_key, volume_metadata_1.value AS volume_metadata_1_value, volume_metadata_1.volume_id AS volume_metadata_1_volume_id, volume_attachment_1.created_at AS volume_attachment_1_created_at, volume_attachment_1.updated_at AS volume_attachment_1_updated_at, volume_attachment_1.deleted_at AS volume_attachment_1_deleted_at, volume_attachment_1.deleted AS volume_attachment_1_deleted, volume_attachment_1.id AS volume_attachment_1_id, volume_attachment_1.volume_id AS volume_attachment_1_volume_id, volume_attachment_1.instance_uuid AS volume_attachment_1_instance_uuid, volume_attachment_1.attached_host AS volume_attachment_1_attached_host, volume_attachment_1.mountpoint AS volume_attachment_1_mountpoint, volume_attachment_1.attach_time AS volume_attachment_1_attach_time, volume_attachment_1.detach_time AS volume_attachment_1_detach_time, volume_attachment_1.attach_status AS volume_attachment_1_attach_status, volume_attachment_1.attach_mode AS volume_attachment_1_attach_mode, volume_admin_metadata_1.created_at AS volume_admin_metadata_1_created_at, volume_admin_metadata_1.updated_at AS volume_admin_metadata_1_updated_at, volume_admin_metadata_1.deleted_at AS volume_admin_metadata_1_deleted_at, volume_admin_metadata_1.deleted AS volume_admin_metadata_1_deleted, volume_admin_metadata_1.id AS volume_admin_metadata_1_id, volume_admin_metadata_1.`key` AS volume_admin_metadata_1_key, volume_admin_metadata_1.value AS volume_admin_metadata_1_value, volume_admin_metadata_1.volume_id AS volume_admin_metadata_1_volume_id, volume_types_1.created_at AS volume_types_1_created_at, volume_types_1.updated_at AS volume_types_1_updated_at, volume_types_1.deleted_at AS volume_types_1_deleted_at, volume_types_1.deleted AS volume_types_1_deleted, volume_types_1.id AS volume_types_1_id, volume_types_1.name AS volume_types_1_name, volume_types_1.description AS volume_types_1_description, volume_types_1.qos_specs_id AS volume_types_1_qos_specs_id, volume_types_1.is_public AS volume_types_1_is_public FROM (SELECT volumes.created_at AS volumes_created_at, volumes.updated_at AS volumes_updated_at, volumes.deleted_at AS volumes_deleted_at, volumes.deleted AS volumes_deleted, volumes.id AS volumes_id, volumes._name_id AS volumes__name_id, volumes.ec2_id AS volumes_ec2_id, volumes.user_id AS volumes_user_id, volumes.project_id AS volumes_project_id, volumes.snapshot_id AS volumes_snapshot_id, volumes.host AS volumes_host, volumes.size AS volumes_size, volumes.availability_zone AS volumes_availability_zone, volumes.status AS volumes_status, volumes.attach_status AS volumes_attach_status, volumes.migration_status AS volumes_migration_status, volumes.scheduled_at AS volumes_scheduled_at, volumes.launched_at AS volumes_launched_at, volumes.terminated_at AS volumes_terminated_at, volumes.display_name AS volumes_display_name, volumes.display_description AS volumes_display_description, volumes.provider_location AS volumes_provider_location, volumes.provider_auth AS volumes_provider_auth, volumes.provider_geometry AS volumes_provider_geometry, volumes.provider_id AS volumes_provider_id, volumes.volume_type_id AS volumes_volume_type_id, volumes.source_volid AS volumes_source_volid, volumes.encryption_key_id AS volumes_encryption_key_id, volumes.consistencygroup_id AS volumes_consistencygroup_id, volumes.bootable AS volumes_bootable, volumes.multiattach AS volumes_multiattach, volumes.replication_status AS volumes_replication_status, volumes.replication_extended_status AS volumes_replication_extended_status, volumes.replication_driver_data AS volumes_replication_driver_data, volumes.previous_status AS volumes_previous_status FROM volumes WHERE volumes.deleted = false AND (volumes.migration_status IS NULL OR (volumes.migration_status NOT LIKE 'target:%')) AND volumes.project_id = '8083447923734c679b261219b815d3bc' ORDER BY volumes.created_at DESC, volumes.id DESC LIMIT 1000) AS anon_1 LEFT OUTER JOIN consistencygroups AS consistencygroups_1 ON anon_1.volumes_consistencygroup_id = consistencygroups_1.id LEFT OUTER JOIN volume_metadata AS volume_metadata_1 ON volume_metadata_1.volume_id = anon_1.volumes_id AND volume_metadata_1.deleted = false LEFT OUTER JOIN volume_attachment AS volume_attachment_1 ON volume_attachment_1.volume_id = anon_1.volumes_id AND volume_attachment_1.deleted = false LEFT OUTER JOIN volume_admin_metadata AS volume_admin_metadata_1 ON volume_admin_metadata_1.volume_id = anon_1.volumes_id AND volume_admin_metadata_1.deleted = false LEFT OUTER JOIN volume_types AS volume_types_1 ON anon_1.volumes_volume_type_id = volume_types_1.id AND volume_types_1.deleted = false ORDER BY anon_1.volumes_created_at DESC, anon_1.volumes_id DESC",
    "db_id": "csail_stata_cinder",
    "join_keys": []
  },
  {
    "question": "Provide information about network that include subnet 388ee748-7b3d-4049-99b4-7e582937bbd4.",
    "sql": "SELECT networks.tenant_id AS networks_tenant_id, networks.id AS networks_id, networks.name AS networks_name, networks.status AS networks_status, networks.admin_state_up AS networks_admin_state_up, networks.mtu AS networks_mtu, networks.vlan_transparent AS networks_vlan_transparent, networks.availability_zone_hints AS networks_availability_zone_hints, networks.standard_attr_id AS networks_standard_attr_id, anon_1.subnets_network_id AS anon_1_subnets_network_id, agents_1.id AS agents_1_id, agents_1.agent_type AS agents_1_agent_type, agents_1.`binary` AS agents_1_binary, agents_1.topic AS agents_1_topic, agents_1.host AS agents_1_host, agents_1.availability_zone AS agents_1_availability_zone, agents_1.admin_state_up AS agents_1_admin_state_up, agents_1.created_at AS agents_1_created_at, agents_1.started_at AS agents_1_started_at, agents_1.heartbeat_timestamp AS agents_1_heartbeat_timestamp, agents_1.description AS agents_1_description, agents_1.configurations AS agents_1_configurations, agents_1.resource_versions AS agents_1_resource_versions, agents_1.`load` AS agents_1_load, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, externalnetworks_1.network_id AS externalnetworks_1_network_id, externalnetworks_1.is_default AS externalnetworks_1_is_default, qos_network_policy_bindings_1.policy_id AS qos_network_policy_bindings_1_policy_id, qos_network_policy_bindings_1.network_id AS qos_network_policy_bindings_1_network_id, networksecuritybindings_1.network_id AS networksecuritybindings_1_network_id, networksecuritybindings_1.port_security_enabled AS networksecuritybindings_1_port_security_enabled, networkdnsdomains_1.network_id AS networkdnsdomains_1_network_id, networkdnsdomains_1.dns_domain AS networkdnsdomains_1_dns_domain FROM (SELECT DISTINCT subnets.network_id AS subnets_network_id FROM subnets WHERE subnets.id IN ('388ee748-7b3d-4049-99b4-7e582937bbd4')) AS anon_1 INNER JOIN networks ON networks.id = anon_1.subnets_network_id LEFT OUTER JOIN (networkdhcpagentbindings AS networkdhcpagentbindings_1 INNER JOIN agents AS agents_1 ON agents_1.id = networkdhcpagentbindings_1.dhcp_agent_id) ON networks.id = networkdhcpagentbindings_1.network_id LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = networks.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN externalnetworks AS externalnetworks_1 ON networks.id = externalnetworks_1.network_id LEFT OUTER JOIN qos_network_policy_bindings AS qos_network_policy_bindings_1 ON networks.id = qos_network_policy_bindings_1.network_id LEFT OUTER JOIN networksecuritybindings AS networksecuritybindings_1 ON networks.id = networksecuritybindings_1.network_id LEFT OUTER JOIN networkdnsdomains AS networkdnsdomains_1 ON networks.id = networkdnsdomains_1.network_id ORDER BY anon_1.subnets_network_id",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "STANDARDATTRIBUTES.ID",
        "NETWORKS.STANDARD_ATTR_ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "TAGS.STANDARD_ATTR_ID"
      ],
      [
        "EXTERNALNETWORKS.NETWORK_ID",
        "NETWORKS.ID"
      ],
      [
        "NETWORKS.ID",
        "QOS_NETWORK_POLICY_BINDINGS.NETWORK_ID"
      ],
      [
        "NETWORKSECURITYBINDINGS.NETWORK_ID",
        "NETWORKS.ID"
      ],
      [
        "NETWORKDNSDOMAINS.NETWORK_ID",
        "NETWORKS.ID"
      ]
    ]
  },
  {
    "question": "Provide information about network access control for network that includes subnet 76123b94-2ae9-40c4-a4c6-03ee98d081d9.",
    "sql": "SELECT networkrbacs.tenant_id AS networkrbacs_tenant_id, networkrbacs.id AS networkrbacs_id, networkrbacs.target_tenant AS networkrbacs_target_tenant, networkrbacs.action AS networkrbacs_action, networkrbacs.object_id AS networkrbacs_object_id, networks_1.id AS networks_1_id FROM (SELECT DISTINCT subnets.network_id AS subnets_network_id FROM subnets WHERE subnets.id IN ('76123b94-2ae9-40c4-a4c6-03ee98d081d9', '76123b94-2ae9-40c4-a4c6-03ee98d081d9', '76123b94-2ae9-40c4-a4c6-03ee98d081d9')) AS anon_1 INNER JOIN networks AS networks_1 ON networks_1.id = anon_1.subnets_network_id INNER JOIN networkrbacs ON networks_1.id = networkrbacs.object_id ORDER BY networks_1.id",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "NETWORKS.ID",
        "NETWORKRBACS.OBJECT_ID"
      ]
    ]
  },
  {
    "question": "Provide information about subnets associated with network b3d6c27a-a9bb-4521-b5de-4d65eb7490dc.",
    "sql": "SELECT subnets.tenant_id AS subnets_tenant_id, subnets.id AS subnets_id, subnets.name AS subnets_name, subnets.network_id AS subnets_network_id, subnets.subnetpool_id AS subnets_subnetpool_id, subnets.ip_version AS subnets_ip_version, subnets.cidr AS subnets_cidr, subnets.gateway_ip AS subnets_gateway_ip, subnets.enable_dhcp AS subnets_enable_dhcp, subnets.ipv6_ra_mode AS subnets_ipv6_ra_mode, subnets.ipv6_address_mode AS subnets_ipv6_address_mode, subnets.standard_attr_id AS subnets_standard_attr_id, anon_1.networks_id AS anon_1_networks_id, subnetpoolprefixes_1.cidr AS subnetpoolprefixes_1_cidr, subnetpoolprefixes_1.subnetpool_id AS subnetpoolprefixes_1_subnetpool_id, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, subnetpools_1.tenant_id AS subnetpools_1_tenant_id, subnetpools_1.id AS subnetpools_1_id, subnetpools_1.name AS subnetpools_1_name, subnetpools_1.ip_version AS subnetpools_1_ip_version, subnetpools_1.default_prefixlen AS subnetpools_1_default_prefixlen, subnetpools_1.min_prefixlen AS subnetpools_1_min_prefixlen, subnetpools_1.max_prefixlen AS subnetpools_1_max_prefixlen, subnetpools_1.shared AS subnetpools_1_shared, subnetpools_1.is_default AS subnetpools_1_is_default, subnetpools_1.default_quota AS subnetpools_1_default_quota, subnetpools_1.hash AS subnetpools_1_hash, subnetpools_1.address_scope_id AS subnetpools_1_address_scope_id, subnetpools_1.standard_attr_id AS subnetpools_1_standard_attr_id, ipallocationpools_1.id AS ipallocationpools_1_id, ipallocationpools_1.subnet_id AS ipallocationpools_1_subnet_id, ipallocationpools_1.first_ip AS ipallocationpools_1_first_ip, ipallocationpools_1.last_ip AS ipallocationpools_1_last_ip, dnsnameservers_1.address AS dnsnameservers_1_address, dnsnameservers_1.subnet_id AS dnsnameservers_1_subnet_id, dnsnameservers_1.`order` AS dnsnameservers_1_order, subnetroutes_1.destination AS subnetroutes_1_destination, subnetroutes_1.nexthop AS subnetroutes_1_nexthop, subnetroutes_1.subnet_id AS subnetroutes_1_subnet_id, standardattributes_2.created_at AS standardattributes_2_created_at, standardattributes_2.updated_at AS standardattributes_2_updated_at, standardattributes_2.id AS standardattributes_2_id, standardattributes_2.resource_type AS standardattributes_2_resource_type, standardattributes_2.description AS standardattributes_2_description, tags_2.standard_attr_id AS tags_2_standard_attr_id, tags_2.tag AS tags_2_tag FROM (SELECT networks.id AS networks_id FROM networks LEFT OUTER JOIN externalnetworks ON networks.id = externalnetworks.network_id WHERE networks.id IN ('b3d6c27a-a9bb-4521-b5de-4d65eb7490dc')) AS anon_1 INNER JOIN subnets ON anon_1.networks_id = subnets.network_id LEFT OUTER JOIN subnetpools AS subnetpools_1 ON subnets.subnetpool_id = subnetpools_1.id LEFT OUTER JOIN subnetpoolprefixes AS subnetpoolprefixes_1 ON subnetpools_1.id = subnetpoolprefixes_1.subnetpool_id LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = subnetpools_1.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN ipallocationpools AS ipallocationpools_1 ON subnets.id = ipallocationpools_1.subnet_id LEFT OUTER JOIN dnsnameservers AS dnsnameservers_1 ON subnets.id = dnsnameservers_1.subnet_id LEFT OUTER JOIN subnetroutes AS subnetroutes_1 ON subnets.id = subnetroutes_1.subnet_id LEFT OUTER JOIN standardattributes AS standardattributes_2 ON standardattributes_2.id = subnets.standard_attr_id LEFT OUTER JOIN tags AS tags_2 ON standardattributes_2.id = tags_2.standard_attr_id ORDER BY anon_1.networks_id, dnsnameservers_1.`order`",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "EXTERNALNETWORKS.NETWORK_ID",
        "NETWORKS.ID"
      ],
      [
        "SUBNETS.SUBNETPOOL_ID",
        "SUBNETPOOLS.ID"
      ],
      [
        "SUBNETPOOLPREFIXES.SUBNETPOOL_ID",
        "SUBNETPOOLS.ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "SUBNETPOOLS.STANDARD_ATTR_ID"
      ],
      [
        "TAGS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ],
      [
        "IPALLOCATIONPOOLS.SUBNET_ID",
        "SUBNETS.ID"
      ],
      [
        "DNSNAMESERVERS.SUBNET_ID",
        "SUBNETS.ID"
      ],
      [
        "SUBNETROUTES.SUBNET_ID",
        "SUBNETS.ID"
      ],
      [
        "SUBNETS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ],
      [
        "TAGS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ]
    ]
  },
  {
    "question": "Provide information about subnet access control for subnets in network b3d6c27a-a9bb-4521-b5de-4d65eb7490dc.",
    "sql": "SELECT networkrbacs.tenant_id AS networkrbacs_tenant_id, networkrbacs.id AS networkrbacs_id, networkrbacs.target_tenant AS networkrbacs_target_tenant, networkrbacs.action AS networkrbacs_action, networkrbacs.object_id AS networkrbacs_object_id, subnets_1.network_id AS subnets_1_network_id FROM (SELECT networks.id AS networks_id FROM networks LEFT OUTER JOIN externalnetworks ON networks.id = externalnetworks.network_id WHERE networks.id IN ('b3d6c27a-a9bb-4521-b5de-4d65eb7490dc')) AS anon_1 INNER JOIN subnets AS subnets_1 ON anon_1.networks_id = subnets_1.network_id INNER JOIN networkrbacs ON subnets_1.network_id = networkrbacs.object_id ORDER BY subnets_1.network_id",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "NETWORKS.ID",
        "EXTERNALNETWORKS.NETWORK_ID"
      ],
      [
        "SUBNETS.NETWORK_ID",
        "NETWORKRBACS.OBJECT_ID"
      ]
    ]
  },
  {
    "question": "Provide information about network access control for network that includes subnet 16eaae8c-1920-4b8b-8765-f149dde8a1a6.",
    "sql": "SELECT networkrbacs.tenant_id AS networkrbacs_tenant_id, networkrbacs.id AS networkrbacs_id, networkrbacs.target_tenant AS networkrbacs_target_tenant, networkrbacs.action AS networkrbacs_action, networkrbacs.object_id AS networkrbacs_object_id, networks_1.id AS networks_1_id FROM (SELECT DISTINCT subnets.network_id AS subnets_network_id FROM subnets WHERE subnets.id IN ('16eaae8c-1920-4b8b-8765-f149dde8a1a6')) AS anon_1 INNER JOIN networks AS networks_1 ON networks_1.id = anon_1.subnets_network_id INNER JOIN networkrbacs ON networks_1.id = networkrbacs.object_id ORDER BY networks_1.id",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "NETWORKS.ID",
        "NETWORKRBACS.OBJECT_ID"
      ]
    ]
  },
  {
    "question": "Provide information about network access control for network 0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d.",
    "sql": "SELECT networkrbacs.tenant_id AS networkrbacs_tenant_id, networkrbacs.id AS networkrbacs_id, networkrbacs.target_tenant AS networkrbacs_target_tenant, networkrbacs.action AS networkrbacs_action, networkrbacs.object_id AS networkrbacs_object_id, anon_1.networks_id AS anon_1_networks_id FROM (SELECT networks.id AS networks_id FROM networks LEFT OUTER JOIN externalnetworks ON networks.id = externalnetworks.network_id WHERE networks.id IN ('0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d', '0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d', '0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d')) AS anon_1 INNER JOIN networkrbacs ON anon_1.networks_id = networkrbacs.object_id ORDER BY anon_1.networks_id",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "EXTERNALNETWORKS.NETWORK_ID",
        "NETWORKS.ID"
      ]
    ]
  },
  {
    "question": "Provide information about federated user 945fa0ad0137481cac5ef83a0b94b1b9.",
    "sql": "SELECT federated_user.id AS federated_user_id, federated_user.user_id AS federated_user_user_id, federated_user.idp_id AS federated_user_idp_id, federated_user.protocol_id AS federated_user_protocol_id, federated_user.unique_id AS federated_user_unique_id, federated_user.display_name AS federated_user_display_name, anon_1.user_id AS anon_1_user_id FROM (SELECT user.id AS user_id FROM user WHERE user.id = '945fa0ad0137481cac5ef83a0b94b1b9') AS anon_1 INNER JOIN federated_user ON anon_1.user_id = federated_user.user_id ORDER BY anon_1.user_id",
    "db_id": "keystone",
    "join_keys": []
  },
  {
    "question": "Provide id information about the local user with name prime_helix.306sonic.",
    "sql": "SELECT local_user.id AS local_user_id, local_user.user_id AS local_user_user_id, local_user.domain_id AS local_user_domain_id, local_user.name AS local_user_name, anon_1.user_id AS anon_1_user_id FROM (SELECT user.id AS user_id FROM user INNER JOIN local_user ON user.id = local_user.user_id WHERE local_user.name = 'prime_helix.306sonic' AND local_user.domain_id = 'default') AS anon_1 INNER JOIN local_user ON anon_1.user_id = local_user.user_id ORDER BY anon_1.user_id",
    "db_id": "keystone",
    "join_keys": [
      [
        "LOCAL_USER.USER_ID",
        "USER.ID"
      ]
    ]
  },
  {
    "question": "Provide information about subnets associated with networks 0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d and c9e8f307-e1d5-4c06-b464-ef5370ca1d6d.",
    "sql": "SELECT subnets.tenant_id AS subnets_tenant_id, subnets.id AS subnets_id, subnets.name AS subnets_name, subnets.network_id AS subnets_network_id, subnets.subnetpool_id AS subnets_subnetpool_id, subnets.ip_version AS subnets_ip_version, subnets.cidr AS subnets_cidr, subnets.gateway_ip AS subnets_gateway_ip, subnets.enable_dhcp AS subnets_enable_dhcp, subnets.ipv6_ra_mode AS subnets_ipv6_ra_mode, subnets.ipv6_address_mode AS subnets_ipv6_address_mode, subnets.standard_attr_id AS subnets_standard_attr_id, anon_1.networks_id AS anon_1_networks_id, subnetpoolprefixes_1.cidr AS subnetpoolprefixes_1_cidr, subnetpoolprefixes_1.subnetpool_id AS subnetpoolprefixes_1_subnetpool_id, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, subnetpools_1.tenant_id AS subnetpools_1_tenant_id, subnetpools_1.id AS subnetpools_1_id, subnetpools_1.name AS subnetpools_1_name, subnetpools_1.ip_version AS subnetpools_1_ip_version, subnetpools_1.default_prefixlen AS subnetpools_1_default_prefixlen, subnetpools_1.min_prefixlen AS subnetpools_1_min_prefixlen, subnetpools_1.max_prefixlen AS subnetpools_1_max_prefixlen, subnetpools_1.shared AS subnetpools_1_shared, subnetpools_1.is_default AS subnetpools_1_is_default, subnetpools_1.default_quota AS subnetpools_1_default_quota, subnetpools_1.hash AS subnetpools_1_hash, subnetpools_1.address_scope_id AS subnetpools_1_address_scope_id, subnetpools_1.standard_attr_id AS subnetpools_1_standard_attr_id, ipallocationpools_1.id AS ipallocationpools_1_id, ipallocationpools_1.subnet_id AS ipallocationpools_1_subnet_id, ipallocationpools_1.first_ip AS ipallocationpools_1_first_ip, ipallocationpools_1.last_ip AS ipallocationpools_1_last_ip, dnsnameservers_1.address AS dnsnameservers_1_address, dnsnameservers_1.subnet_id AS dnsnameservers_1_subnet_id, dnsnameservers_1.`order` AS dnsnameservers_1_order, subnetroutes_1.destination AS subnetroutes_1_destination, subnetroutes_1.nexthop AS subnetroutes_1_nexthop, subnetroutes_1.subnet_id AS subnetroutes_1_subnet_id, standardattributes_2.created_at AS standardattributes_2_created_at, standardattributes_2.updated_at AS standardattributes_2_updated_at, standardattributes_2.id AS standardattributes_2_id, standardattributes_2.resource_type AS standardattributes_2_resource_type, standardattributes_2.description AS standardattributes_2_description, tags_2.standard_attr_id AS tags_2_standard_attr_id, tags_2.tag AS tags_2_tag FROM (SELECT networks.id AS networks_id FROM networks LEFT OUTER JOIN externalnetworks ON networks.id = externalnetworks.network_id WHERE networks.id IN ('0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d', 'c9e8f307-e1d5-4c06-b464-ef5370ca1d6d')) AS anon_1 INNER JOIN subnets ON anon_1.networks_id = subnets.network_id LEFT OUTER JOIN subnetpools AS subnetpools_1 ON subnets.subnetpool_id = subnetpools_1.id LEFT OUTER JOIN subnetpoolprefixes AS subnetpoolprefixes_1 ON subnetpools_1.id = subnetpoolprefixes_1.subnetpool_id LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = subnetpools_1.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN ipallocationpools AS ipallocationpools_1 ON subnets.id = ipallocationpools_1.subnet_id LEFT OUTER JOIN dnsnameservers AS dnsnameservers_1 ON subnets.id = dnsnameservers_1.subnet_id LEFT OUTER JOIN subnetroutes AS subnetroutes_1 ON subnets.id = subnetroutes_1.subnet_id LEFT OUTER JOIN standardattributes AS standardattributes_2 ON standardattributes_2.id = subnets.standard_attr_id LEFT OUTER JOIN tags AS tags_2 ON standardattributes_2.id = tags_2.standard_attr_id ORDER BY anon_1.networks_id, dnsnameservers_1.`order`",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "NETWORKS.ID",
        "EXTERNALNETWORKS.NETWORK_ID"
      ],
      [
        "SUBNETPOOLS.ID",
        "SUBNETS.SUBNETPOOL_ID"
      ],
      [
        "SUBNETPOOLS.ID",
        "SUBNETPOOLPREFIXES.SUBNETPOOL_ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "SUBNETPOOLS.STANDARD_ATTR_ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "TAGS.STANDARD_ATTR_ID"
      ],
      [
        "IPALLOCATIONPOOLS.SUBNET_ID",
        "SUBNETS.ID"
      ],
      [
        "DNSNAMESERVERS.SUBNET_ID",
        "SUBNETS.ID"
      ],
      [
        "SUBNETROUTES.SUBNET_ID",
        "SUBNETS.ID"
      ],
      [
        "SUBNETS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ],
      [
        "TAGS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ]
    ]
  },
  {
    "question": "Provide information about subnet access control for subnet 76123b94-2ae9-40c4-a4c6-03ee98d081d9.",
    "sql": "SELECT networkrbacs.tenant_id AS networkrbacs_tenant_id, networkrbacs.id AS networkrbacs_id, networkrbacs.target_tenant AS networkrbacs_target_tenant, networkrbacs.action AS networkrbacs_action, networkrbacs.object_id AS networkrbacs_object_id, anon_1.subnets_network_id AS anon_1_subnets_network_id FROM (SELECT DISTINCT subnets.network_id AS subnets_network_id FROM subnets WHERE subnets.id IN ('76123b94-2ae9-40c4-a4c6-03ee98d081d9', '76123b94-2ae9-40c4-a4c6-03ee98d081d9', '76123b94-2ae9-40c4-a4c6-03ee98d081d9')) AS anon_1 INNER JOIN networkrbacs ON anon_1.subnets_network_id = networkrbacs.object_id ORDER BY anon_1.subnets_network_id",
    "db_id": "csail_stata_neutron",
    "join_keys": []
  },
  {
    "question": "Provide password information about the local user with name prime_helix.306sonic.",
    "sql": "SELECT password.id AS password_id, password.local_user_id AS password_local_user_id, password.password AS password_password, local_user_1.id AS local_user_1_id FROM (SELECT user.id AS user_id FROM user INNER JOIN local_user ON user.id = local_user.user_id WHERE local_user.name = 'prime_helix.306sonic' AND local_user.domain_id = 'default') AS anon_1 INNER JOIN local_user AS local_user_1 ON anon_1.user_id = local_user_1.user_id INNER JOIN password ON local_user_1.id = password.local_user_id ORDER BY local_user_1.id",
    "db_id": "keystone",
    "join_keys": [
      [
        "USER.ID",
        "LOCAL_USER.USER_ID"
      ],
      [
        "LOCAL_USER.ID",
        "PASSWORD.LOCAL_USER_ID"
      ]
    ]
  },
  {
    "question": "Provide information about subnets associated with network 0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d.",
    "sql": "SELECT subnets.tenant_id AS subnets_tenant_id, subnets.id AS subnets_id, subnets.name AS subnets_name, subnets.network_id AS subnets_network_id, subnets.subnetpool_id AS subnets_subnetpool_id, subnets.ip_version AS subnets_ip_version, subnets.cidr AS subnets_cidr, subnets.gateway_ip AS subnets_gateway_ip, subnets.enable_dhcp AS subnets_enable_dhcp, subnets.ipv6_ra_mode AS subnets_ipv6_ra_mode, subnets.ipv6_address_mode AS subnets_ipv6_address_mode, subnets.standard_attr_id AS subnets_standard_attr_id, anon_1.networks_id AS anon_1_networks_id, subnetpoolprefixes_1.cidr AS subnetpoolprefixes_1_cidr, subnetpoolprefixes_1.subnetpool_id AS subnetpoolprefixes_1_subnetpool_id, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, subnetpools_1.tenant_id AS subnetpools_1_tenant_id, subnetpools_1.id AS subnetpools_1_id, subnetpools_1.name AS subnetpools_1_name, subnetpools_1.ip_version AS subnetpools_1_ip_version, subnetpools_1.default_prefixlen AS subnetpools_1_default_prefixlen, subnetpools_1.min_prefixlen AS subnetpools_1_min_prefixlen, subnetpools_1.max_prefixlen AS subnetpools_1_max_prefixlen, subnetpools_1.shared AS subnetpools_1_shared, subnetpools_1.is_default AS subnetpools_1_is_default, subnetpools_1.default_quota AS subnetpools_1_default_quota, subnetpools_1.hash AS subnetpools_1_hash, subnetpools_1.address_scope_id AS subnetpools_1_address_scope_id, subnetpools_1.standard_attr_id AS subnetpools_1_standard_attr_id, ipallocationpools_1.id AS ipallocationpools_1_id, ipallocationpools_1.subnet_id AS ipallocationpools_1_subnet_id, ipallocationpools_1.first_ip AS ipallocationpools_1_first_ip, ipallocationpools_1.last_ip AS ipallocationpools_1_last_ip, dnsnameservers_1.address AS dnsnameservers_1_address, dnsnameservers_1.subnet_id AS dnsnameservers_1_subnet_id, dnsnameservers_1.`order` AS dnsnameservers_1_order, subnetroutes_1.destination AS subnetroutes_1_destination, subnetroutes_1.nexthop AS subnetroutes_1_nexthop, subnetroutes_1.subnet_id AS subnetroutes_1_subnet_id, standardattributes_2.created_at AS standardattributes_2_created_at, standardattributes_2.updated_at AS standardattributes_2_updated_at, standardattributes_2.id AS standardattributes_2_id, standardattributes_2.resource_type AS standardattributes_2_resource_type, standardattributes_2.description AS standardattributes_2_description, tags_2.standard_attr_id AS tags_2_standard_attr_id, tags_2.tag AS tags_2_tag FROM (SELECT networks.id AS networks_id FROM networks LEFT OUTER JOIN externalnetworks ON networks.id = externalnetworks.network_id WHERE networks.id IN ('0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d', '0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d', '0a1d0a27-cffa-4de3-92c5-9d3fd3f2e74d')) AS anon_1 INNER JOIN subnets ON anon_1.networks_id = subnets.network_id LEFT OUTER JOIN subnetpools AS subnetpools_1 ON subnets.subnetpool_id = subnetpools_1.id LEFT OUTER JOIN subnetpoolprefixes AS subnetpoolprefixes_1 ON subnetpools_1.id = subnetpoolprefixes_1.subnetpool_id LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = subnetpools_1.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN ipallocationpools AS ipallocationpools_1 ON subnets.id = ipallocationpools_1.subnet_id LEFT OUTER JOIN dnsnameservers AS dnsnameservers_1 ON subnets.id = dnsnameservers_1.subnet_id LEFT OUTER JOIN subnetroutes AS subnetroutes_1 ON subnets.id = subnetroutes_1.subnet_id LEFT OUTER JOIN standardattributes AS standardattributes_2 ON standardattributes_2.id = subnets.standard_attr_id LEFT OUTER JOIN tags AS tags_2 ON standardattributes_2.id = tags_2.standard_attr_id ORDER BY anon_1.networks_id, dnsnameservers_1.`order`",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "EXTERNALNETWORKS.NETWORK_ID",
        "NETWORKS.ID"
      ],
      [
        "SUBNETS.SUBNETPOOL_ID",
        "SUBNETPOOLS.ID"
      ],
      [
        "SUBNETPOOLS.ID",
        "SUBNETPOOLPREFIXES.SUBNETPOOL_ID"
      ],
      [
        "SUBNETPOOLS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "TAGS.STANDARD_ATTR_ID"
      ],
      [
        "IPALLOCATIONPOOLS.SUBNET_ID",
        "SUBNETS.ID"
      ],
      [
        "SUBNETS.ID",
        "DNSNAMESERVERS.SUBNET_ID"
      ],
      [
        "SUBNETS.ID",
        "SUBNETROUTES.SUBNET_ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "SUBNETS.STANDARD_ATTR_ID"
      ],
      [
        "TAGS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ]
    ]
  },
  {
    "question": "Provide information about network that include subnet 76123b94-2ae9-40c4-a4c6-03ee98d081d9.",
    "sql": "SELECT networks.tenant_id AS networks_tenant_id, networks.id AS networks_id, networks.name AS networks_name, networks.status AS networks_status, networks.admin_state_up AS networks_admin_state_up, networks.mtu AS networks_mtu, networks.vlan_transparent AS networks_vlan_transparent, networks.availability_zone_hints AS networks_availability_zone_hints, networks.standard_attr_id AS networks_standard_attr_id, anon_1.subnets_network_id AS anon_1_subnets_network_id, agents_1.id AS agents_1_id, agents_1.agent_type AS agents_1_agent_type, agents_1.`binary` AS agents_1_binary, agents_1.topic AS agents_1_topic, agents_1.host AS agents_1_host, agents_1.availability_zone AS agents_1_availability_zone, agents_1.admin_state_up AS agents_1_admin_state_up, agents_1.created_at AS agents_1_created_at, agents_1.started_at AS agents_1_started_at, agents_1.heartbeat_timestamp AS agents_1_heartbeat_timestamp, agents_1.description AS agents_1_description, agents_1.configurations AS agents_1_configurations, agents_1.resource_versions AS agents_1_resource_versions, agents_1.`load` AS agents_1_load, standardattributes_1.created_at AS standardattributes_1_created_at, standardattributes_1.updated_at AS standardattributes_1_updated_at, standardattributes_1.id AS standardattributes_1_id, standardattributes_1.resource_type AS standardattributes_1_resource_type, standardattributes_1.description AS standardattributes_1_description, tags_1.standard_attr_id AS tags_1_standard_attr_id, tags_1.tag AS tags_1_tag, externalnetworks_1.network_id AS externalnetworks_1_network_id, externalnetworks_1.is_default AS externalnetworks_1_is_default, qos_network_policy_bindings_1.policy_id AS qos_network_policy_bindings_1_policy_id, qos_network_policy_bindings_1.network_id AS qos_network_policy_bindings_1_network_id, networksecuritybindings_1.network_id AS networksecuritybindings_1_network_id, networksecuritybindings_1.port_security_enabled AS networksecuritybindings_1_port_security_enabled, networkdnsdomains_1.network_id AS networkdnsdomains_1_network_id, networkdnsdomains_1.dns_domain AS networkdnsdomains_1_dns_domain FROM (SELECT DISTINCT subnets.network_id AS subnets_network_id FROM subnets WHERE subnets.id IN ('76123b94-2ae9-40c4-a4c6-03ee98d081d9', '76123b94-2ae9-40c4-a4c6-03ee98d081d9', '76123b94-2ae9-40c4-a4c6-03ee98d081d9')) AS anon_1 INNER JOIN networks ON networks.id = anon_1.subnets_network_id LEFT OUTER JOIN (networkdhcpagentbindings AS networkdhcpagentbindings_1 INNER JOIN agents AS agents_1 ON agents_1.id = networkdhcpagentbindings_1.dhcp_agent_id) ON networks.id = networkdhcpagentbindings_1.network_id LEFT OUTER JOIN standardattributes AS standardattributes_1 ON standardattributes_1.id = networks.standard_attr_id LEFT OUTER JOIN tags AS tags_1 ON standardattributes_1.id = tags_1.standard_attr_id LEFT OUTER JOIN externalnetworks AS externalnetworks_1 ON networks.id = externalnetworks_1.network_id LEFT OUTER JOIN qos_network_policy_bindings AS qos_network_policy_bindings_1 ON networks.id = qos_network_policy_bindings_1.network_id LEFT OUTER JOIN networksecuritybindings AS networksecuritybindings_1 ON networks.id = networksecuritybindings_1.network_id LEFT OUTER JOIN networkdnsdomains AS networkdnsdomains_1 ON networks.id = networkdnsdomains_1.network_id ORDER BY anon_1.subnets_network_id",
    "db_id": "csail_stata_neutron",
    "join_keys": [
      [
        "NETWORKS.STANDARD_ATTR_ID",
        "STANDARDATTRIBUTES.ID"
      ],
      [
        "STANDARDATTRIBUTES.ID",
        "TAGS.STANDARD_ATTR_ID"
      ],
      [
        "EXTERNALNETWORKS.NETWORK_ID",
        "NETWORKS.ID"
      ],
      [
        "QOS_NETWORK_POLICY_BINDINGS.NETWORK_ID",
        "NETWORKS.ID"
      ],
      [
        "NETWORKS.ID",
        "NETWORKSECURITYBINDINGS.NETWORK_ID"
      ],
      [
        "NETWORKS.ID",
        "NETWORKDNSDOMAINS.NETWORK_ID"
      ]
    ]
  }
]